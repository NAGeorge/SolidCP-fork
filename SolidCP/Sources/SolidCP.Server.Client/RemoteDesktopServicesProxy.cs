//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.7905
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace SolidCP.Providers.RemoteDesktopServices {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using SolidCP.EnterpriseServer.Base.RDS;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RemoteDesktopServicesSoap", Namespace="http://smbsaas/solidcp/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RdsCollectionSetting[]))]
    public partial class RemoteDesktopServices : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;
        
        private System.Threading.SendOrPostCallback CreateCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditRdsCollectionSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsUserSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRdsServersToDeploymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUsersInCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSessionHostServerToCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSessionHostServersToCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSessionHostServerFromCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSessionHostServersFromCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRDServerNewConnectionAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRemoteApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionRemoteApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRemoteApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSessionHostFeatureToServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSessionHostFeatureInstallationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckServerAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRDSServerAvaliableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServersExistingInCollectionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogOffRdsUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionSessionHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShutDownRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestartRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRdsCollectionLocalAdminsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionLocalAdminsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveRdsServerToTenantOUOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRdsServerFromTenantOUOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveSessionHostToRdsOUOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyGPOOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShadowSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveSessionHostsToCollectionOUOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExistingCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        /// <remarks/>
        public RemoteDesktopServices() {
            this.Url = "http://localhost:9003/RemoteDesktopServices.asmx";
        }
        
        /// <remarks/>
        public event CreateCollectionCompletedEventHandler CreateCollectionCompleted;
        
        /// <remarks/>
        public event EditRdsCollectionSettingsCompletedEventHandler EditRdsCollectionSettingsCompleted;
        
        /// <remarks/>
        public event GetRdsUserSessionsCompletedEventHandler GetRdsUserSessionsCompleted;
        
        /// <remarks/>
        public event AddRdsServersToDeploymentCompletedEventHandler AddRdsServersToDeploymentCompleted;
        
        /// <remarks/>
        public event GetCollectionCompletedEventHandler GetCollectionCompleted;
        
        /// <remarks/>
        public event RemoveCollectionCompletedEventHandler RemoveCollectionCompleted;
        
        /// <remarks/>
        public event SetUsersInCollectionCompletedEventHandler SetUsersInCollectionCompleted;
        
        /// <remarks/>
        public event AddSessionHostServerToCollectionCompletedEventHandler AddSessionHostServerToCollectionCompleted;
        
        /// <remarks/>
        public event AddSessionHostServersToCollectionCompletedEventHandler AddSessionHostServersToCollectionCompleted;
        
        /// <remarks/>
        public event RemoveSessionHostServerFromCollectionCompletedEventHandler RemoveSessionHostServerFromCollectionCompleted;
        
        /// <remarks/>
        public event RemoveSessionHostServersFromCollectionCompletedEventHandler RemoveSessionHostServersFromCollectionCompleted;
        
        /// <remarks/>
        public event SetRDServerNewConnectionAllowedCompletedEventHandler SetRDServerNewConnectionAllowedCompleted;
        
        /// <remarks/>
        public event GetAvailableRemoteApplicationsCompletedEventHandler GetAvailableRemoteApplicationsCompleted;
        
        /// <remarks/>
        public event GetCollectionRemoteApplicationsCompletedEventHandler GetCollectionRemoteApplicationsCompleted;
        
        /// <remarks/>
        public event AddRemoteApplicationCompletedEventHandler AddRemoteApplicationCompleted;
        
        /// <remarks/>
        public event AddRemoteApplicationsCompletedEventHandler AddRemoteApplicationsCompleted;
        
        /// <remarks/>
        public event RemoveRemoteApplicationCompletedEventHandler RemoveRemoteApplicationCompleted;
        
        /// <remarks/>
        public event AddSessionHostFeatureToServerCompletedEventHandler AddSessionHostFeatureToServerCompleted;
        
        /// <remarks/>
        public event CheckSessionHostFeatureInstallationCompletedEventHandler CheckSessionHostFeatureInstallationCompleted;
        
        /// <remarks/>
        public event CheckServerAvailabilityCompletedEventHandler CheckServerAvailabilityCompleted;
        
        /// <remarks/>
        public event GetApplicationUsersCompletedEventHandler GetApplicationUsersCompleted;
        
        /// <remarks/>
        public event SetApplicationUsersCompletedEventHandler SetApplicationUsersCompleted;
        
        /// <remarks/>
        public event CheckRDSServerAvaliableCompletedEventHandler CheckRDSServerAvaliableCompleted;
        
        /// <remarks/>
        public event GetServersExistingInCollectionsCompletedEventHandler GetServersExistingInCollectionsCompleted;
        
        /// <remarks/>
        public event LogOffRdsUserCompletedEventHandler LogOffRdsUserCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionSessionHostsCompletedEventHandler GetRdsCollectionSessionHostsCompleted;
        
        /// <remarks/>
        public event GetRdsServerInfoCompletedEventHandler GetRdsServerInfoCompleted;
        
        /// <remarks/>
        public event GetRdsServerStatusCompletedEventHandler GetRdsServerStatusCompleted;
        
        /// <remarks/>
        public event ShutDownRdsServerCompletedEventHandler ShutDownRdsServerCompleted;
        
        /// <remarks/>
        public event RestartRdsServerCompletedEventHandler RestartRdsServerCompleted;
        
        /// <remarks/>
        public event SaveRdsCollectionLocalAdminsCompletedEventHandler SaveRdsCollectionLocalAdminsCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionLocalAdminsCompletedEventHandler GetRdsCollectionLocalAdminsCompleted;
        
        /// <remarks/>
        public event MoveRdsServerToTenantOUCompletedEventHandler MoveRdsServerToTenantOUCompleted;
        
        /// <remarks/>
        public event RemoveRdsServerFromTenantOUCompletedEventHandler RemoveRdsServerFromTenantOUCompleted;
        
        /// <remarks/>
        public event InstallCertificateCompletedEventHandler InstallCertificateCompleted;
        
        /// <remarks/>
        public event MoveSessionHostToRdsOUCompletedEventHandler MoveSessionHostToRdsOUCompleted;
        
        /// <remarks/>
        public event ApplyGPOCompletedEventHandler ApplyGPOCompleted;
        
        /// <remarks/>
        public event ShadowSessionCompletedEventHandler ShadowSessionCompleted;
        
        /// <remarks/>
        public event MoveSessionHostsToCollectionOUCompletedEventHandler MoveSessionHostsToCollectionOUCompleted;
        
        /// <remarks/>
        public event GetExistingCollectionCompletedEventHandler GetExistingCollectionCompleted;
        
        /// <remarks/>
        public event ImportCollectionCompletedEventHandler ImportCollectionCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CreateCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateCollection(string organizationId, RdsCollection collection) {
            object[] results = this.Invoke("CreateCollection", new object[] {
                        organizationId,
                        collection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateCollection(string organizationId, RdsCollection collection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateCollection", new object[] {
                        organizationId,
                        collection}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCreateCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCollectionAsync(string organizationId, RdsCollection collection) {
            this.CreateCollectionAsync(organizationId, collection, null);
        }
        
        /// <remarks/>
        public void CreateCollectionAsync(string organizationId, RdsCollection collection, object userState) {
            if ((this.CreateCollectionOperationCompleted == null)) {
                this.CreateCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCollectionOperationCompleted);
            }
            this.InvokeAsync("CreateCollection", new object[] {
                        organizationId,
                        collection}, this.CreateCollectionOperationCompleted, userState);
        }
        
        private void OnCreateCollectionOperationCompleted(object arg) {
            if ((this.CreateCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCollectionCompleted(this, new CreateCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/EditRdsCollectionSettings", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditRdsCollectionSettings(RdsCollection collection) {
            this.Invoke("EditRdsCollectionSettings", new object[] {
                        collection});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditRdsCollectionSettings(RdsCollection collection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditRdsCollectionSettings", new object[] {
                        collection}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditRdsCollectionSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EditRdsCollectionSettingsAsync(RdsCollection collection) {
            this.EditRdsCollectionSettingsAsync(collection, null);
        }
        
        /// <remarks/>
        public void EditRdsCollectionSettingsAsync(RdsCollection collection, object userState) {
            if ((this.EditRdsCollectionSettingsOperationCompleted == null)) {
                this.EditRdsCollectionSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditRdsCollectionSettingsOperationCompleted);
            }
            this.InvokeAsync("EditRdsCollectionSettings", new object[] {
                        collection}, this.EditRdsCollectionSettingsOperationCompleted, userState);
        }
        
        private void OnEditRdsCollectionSettingsOperationCompleted(object arg) {
            if ((this.EditRdsCollectionSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditRdsCollectionSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetRdsUserSessions", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsUserSession[] GetRdsUserSessions(string collectionName) {
            object[] results = this.Invoke("GetRdsUserSessions", new object[] {
                        collectionName});
            return ((RdsUserSession[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsUserSessions(string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsUserSessions", new object[] {
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsUserSession[] EndGetRdsUserSessions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsUserSession[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsUserSessionsAsync(string collectionName) {
            this.GetRdsUserSessionsAsync(collectionName, null);
        }
        
        /// <remarks/>
        public void GetRdsUserSessionsAsync(string collectionName, object userState) {
            if ((this.GetRdsUserSessionsOperationCompleted == null)) {
                this.GetRdsUserSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsUserSessionsOperationCompleted);
            }
            this.InvokeAsync("GetRdsUserSessions", new object[] {
                        collectionName}, this.GetRdsUserSessionsOperationCompleted, userState);
        }
        
        private void OnGetRdsUserSessionsOperationCompleted(object arg) {
            if ((this.GetRdsUserSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsUserSessionsCompleted(this, new GetRdsUserSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddRdsServersToDeployment", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRdsServersToDeployment(RdsServer[] servers) {
            object[] results = this.Invoke("AddRdsServersToDeployment", new object[] {
                        servers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRdsServersToDeployment(RdsServer[] servers, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRdsServersToDeployment", new object[] {
                        servers}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddRdsServersToDeployment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRdsServersToDeploymentAsync(RdsServer[] servers) {
            this.AddRdsServersToDeploymentAsync(servers, null);
        }
        
        /// <remarks/>
        public void AddRdsServersToDeploymentAsync(RdsServer[] servers, object userState) {
            if ((this.AddRdsServersToDeploymentOperationCompleted == null)) {
                this.AddRdsServersToDeploymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRdsServersToDeploymentOperationCompleted);
            }
            this.InvokeAsync("AddRdsServersToDeployment", new object[] {
                        servers}, this.AddRdsServersToDeploymentOperationCompleted, userState);
        }
        
        private void OnAddRdsServersToDeploymentOperationCompleted(object arg) {
            if ((this.AddRdsServersToDeploymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRdsServersToDeploymentCompleted(this, new AddRdsServersToDeploymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCollection GetCollection(string collectionName) {
            object[] results = this.Invoke("GetCollection", new object[] {
                        collectionName});
            return ((RdsCollection)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCollection(string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCollection", new object[] {
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCollection EndGetCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCollection)(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionAsync(string collectionName) {
            this.GetCollectionAsync(collectionName, null);
        }
        
        /// <remarks/>
        public void GetCollectionAsync(string collectionName, object userState) {
            if ((this.GetCollectionOperationCompleted == null)) {
                this.GetCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionOperationCompleted);
            }
            this.InvokeAsync("GetCollection", new object[] {
                        collectionName}, this.GetCollectionOperationCompleted, userState);
        }
        
        private void OnGetCollectionOperationCompleted(object arg) {
            if ((this.GetCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionCompleted(this, new GetCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RemoveCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveCollection(string organizationId, string collectionName, RdsServer[] servers) {
            object[] results = this.Invoke("RemoveCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveCollection(string organizationId, string collectionName, RdsServer[] servers, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemoveCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCollectionAsync(string organizationId, string collectionName, RdsServer[] servers) {
            this.RemoveCollectionAsync(organizationId, collectionName, servers, null);
        }
        
        /// <remarks/>
        public void RemoveCollectionAsync(string organizationId, string collectionName, RdsServer[] servers, object userState) {
            if ((this.RemoveCollectionOperationCompleted == null)) {
                this.RemoveCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCollectionOperationCompleted);
            }
            this.InvokeAsync("RemoveCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers}, this.RemoveCollectionOperationCompleted, userState);
        }
        
        private void OnRemoveCollectionOperationCompleted(object arg) {
            if ((this.RemoveCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCollectionCompleted(this, new RemoveCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetUsersInCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUsersInCollection(string organizationId, string collectionName, string[] users) {
            object[] results = this.Invoke("SetUsersInCollection", new object[] {
                        organizationId,
                        collectionName,
                        users});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUsersInCollection(string organizationId, string collectionName, string[] users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUsersInCollection", new object[] {
                        organizationId,
                        collectionName,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetUsersInCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUsersInCollectionAsync(string organizationId, string collectionName, string[] users) {
            this.SetUsersInCollectionAsync(organizationId, collectionName, users, null);
        }
        
        /// <remarks/>
        public void SetUsersInCollectionAsync(string organizationId, string collectionName, string[] users, object userState) {
            if ((this.SetUsersInCollectionOperationCompleted == null)) {
                this.SetUsersInCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUsersInCollectionOperationCompleted);
            }
            this.InvokeAsync("SetUsersInCollection", new object[] {
                        organizationId,
                        collectionName,
                        users}, this.SetUsersInCollectionOperationCompleted, userState);
        }
        
        private void OnSetUsersInCollectionOperationCompleted(object arg) {
            if ((this.SetUsersInCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUsersInCollectionCompleted(this, new SetUsersInCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddSessionHostServerToCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSessionHostServerToCollection(string organizationId, string collectionName, RdsServer server) {
            this.Invoke("AddSessionHostServerToCollection", new object[] {
                        organizationId,
                        collectionName,
                        server});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSessionHostServerToCollection(string organizationId, string collectionName, RdsServer server, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSessionHostServerToCollection", new object[] {
                        organizationId,
                        collectionName,
                        server}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddSessionHostServerToCollection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddSessionHostServerToCollectionAsync(string organizationId, string collectionName, RdsServer server) {
            this.AddSessionHostServerToCollectionAsync(organizationId, collectionName, server, null);
        }
        
        /// <remarks/>
        public void AddSessionHostServerToCollectionAsync(string organizationId, string collectionName, RdsServer server, object userState) {
            if ((this.AddSessionHostServerToCollectionOperationCompleted == null)) {
                this.AddSessionHostServerToCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSessionHostServerToCollectionOperationCompleted);
            }
            this.InvokeAsync("AddSessionHostServerToCollection", new object[] {
                        organizationId,
                        collectionName,
                        server}, this.AddSessionHostServerToCollectionOperationCompleted, userState);
        }
        
        private void OnAddSessionHostServerToCollectionOperationCompleted(object arg) {
            if ((this.AddSessionHostServerToCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSessionHostServerToCollectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddSessionHostServersToCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSessionHostServersToCollection(string organizationId, string collectionName, RdsServer[] servers) {
            this.Invoke("AddSessionHostServersToCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSessionHostServersToCollection(string organizationId, string collectionName, RdsServer[] servers, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSessionHostServersToCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddSessionHostServersToCollection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddSessionHostServersToCollectionAsync(string organizationId, string collectionName, RdsServer[] servers) {
            this.AddSessionHostServersToCollectionAsync(organizationId, collectionName, servers, null);
        }
        
        /// <remarks/>
        public void AddSessionHostServersToCollectionAsync(string organizationId, string collectionName, RdsServer[] servers, object userState) {
            if ((this.AddSessionHostServersToCollectionOperationCompleted == null)) {
                this.AddSessionHostServersToCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSessionHostServersToCollectionOperationCompleted);
            }
            this.InvokeAsync("AddSessionHostServersToCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers}, this.AddSessionHostServersToCollectionOperationCompleted, userState);
        }
        
        private void OnAddSessionHostServersToCollectionOperationCompleted(object arg) {
            if ((this.AddSessionHostServersToCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSessionHostServersToCollectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RemoveSessionHostServerFromCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveSessionHostServerFromCollection(string organizationId, string collectionName, RdsServer server) {
            this.Invoke("RemoveSessionHostServerFromCollection", new object[] {
                        organizationId,
                        collectionName,
                        server});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveSessionHostServerFromCollection(string organizationId, string collectionName, RdsServer server, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveSessionHostServerFromCollection", new object[] {
                        organizationId,
                        collectionName,
                        server}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveSessionHostServerFromCollection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveSessionHostServerFromCollectionAsync(string organizationId, string collectionName, RdsServer server) {
            this.RemoveSessionHostServerFromCollectionAsync(organizationId, collectionName, server, null);
        }
        
        /// <remarks/>
        public void RemoveSessionHostServerFromCollectionAsync(string organizationId, string collectionName, RdsServer server, object userState) {
            if ((this.RemoveSessionHostServerFromCollectionOperationCompleted == null)) {
                this.RemoveSessionHostServerFromCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSessionHostServerFromCollectionOperationCompleted);
            }
            this.InvokeAsync("RemoveSessionHostServerFromCollection", new object[] {
                        organizationId,
                        collectionName,
                        server}, this.RemoveSessionHostServerFromCollectionOperationCompleted, userState);
        }
        
        private void OnRemoveSessionHostServerFromCollectionOperationCompleted(object arg) {
            if ((this.RemoveSessionHostServerFromCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSessionHostServerFromCollectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RemoveSessionHostServersFromCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveSessionHostServersFromCollection(string organizationId, string collectionName, RdsServer[] servers) {
            this.Invoke("RemoveSessionHostServersFromCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveSessionHostServersFromCollection(string organizationId, string collectionName, RdsServer[] servers, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveSessionHostServersFromCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveSessionHostServersFromCollection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveSessionHostServersFromCollectionAsync(string organizationId, string collectionName, RdsServer[] servers) {
            this.RemoveSessionHostServersFromCollectionAsync(organizationId, collectionName, servers, null);
        }
        
        /// <remarks/>
        public void RemoveSessionHostServersFromCollectionAsync(string organizationId, string collectionName, RdsServer[] servers, object userState) {
            if ((this.RemoveSessionHostServersFromCollectionOperationCompleted == null)) {
                this.RemoveSessionHostServersFromCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSessionHostServersFromCollectionOperationCompleted);
            }
            this.InvokeAsync("RemoveSessionHostServersFromCollection", new object[] {
                        organizationId,
                        collectionName,
                        servers}, this.RemoveSessionHostServersFromCollectionOperationCompleted, userState);
        }
        
        private void OnRemoveSessionHostServersFromCollectionOperationCompleted(object arg) {
            if ((this.RemoveSessionHostServersFromCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSessionHostServersFromCollectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetRDServerNewConnectionAllowed", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetRDServerNewConnectionAllowed(string newConnectionAllowed, RdsServer server) {
            this.Invoke("SetRDServerNewConnectionAllowed", new object[] {
                        newConnectionAllowed,
                        server});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetRDServerNewConnectionAllowed(string newConnectionAllowed, RdsServer server, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetRDServerNewConnectionAllowed", new object[] {
                        newConnectionAllowed,
                        server}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetRDServerNewConnectionAllowed(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetRDServerNewConnectionAllowedAsync(string newConnectionAllowed, RdsServer server) {
            this.SetRDServerNewConnectionAllowedAsync(newConnectionAllowed, server, null);
        }
        
        /// <remarks/>
        public void SetRDServerNewConnectionAllowedAsync(string newConnectionAllowed, RdsServer server, object userState) {
            if ((this.SetRDServerNewConnectionAllowedOperationCompleted == null)) {
                this.SetRDServerNewConnectionAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRDServerNewConnectionAllowedOperationCompleted);
            }
            this.InvokeAsync("SetRDServerNewConnectionAllowed", new object[] {
                        newConnectionAllowed,
                        server}, this.SetRDServerNewConnectionAllowedOperationCompleted, userState);
        }
        
        private void OnSetRDServerNewConnectionAllowedOperationCompleted(object arg) {
            if ((this.SetRDServerNewConnectionAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRDServerNewConnectionAllowedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetAvailableRemoteApplications", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StartMenuApp[] GetAvailableRemoteApplications(string collectionName) {
            object[] results = this.Invoke("GetAvailableRemoteApplications", new object[] {
                        collectionName});
            return ((StartMenuApp[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableRemoteApplications(string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableRemoteApplications", new object[] {
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public StartMenuApp[] EndGetAvailableRemoteApplications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StartMenuApp[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRemoteApplicationsAsync(string collectionName) {
            this.GetAvailableRemoteApplicationsAsync(collectionName, null);
        }
        
        /// <remarks/>
        public void GetAvailableRemoteApplicationsAsync(string collectionName, object userState) {
            if ((this.GetAvailableRemoteApplicationsOperationCompleted == null)) {
                this.GetAvailableRemoteApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRemoteApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRemoteApplications", new object[] {
                        collectionName}, this.GetAvailableRemoteApplicationsOperationCompleted, userState);
        }
        
        private void OnGetAvailableRemoteApplicationsOperationCompleted(object arg) {
            if ((this.GetAvailableRemoteApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRemoteApplicationsCompleted(this, new GetAvailableRemoteApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetCollectionRemoteApplications", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RemoteApplication[] GetCollectionRemoteApplications(string collectionName) {
            object[] results = this.Invoke("GetCollectionRemoteApplications", new object[] {
                        collectionName});
            return ((RemoteApplication[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCollectionRemoteApplications(string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCollectionRemoteApplications", new object[] {
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RemoteApplication[] EndGetCollectionRemoteApplications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RemoteApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionRemoteApplicationsAsync(string collectionName) {
            this.GetCollectionRemoteApplicationsAsync(collectionName, null);
        }
        
        /// <remarks/>
        public void GetCollectionRemoteApplicationsAsync(string collectionName, object userState) {
            if ((this.GetCollectionRemoteApplicationsOperationCompleted == null)) {
                this.GetCollectionRemoteApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionRemoteApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetCollectionRemoteApplications", new object[] {
                        collectionName}, this.GetCollectionRemoteApplicationsOperationCompleted, userState);
        }
        
        private void OnGetCollectionRemoteApplicationsOperationCompleted(object arg) {
            if ((this.GetCollectionRemoteApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionRemoteApplicationsCompleted(this, new GetCollectionRemoteApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddRemoteApplication", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRemoteApplication(string collectionName, RemoteApplication remoteApp) {
            object[] results = this.Invoke("AddRemoteApplication", new object[] {
                        collectionName,
                        remoteApp});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRemoteApplication(string collectionName, RemoteApplication remoteApp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRemoteApplication", new object[] {
                        collectionName,
                        remoteApp}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddRemoteApplication(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteApplicationAsync(string collectionName, RemoteApplication remoteApp) {
            this.AddRemoteApplicationAsync(collectionName, remoteApp, null);
        }
        
        /// <remarks/>
        public void AddRemoteApplicationAsync(string collectionName, RemoteApplication remoteApp, object userState) {
            if ((this.AddRemoteApplicationOperationCompleted == null)) {
                this.AddRemoteApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteApplicationOperationCompleted);
            }
            this.InvokeAsync("AddRemoteApplication", new object[] {
                        collectionName,
                        remoteApp}, this.AddRemoteApplicationOperationCompleted, userState);
        }
        
        private void OnAddRemoteApplicationOperationCompleted(object arg) {
            if ((this.AddRemoteApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteApplicationCompleted(this, new AddRemoteApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddRemoteApplications", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRemoteApplications(string collectionName, RemoteApplication[] remoteApps) {
            object[] results = this.Invoke("AddRemoteApplications", new object[] {
                        collectionName,
                        remoteApps});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRemoteApplications(string collectionName, RemoteApplication[] remoteApps, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRemoteApplications", new object[] {
                        collectionName,
                        remoteApps}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddRemoteApplications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteApplicationsAsync(string collectionName, RemoteApplication[] remoteApps) {
            this.AddRemoteApplicationsAsync(collectionName, remoteApps, null);
        }
        
        /// <remarks/>
        public void AddRemoteApplicationsAsync(string collectionName, RemoteApplication[] remoteApps, object userState) {
            if ((this.AddRemoteApplicationsOperationCompleted == null)) {
                this.AddRemoteApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteApplicationsOperationCompleted);
            }
            this.InvokeAsync("AddRemoteApplications", new object[] {
                        collectionName,
                        remoteApps}, this.AddRemoteApplicationsOperationCompleted, userState);
        }
        
        private void OnAddRemoteApplicationsOperationCompleted(object arg) {
            if ((this.AddRemoteApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteApplicationsCompleted(this, new AddRemoteApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RemoveRemoteApplication", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveRemoteApplication(string collectionName, RemoteApplication remoteApp) {
            object[] results = this.Invoke("RemoveRemoteApplication", new object[] {
                        collectionName,
                        remoteApp});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRemoteApplication(string collectionName, RemoteApplication remoteApp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRemoteApplication", new object[] {
                        collectionName,
                        remoteApp}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRemoveRemoteApplication(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRemoteApplicationAsync(string collectionName, RemoteApplication remoteApp) {
            this.RemoveRemoteApplicationAsync(collectionName, remoteApp, null);
        }
        
        /// <remarks/>
        public void RemoveRemoteApplicationAsync(string collectionName, RemoteApplication remoteApp, object userState) {
            if ((this.RemoveRemoteApplicationOperationCompleted == null)) {
                this.RemoveRemoteApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRemoteApplicationOperationCompleted);
            }
            this.InvokeAsync("RemoveRemoteApplication", new object[] {
                        collectionName,
                        remoteApp}, this.RemoveRemoteApplicationOperationCompleted, userState);
        }
        
        private void OnRemoveRemoteApplicationOperationCompleted(object arg) {
            if ((this.RemoveRemoteApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRemoteApplicationCompleted(this, new RemoveRemoteApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddSessionHostFeatureToServer", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddSessionHostFeatureToServer(string hostName) {
            object[] results = this.Invoke("AddSessionHostFeatureToServer", new object[] {
                        hostName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSessionHostFeatureToServer(string hostName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSessionHostFeatureToServer", new object[] {
                        hostName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAddSessionHostFeatureToServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddSessionHostFeatureToServerAsync(string hostName) {
            this.AddSessionHostFeatureToServerAsync(hostName, null);
        }
        
        /// <remarks/>
        public void AddSessionHostFeatureToServerAsync(string hostName, object userState) {
            if ((this.AddSessionHostFeatureToServerOperationCompleted == null)) {
                this.AddSessionHostFeatureToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSessionHostFeatureToServerOperationCompleted);
            }
            this.InvokeAsync("AddSessionHostFeatureToServer", new object[] {
                        hostName}, this.AddSessionHostFeatureToServerOperationCompleted, userState);
        }
        
        private void OnAddSessionHostFeatureToServerOperationCompleted(object arg) {
            if ((this.AddSessionHostFeatureToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSessionHostFeatureToServerCompleted(this, new AddSessionHostFeatureToServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckSessionHostFeatureInstallation", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSessionHostFeatureInstallation(string hostName) {
            object[] results = this.Invoke("CheckSessionHostFeatureInstallation", new object[] {
                        hostName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckSessionHostFeatureInstallation(string hostName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckSessionHostFeatureInstallation", new object[] {
                        hostName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckSessionHostFeatureInstallation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSessionHostFeatureInstallationAsync(string hostName) {
            this.CheckSessionHostFeatureInstallationAsync(hostName, null);
        }
        
        /// <remarks/>
        public void CheckSessionHostFeatureInstallationAsync(string hostName, object userState) {
            if ((this.CheckSessionHostFeatureInstallationOperationCompleted == null)) {
                this.CheckSessionHostFeatureInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSessionHostFeatureInstallationOperationCompleted);
            }
            this.InvokeAsync("CheckSessionHostFeatureInstallation", new object[] {
                        hostName}, this.CheckSessionHostFeatureInstallationOperationCompleted, userState);
        }
        
        private void OnCheckSessionHostFeatureInstallationOperationCompleted(object arg) {
            if ((this.CheckSessionHostFeatureInstallationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSessionHostFeatureInstallationCompleted(this, new CheckSessionHostFeatureInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckServerAvailability", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckServerAvailability(string hostName) {
            object[] results = this.Invoke("CheckServerAvailability", new object[] {
                        hostName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckServerAvailability(string hostName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckServerAvailability", new object[] {
                        hostName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckServerAvailability(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckServerAvailabilityAsync(string hostName) {
            this.CheckServerAvailabilityAsync(hostName, null);
        }
        
        /// <remarks/>
        public void CheckServerAvailabilityAsync(string hostName, object userState) {
            if ((this.CheckServerAvailabilityOperationCompleted == null)) {
                this.CheckServerAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckServerAvailabilityOperationCompleted);
            }
            this.InvokeAsync("CheckServerAvailability", new object[] {
                        hostName}, this.CheckServerAvailabilityOperationCompleted, userState);
        }
        
        private void OnCheckServerAvailabilityOperationCompleted(object arg) {
            if ((this.CheckServerAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckServerAvailabilityCompleted(this, new CheckServerAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetApplicationUsers", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetApplicationUsers(string collectionName, string applicationName) {
            object[] results = this.Invoke("GetApplicationUsers", new object[] {
                        collectionName,
                        applicationName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationUsers(string collectionName, string applicationName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetApplicationUsers", new object[] {
                        collectionName,
                        applicationName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetApplicationUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationUsersAsync(string collectionName, string applicationName) {
            this.GetApplicationUsersAsync(collectionName, applicationName, null);
        }
        
        /// <remarks/>
        public void GetApplicationUsersAsync(string collectionName, string applicationName, object userState) {
            if ((this.GetApplicationUsersOperationCompleted == null)) {
                this.GetApplicationUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationUsersOperationCompleted);
            }
            this.InvokeAsync("GetApplicationUsers", new object[] {
                        collectionName,
                        applicationName}, this.GetApplicationUsersOperationCompleted, userState);
        }
        
        private void OnGetApplicationUsersOperationCompleted(object arg) {
            if ((this.GetApplicationUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationUsersCompleted(this, new GetApplicationUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetApplicationUsers", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetApplicationUsers(string collectionName, RemoteApplication remoteApp, string[] users) {
            object[] results = this.Invoke("SetApplicationUsers", new object[] {
                        collectionName,
                        remoteApp,
                        users});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetApplicationUsers(string collectionName, RemoteApplication remoteApp, string[] users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetApplicationUsers", new object[] {
                        collectionName,
                        remoteApp,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetApplicationUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetApplicationUsersAsync(string collectionName, RemoteApplication remoteApp, string[] users) {
            this.SetApplicationUsersAsync(collectionName, remoteApp, users, null);
        }
        
        /// <remarks/>
        public void SetApplicationUsersAsync(string collectionName, RemoteApplication remoteApp, string[] users, object userState) {
            if ((this.SetApplicationUsersOperationCompleted == null)) {
                this.SetApplicationUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationUsersOperationCompleted);
            }
            this.InvokeAsync("SetApplicationUsers", new object[] {
                        collectionName,
                        remoteApp,
                        users}, this.SetApplicationUsersOperationCompleted, userState);
        }
        
        private void OnSetApplicationUsersOperationCompleted(object arg) {
            if ((this.SetApplicationUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationUsersCompleted(this, new SetApplicationUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckRDSServerAvaliable", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRDSServerAvaliable(string hostname) {
            object[] results = this.Invoke("CheckRDSServerAvaliable", new object[] {
                        hostname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckRDSServerAvaliable(string hostname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckRDSServerAvaliable", new object[] {
                        hostname}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckRDSServerAvaliable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRDSServerAvaliableAsync(string hostname) {
            this.CheckRDSServerAvaliableAsync(hostname, null);
        }
        
        /// <remarks/>
        public void CheckRDSServerAvaliableAsync(string hostname, object userState) {
            if ((this.CheckRDSServerAvaliableOperationCompleted == null)) {
                this.CheckRDSServerAvaliableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRDSServerAvaliableOperationCompleted);
            }
            this.InvokeAsync("CheckRDSServerAvaliable", new object[] {
                        hostname}, this.CheckRDSServerAvaliableOperationCompleted, userState);
        }
        
        private void OnCheckRDSServerAvaliableOperationCompleted(object arg) {
            if ((this.CheckRDSServerAvaliableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRDSServerAvaliableCompleted(this, new CheckRDSServerAvaliableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetServersExistingInCollections", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetServersExistingInCollections() {
            object[] results = this.Invoke("GetServersExistingInCollections", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServersExistingInCollections(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServersExistingInCollections", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetServersExistingInCollections(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServersExistingInCollectionsAsync() {
            this.GetServersExistingInCollectionsAsync(null);
        }
        
        /// <remarks/>
        public void GetServersExistingInCollectionsAsync(object userState) {
            if ((this.GetServersExistingInCollectionsOperationCompleted == null)) {
                this.GetServersExistingInCollectionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServersExistingInCollectionsOperationCompleted);
            }
            this.InvokeAsync("GetServersExistingInCollections", new object[0], this.GetServersExistingInCollectionsOperationCompleted, userState);
        }
        
        private void OnGetServersExistingInCollectionsOperationCompleted(object arg) {
            if ((this.GetServersExistingInCollectionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServersExistingInCollectionsCompleted(this, new GetServersExistingInCollectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/LogOffRdsUser", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogOffRdsUser(string unifiedSessionId, string hostServer) {
            this.Invoke("LogOffRdsUser", new object[] {
                        unifiedSessionId,
                        hostServer});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogOffRdsUser(string unifiedSessionId, string hostServer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogOffRdsUser", new object[] {
                        unifiedSessionId,
                        hostServer}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogOffRdsUser(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LogOffRdsUserAsync(string unifiedSessionId, string hostServer) {
            this.LogOffRdsUserAsync(unifiedSessionId, hostServer, null);
        }
        
        /// <remarks/>
        public void LogOffRdsUserAsync(string unifiedSessionId, string hostServer, object userState) {
            if ((this.LogOffRdsUserOperationCompleted == null)) {
                this.LogOffRdsUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogOffRdsUserOperationCompleted);
            }
            this.InvokeAsync("LogOffRdsUser", new object[] {
                        unifiedSessionId,
                        hostServer}, this.LogOffRdsUserOperationCompleted, userState);
        }
        
        private void OnLogOffRdsUserOperationCompleted(object arg) {
            if ((this.LogOffRdsUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogOffRdsUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetRdsCollectionSessionHosts", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRdsCollectionSessionHosts(string collectionName) {
            object[] results = this.Invoke("GetRdsCollectionSessionHosts", new object[] {
                        collectionName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionSessionHosts(string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionSessionHosts", new object[] {
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetRdsCollectionSessionHosts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionSessionHostsAsync(string collectionName) {
            this.GetRdsCollectionSessionHostsAsync(collectionName, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionSessionHostsAsync(string collectionName, object userState) {
            if ((this.GetRdsCollectionSessionHostsOperationCompleted == null)) {
                this.GetRdsCollectionSessionHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionSessionHostsOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionSessionHosts", new object[] {
                        collectionName}, this.GetRdsCollectionSessionHostsOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionSessionHostsOperationCompleted(object arg) {
            if ((this.GetRdsCollectionSessionHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionSessionHostsCompleted(this, new GetRdsCollectionSessionHostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetRdsServerInfo", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServerInfo GetRdsServerInfo(string serverName) {
            object[] results = this.Invoke("GetRdsServerInfo", new object[] {
                        serverName});
            return ((RdsServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServerInfo(string serverName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServerInfo", new object[] {
                        serverName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServerInfo EndGetRdsServerInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServerInfoAsync(string serverName) {
            this.GetRdsServerInfoAsync(serverName, null);
        }
        
        /// <remarks/>
        public void GetRdsServerInfoAsync(string serverName, object userState) {
            if ((this.GetRdsServerInfoOperationCompleted == null)) {
                this.GetRdsServerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServerInfoOperationCompleted);
            }
            this.InvokeAsync("GetRdsServerInfo", new object[] {
                        serverName}, this.GetRdsServerInfoOperationCompleted, userState);
        }
        
        private void OnGetRdsServerInfoOperationCompleted(object arg) {
            if ((this.GetRdsServerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServerInfoCompleted(this, new GetRdsServerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetRdsServerStatus", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRdsServerStatus(string serverName) {
            object[] results = this.Invoke("GetRdsServerStatus", new object[] {
                        serverName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServerStatus(string serverName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServerStatus", new object[] {
                        serverName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRdsServerStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServerStatusAsync(string serverName) {
            this.GetRdsServerStatusAsync(serverName, null);
        }
        
        /// <remarks/>
        public void GetRdsServerStatusAsync(string serverName, object userState) {
            if ((this.GetRdsServerStatusOperationCompleted == null)) {
                this.GetRdsServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServerStatusOperationCompleted);
            }
            this.InvokeAsync("GetRdsServerStatus", new object[] {
                        serverName}, this.GetRdsServerStatusOperationCompleted, userState);
        }
        
        private void OnGetRdsServerStatusOperationCompleted(object arg) {
            if ((this.GetRdsServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServerStatusCompleted(this, new GetRdsServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShutDownRdsServer", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ShutDownRdsServer(string serverName) {
            this.Invoke("ShutDownRdsServer", new object[] {
                        serverName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShutDownRdsServer(string serverName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShutDownRdsServer", new object[] {
                        serverName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndShutDownRdsServer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ShutDownRdsServerAsync(string serverName) {
            this.ShutDownRdsServerAsync(serverName, null);
        }
        
        /// <remarks/>
        public void ShutDownRdsServerAsync(string serverName, object userState) {
            if ((this.ShutDownRdsServerOperationCompleted == null)) {
                this.ShutDownRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShutDownRdsServerOperationCompleted);
            }
            this.InvokeAsync("ShutDownRdsServer", new object[] {
                        serverName}, this.ShutDownRdsServerOperationCompleted, userState);
        }
        
        private void OnShutDownRdsServerOperationCompleted(object arg) {
            if ((this.ShutDownRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShutDownRdsServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RestartRdsServer", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestartRdsServer(string serverName) {
            this.Invoke("RestartRdsServer", new object[] {
                        serverName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRestartRdsServer(string serverName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RestartRdsServer", new object[] {
                        serverName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRestartRdsServer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RestartRdsServerAsync(string serverName) {
            this.RestartRdsServerAsync(serverName, null);
        }
        
        /// <remarks/>
        public void RestartRdsServerAsync(string serverName, object userState) {
            if ((this.RestartRdsServerOperationCompleted == null)) {
                this.RestartRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestartRdsServerOperationCompleted);
            }
            this.InvokeAsync("RestartRdsServer", new object[] {
                        serverName}, this.RestartRdsServerOperationCompleted, userState);
        }
        
        private void OnRestartRdsServerOperationCompleted(object arg) {
            if ((this.RestartRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestartRdsServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SaveRdsCollectionLocalAdmins", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveRdsCollectionLocalAdmins(string[] users, string[] hosts, string organizationId, string collectionName) {
            this.Invoke("SaveRdsCollectionLocalAdmins", new object[] {
                        users,
                        hosts,
                        organizationId,
                        collectionName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveRdsCollectionLocalAdmins(string[] users, string[] hosts, string organizationId, string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveRdsCollectionLocalAdmins", new object[] {
                        users,
                        hosts,
                        organizationId,
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveRdsCollectionLocalAdmins(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveRdsCollectionLocalAdminsAsync(string[] users, string[] hosts, string organizationId, string collectionName) {
            this.SaveRdsCollectionLocalAdminsAsync(users, hosts, organizationId, collectionName, null);
        }
        
        /// <remarks/>
        public void SaveRdsCollectionLocalAdminsAsync(string[] users, string[] hosts, string organizationId, string collectionName, object userState) {
            if ((this.SaveRdsCollectionLocalAdminsOperationCompleted == null)) {
                this.SaveRdsCollectionLocalAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRdsCollectionLocalAdminsOperationCompleted);
            }
            this.InvokeAsync("SaveRdsCollectionLocalAdmins", new object[] {
                        users,
                        hosts,
                        organizationId,
                        collectionName}, this.SaveRdsCollectionLocalAdminsOperationCompleted, userState);
        }
        
        private void OnSaveRdsCollectionLocalAdminsOperationCompleted(object arg) {
            if ((this.SaveRdsCollectionLocalAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRdsCollectionLocalAdminsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetRdsCollectionLocalAdmins", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRdsCollectionLocalAdmins(string organizationId, string collectionName) {
            object[] results = this.Invoke("GetRdsCollectionLocalAdmins", new object[] {
                        organizationId,
                        collectionName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionLocalAdmins(string organizationId, string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionLocalAdmins", new object[] {
                        organizationId,
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetRdsCollectionLocalAdmins(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionLocalAdminsAsync(string organizationId, string collectionName) {
            this.GetRdsCollectionLocalAdminsAsync(organizationId, collectionName, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionLocalAdminsAsync(string organizationId, string collectionName, object userState) {
            if ((this.GetRdsCollectionLocalAdminsOperationCompleted == null)) {
                this.GetRdsCollectionLocalAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionLocalAdminsOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionLocalAdmins", new object[] {
                        organizationId,
                        collectionName}, this.GetRdsCollectionLocalAdminsOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionLocalAdminsOperationCompleted(object arg) {
            if ((this.GetRdsCollectionLocalAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionLocalAdminsCompleted(this, new GetRdsCollectionLocalAdminsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/MoveRdsServerToTenantOU", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveRdsServerToTenantOU(string hostName, string organizationId) {
            this.Invoke("MoveRdsServerToTenantOU", new object[] {
                        hostName,
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveRdsServerToTenantOU(string hostName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveRdsServerToTenantOU", new object[] {
                        hostName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMoveRdsServerToTenantOU(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MoveRdsServerToTenantOUAsync(string hostName, string organizationId) {
            this.MoveRdsServerToTenantOUAsync(hostName, organizationId, null);
        }
        
        /// <remarks/>
        public void MoveRdsServerToTenantOUAsync(string hostName, string organizationId, object userState) {
            if ((this.MoveRdsServerToTenantOUOperationCompleted == null)) {
                this.MoveRdsServerToTenantOUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveRdsServerToTenantOUOperationCompleted);
            }
            this.InvokeAsync("MoveRdsServerToTenantOU", new object[] {
                        hostName,
                        organizationId}, this.MoveRdsServerToTenantOUOperationCompleted, userState);
        }
        
        private void OnMoveRdsServerToTenantOUOperationCompleted(object arg) {
            if ((this.MoveRdsServerToTenantOUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveRdsServerToTenantOUCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RemoveRdsServerFromTenantOU", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRdsServerFromTenantOU(string hostName, string organizationId) {
            this.Invoke("RemoveRdsServerFromTenantOU", new object[] {
                        hostName,
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRdsServerFromTenantOU(string hostName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRdsServerFromTenantOU", new object[] {
                        hostName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveRdsServerFromTenantOU(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveRdsServerFromTenantOUAsync(string hostName, string organizationId) {
            this.RemoveRdsServerFromTenantOUAsync(hostName, organizationId, null);
        }
        
        /// <remarks/>
        public void RemoveRdsServerFromTenantOUAsync(string hostName, string organizationId, object userState) {
            if ((this.RemoveRdsServerFromTenantOUOperationCompleted == null)) {
                this.RemoveRdsServerFromTenantOUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRdsServerFromTenantOUOperationCompleted);
            }
            this.InvokeAsync("RemoveRdsServerFromTenantOU", new object[] {
                        hostName,
                        organizationId}, this.RemoveRdsServerFromTenantOUOperationCompleted, userState);
        }
        
        private void OnRemoveRdsServerFromTenantOUOperationCompleted(object arg) {
            if ((this.RemoveRdsServerFromTenantOUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRdsServerFromTenantOUCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InstallCertificate", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InstallCertificate([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certificate, string password, string[] hostNames) {
            this.Invoke("InstallCertificate", new object[] {
                        certificate,
                        password,
                        hostNames});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallCertificate(byte[] certificate, string password, string[] hostNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallCertificate", new object[] {
                        certificate,
                        password,
                        hostNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInstallCertificate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InstallCertificateAsync(byte[] certificate, string password, string[] hostNames) {
            this.InstallCertificateAsync(certificate, password, hostNames, null);
        }
        
        /// <remarks/>
        public void InstallCertificateAsync(byte[] certificate, string password, string[] hostNames, object userState) {
            if ((this.InstallCertificateOperationCompleted == null)) {
                this.InstallCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallCertificateOperationCompleted);
            }
            this.InvokeAsync("InstallCertificate", new object[] {
                        certificate,
                        password,
                        hostNames}, this.InstallCertificateOperationCompleted, userState);
        }
        
        private void OnInstallCertificateOperationCompleted(object arg) {
            if ((this.InstallCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallCertificateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/MoveSessionHostToRdsOU", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveSessionHostToRdsOU(string hostName) {
            this.Invoke("MoveSessionHostToRdsOU", new object[] {
                        hostName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveSessionHostToRdsOU(string hostName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveSessionHostToRdsOU", new object[] {
                        hostName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMoveSessionHostToRdsOU(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MoveSessionHostToRdsOUAsync(string hostName) {
            this.MoveSessionHostToRdsOUAsync(hostName, null);
        }
        
        /// <remarks/>
        public void MoveSessionHostToRdsOUAsync(string hostName, object userState) {
            if ((this.MoveSessionHostToRdsOUOperationCompleted == null)) {
                this.MoveSessionHostToRdsOUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveSessionHostToRdsOUOperationCompleted);
            }
            this.InvokeAsync("MoveSessionHostToRdsOU", new object[] {
                        hostName}, this.MoveSessionHostToRdsOUOperationCompleted, userState);
        }
        
        private void OnMoveSessionHostToRdsOUOperationCompleted(object arg) {
            if ((this.MoveSessionHostToRdsOUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveSessionHostToRdsOUCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ApplyGPO", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApplyGPO(string organizationId, string collectionName, RdsServerSettings serverSettings) {
            this.Invoke("ApplyGPO", new object[] {
                        organizationId,
                        collectionName,
                        serverSettings});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginApplyGPO(string organizationId, string collectionName, RdsServerSettings serverSettings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ApplyGPO", new object[] {
                        organizationId,
                        collectionName,
                        serverSettings}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndApplyGPO(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ApplyGPOAsync(string organizationId, string collectionName, RdsServerSettings serverSettings) {
            this.ApplyGPOAsync(organizationId, collectionName, serverSettings, null);
        }
        
        /// <remarks/>
        public void ApplyGPOAsync(string organizationId, string collectionName, RdsServerSettings serverSettings, object userState) {
            if ((this.ApplyGPOOperationCompleted == null)) {
                this.ApplyGPOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyGPOOperationCompleted);
            }
            this.InvokeAsync("ApplyGPO", new object[] {
                        organizationId,
                        collectionName,
                        serverSettings}, this.ApplyGPOOperationCompleted, userState);
        }
        
        private void OnApplyGPOOperationCompleted(object arg) {
            if ((this.ApplyGPOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyGPOCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShadowSession", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ShadowSession(string sessionId, string fqdName, bool control) {
            this.Invoke("ShadowSession", new object[] {
                        sessionId,
                        fqdName,
                        control});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShadowSession(string sessionId, string fqdName, bool control, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShadowSession", new object[] {
                        sessionId,
                        fqdName,
                        control}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndShadowSession(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ShadowSessionAsync(string sessionId, string fqdName, bool control) {
            this.ShadowSessionAsync(sessionId, fqdName, control, null);
        }
        
        /// <remarks/>
        public void ShadowSessionAsync(string sessionId, string fqdName, bool control, object userState) {
            if ((this.ShadowSessionOperationCompleted == null)) {
                this.ShadowSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShadowSessionOperationCompleted);
            }
            this.InvokeAsync("ShadowSession", new object[] {
                        sessionId,
                        fqdName,
                        control}, this.ShadowSessionOperationCompleted, userState);
        }
        
        private void OnShadowSessionOperationCompleted(object arg) {
            if ((this.ShadowSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShadowSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/MoveSessionHostsToCollectionOU", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveSessionHostsToCollectionOU(RdsServer[] servers, string collectionName, string organizationId) {
            this.Invoke("MoveSessionHostsToCollectionOU", new object[] {
                        servers,
                        collectionName,
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveSessionHostsToCollectionOU(RdsServer[] servers, string collectionName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveSessionHostsToCollectionOU", new object[] {
                        servers,
                        collectionName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMoveSessionHostsToCollectionOU(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MoveSessionHostsToCollectionOUAsync(RdsServer[] servers, string collectionName, string organizationId) {
            this.MoveSessionHostsToCollectionOUAsync(servers, collectionName, organizationId, null);
        }
        
        /// <remarks/>
        public void MoveSessionHostsToCollectionOUAsync(RdsServer[] servers, string collectionName, string organizationId, object userState) {
            if ((this.MoveSessionHostsToCollectionOUOperationCompleted == null)) {
                this.MoveSessionHostsToCollectionOUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveSessionHostsToCollectionOUOperationCompleted);
            }
            this.InvokeAsync("MoveSessionHostsToCollectionOU", new object[] {
                        servers,
                        collectionName,
                        organizationId}, this.MoveSessionHostsToCollectionOUOperationCompleted, userState);
        }
        
        private void OnMoveSessionHostsToCollectionOUOperationCompleted(object arg) {
            if ((this.MoveSessionHostsToCollectionOUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveSessionHostsToCollectionOUCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetExistingCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImportedRdsCollection GetExistingCollection(string collectionName) {
            object[] results = this.Invoke("GetExistingCollection", new object[] {
                        collectionName});
            return ((ImportedRdsCollection)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExistingCollection(string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExistingCollection", new object[] {
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ImportedRdsCollection EndGetExistingCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ImportedRdsCollection)(results[0]));
        }
        
        /// <remarks/>
        public void GetExistingCollectionAsync(string collectionName) {
            this.GetExistingCollectionAsync(collectionName, null);
        }
        
        /// <remarks/>
        public void GetExistingCollectionAsync(string collectionName, object userState) {
            if ((this.GetExistingCollectionOperationCompleted == null)) {
                this.GetExistingCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExistingCollectionOperationCompleted);
            }
            this.InvokeAsync("GetExistingCollection", new object[] {
                        collectionName}, this.GetExistingCollectionOperationCompleted, userState);
        }
        
        private void OnGetExistingCollectionOperationCompleted(object arg) {
            if ((this.GetExistingCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExistingCollectionCompleted(this, new GetExistingCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ImportCollection", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ImportCollection(string organizationId, RdsCollection collection, string[] users) {
            this.Invoke("ImportCollection", new object[] {
                        organizationId,
                        collection,
                        users});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginImportCollection(string organizationId, RdsCollection collection, string[] users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ImportCollection", new object[] {
                        organizationId,
                        collection,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndImportCollection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ImportCollectionAsync(string organizationId, RdsCollection collection, string[] users) {
            this.ImportCollectionAsync(organizationId, collection, users, null);
        }
        
        /// <remarks/>
        public void ImportCollectionAsync(string organizationId, RdsCollection collection, string[] users, object userState) {
            if ((this.ImportCollectionOperationCompleted == null)) {
                this.ImportCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCollectionOperationCompleted);
            }
            this.InvokeAsync("ImportCollection", new object[] {
                        organizationId,
                        collection,
                        users}, this.ImportCollectionOperationCompleted, userState);
        }
        
        private void OnImportCollectionOperationCompleted(object arg) {
            if ((this.ImportCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCollectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SendMessage", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMessage(RdsMessageRecipient[] recipients, string text) {
            this.Invoke("SendMessage", new object[] {
                        recipients,
                        text});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMessage(RdsMessageRecipient[] recipients, string text, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMessage", new object[] {
                        recipients,
                        text}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendMessage(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendMessageAsync(RdsMessageRecipient[] recipients, string text) {
            this.SendMessageAsync(recipients, text, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(RdsMessageRecipient[] recipients, string text, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        recipients,
                        text}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateCollectionCompletedEventHandler(object sender, CreateCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void EditRdsCollectionSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsUserSessionsCompletedEventHandler(object sender, GetRdsUserSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsUserSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsUserSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsUserSession[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsUserSession[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRdsServersToDeploymentCompletedEventHandler(object sender, AddRdsServersToDeploymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRdsServersToDeploymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRdsServersToDeploymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCollectionCompletedEventHandler(object sender, GetCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveCollectionCompletedEventHandler(object sender, RemoveCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUsersInCollectionCompletedEventHandler(object sender, SetUsersInCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUsersInCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUsersInCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddSessionHostServerToCollectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddSessionHostServersToCollectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveSessionHostServerFromCollectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveSessionHostServersFromCollectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetRDServerNewConnectionAllowedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAvailableRemoteApplicationsCompletedEventHandler(object sender, GetAvailableRemoteApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRemoteApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRemoteApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StartMenuApp[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StartMenuApp[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCollectionRemoteApplicationsCompletedEventHandler(object sender, GetCollectionRemoteApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionRemoteApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionRemoteApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RemoteApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RemoteApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRemoteApplicationCompletedEventHandler(object sender, AddRemoteApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRemoteApplicationsCompletedEventHandler(object sender, AddRemoteApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRemoteApplicationCompletedEventHandler(object sender, RemoveRemoteApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRemoteApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRemoteApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddSessionHostFeatureToServerCompletedEventHandler(object sender, AddSessionHostFeatureToServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSessionHostFeatureToServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSessionHostFeatureToServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckSessionHostFeatureInstallationCompletedEventHandler(object sender, CheckSessionHostFeatureInstallationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSessionHostFeatureInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSessionHostFeatureInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckServerAvailabilityCompletedEventHandler(object sender, CheckServerAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckServerAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckServerAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetApplicationUsersCompletedEventHandler(object sender, GetApplicationUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetApplicationUsersCompletedEventHandler(object sender, SetApplicationUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetApplicationUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetApplicationUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckRDSServerAvaliableCompletedEventHandler(object sender, CheckRDSServerAvaliableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRDSServerAvaliableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRDSServerAvaliableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetServersExistingInCollectionsCompletedEventHandler(object sender, GetServersExistingInCollectionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServersExistingInCollectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServersExistingInCollectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void LogOffRdsUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionSessionHostsCompletedEventHandler(object sender, GetRdsCollectionSessionHostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionSessionHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionSessionHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServerInfoCompletedEventHandler(object sender, GetRdsServerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServerStatusCompletedEventHandler(object sender, GetRdsServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShutDownRdsServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RestartRdsServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveRdsCollectionLocalAdminsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionLocalAdminsCompletedEventHandler(object sender, GetRdsCollectionLocalAdminsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionLocalAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionLocalAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void MoveRdsServerToTenantOUCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRdsServerFromTenantOUCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InstallCertificateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void MoveSessionHostToRdsOUCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ApplyGPOCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShadowSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void MoveSessionHostsToCollectionOUCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetExistingCollectionCompletedEventHandler(object sender, GetExistingCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExistingCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExistingCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImportedRdsCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImportedRdsCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ImportCollectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SendMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
