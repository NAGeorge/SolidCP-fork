// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.Providers.Statistics
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "StatisticsServerSoap", Namespace = "http://smbsaas/solidcp/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class StatisticsServer : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;

        private System.Threading.SendOrPostCallback GetServersOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetSitesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteOperationCompleted;

        private System.Threading.SendOrPostCallback AddSiteOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSiteOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSiteOperationCompleted;

        /// <remarks/>
        public StatisticsServer()
        {
            this.Url = "http://localhost/SolidCPServer11/StatisticsServer.asmx";
        }

        /// <remarks/>
        public event GetServersCompletedEventHandler GetServersCompleted;

        /// <remarks/>
        public event GetSiteIdCompletedEventHandler GetSiteIdCompleted;

        /// <remarks/>
        public event GetSitesCompletedEventHandler GetSitesCompleted;

        /// <remarks/>
        public event GetSiteCompletedEventHandler GetSiteCompleted;

        /// <remarks/>
        public event AddSiteCompletedEventHandler AddSiteCompleted;

        /// <remarks/>
        public event UpdateSiteCompletedEventHandler UpdateSiteCompleted;

        /// <remarks/>
        public event DeleteSiteCompletedEventHandler DeleteSiteCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetServers", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StatsServer[] GetServers()
        {
            object[] results = this.Invoke("GetServers", new object[0]);
            return ((StatsServer[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetServers(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetServers", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public StatsServer[] EndGetServers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StatsServer[])(results[0]));
        }

        /// <remarks/>
        public void GetServersAsync()
        {
            this.GetServersAsync(null);
        }

        /// <remarks/>
        public void GetServersAsync(object userState)
        {
            if ((this.GetServersOperationCompleted == null))
            {
                this.GetServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServersOperationCompleted);
            }
            this.InvokeAsync("GetServers", new object[0], this.GetServersOperationCompleted, userState);
        }

        private void OnGetServersOperationCompleted(object arg)
        {
            if ((this.GetServersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServersCompleted(this, new GetServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSiteId", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteId(string siteName)
        {
            object[] results = this.Invoke("GetSiteId", new object[] {
                        siteName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteId(string siteName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteId", new object[] {
                        siteName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetSiteId(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetSiteIdAsync(string siteName)
        {
            this.GetSiteIdAsync(siteName, null);
        }

        /// <remarks/>
        public void GetSiteIdAsync(string siteName, object userState)
        {
            if ((this.GetSiteIdOperationCompleted == null))
            {
                this.GetSiteIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteIdOperationCompleted);
            }
            this.InvokeAsync("GetSiteId", new object[] {
                        siteName}, this.GetSiteIdOperationCompleted, userState);
        }

        private void OnGetSiteIdOperationCompleted(object arg)
        {
            if ((this.GetSiteIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteIdCompleted(this, new GetSiteIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSites", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSites()
        {
            object[] results = this.Invoke("GetSites", new object[0]);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSites(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSites", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetSites(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void GetSitesAsync()
        {
            this.GetSitesAsync(null);
        }

        /// <remarks/>
        public void GetSitesAsync(object userState)
        {
            if ((this.GetSitesOperationCompleted == null))
            {
                this.GetSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSitesOperationCompleted);
            }
            this.InvokeAsync("GetSites", new object[0], this.GetSitesOperationCompleted, userState);
        }

        private void OnGetSitesOperationCompleted(object arg)
        {
            if ((this.GetSitesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSitesCompleted(this, new GetSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StatsSite GetSite(string siteId)
        {
            object[] results = this.Invoke("GetSite", new object[] {
                        siteId});
            return ((StatsSite)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSite(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSite", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public StatsSite EndGetSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StatsSite)(results[0]));
        }

        /// <remarks/>
        public void GetSiteAsync(string siteId)
        {
            this.GetSiteAsync(siteId, null);
        }

        /// <remarks/>
        public void GetSiteAsync(string siteId, object userState)
        {
            if ((this.GetSiteOperationCompleted == null))
            {
                this.GetSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteOperationCompleted);
            }
            this.InvokeAsync("GetSite", new object[] {
                        siteId}, this.GetSiteOperationCompleted, userState);
        }

        private void OnGetSiteOperationCompleted(object arg)
        {
            if ((this.GetSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCompleted(this, new GetSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AddSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSite(StatsSite site)
        {
            object[] results = this.Invoke("AddSite", new object[] {
                        site});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddSite(StatsSite site, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddSite", new object[] {
                        site}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddSiteAsync(StatsSite site)
        {
            this.AddSiteAsync(site, null);
        }

        /// <remarks/>
        public void AddSiteAsync(StatsSite site, object userState)
        {
            if ((this.AddSiteOperationCompleted == null))
            {
                this.AddSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSiteOperationCompleted);
            }
            this.InvokeAsync("AddSite", new object[] {
                        site}, this.AddSiteOperationCompleted, userState);
        }

        private void OnAddSiteOperationCompleted(object arg)
        {
            if ((this.AddSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSiteCompleted(this, new AddSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSite(StatsSite site)
        {
            this.Invoke("UpdateSite", new object[] {
                        site});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSite(StatsSite site, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSite", new object[] {
                        site}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateSite(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateSiteAsync(StatsSite site)
        {
            this.UpdateSiteAsync(site, null);
        }

        /// <remarks/>
        public void UpdateSiteAsync(StatsSite site, object userState)
        {
            if ((this.UpdateSiteOperationCompleted == null))
            {
                this.UpdateSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSiteOperationCompleted);
            }
            this.InvokeAsync("UpdateSite", new object[] {
                        site}, this.UpdateSiteOperationCompleted, userState);
        }

        private void OnUpdateSiteOperationCompleted(object arg)
        {
            if ((this.UpdateSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSite(string siteId)
        {
            this.Invoke("DeleteSite", new object[] {
                        siteId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSite(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSite", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteSite(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteSiteAsync(string siteId)
        {
            this.DeleteSiteAsync(siteId, null);
        }

        /// <remarks/>
        public void DeleteSiteAsync(string siteId, object userState)
        {
            if ((this.DeleteSiteOperationCompleted == null))
            {
                this.DeleteSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSiteOperationCompleted);
            }
            this.InvokeAsync("DeleteSite", new object[] {
                        siteId}, this.DeleteSiteOperationCompleted, userState);
        }

        private void OnDeleteSiteOperationCompleted(object arg)
        {
            if ((this.DeleteSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServersCompletedEventHandler(object sender, GetServersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StatsServer[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StatsServer[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteIdCompletedEventHandler(object sender, GetSiteIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSitesCompletedEventHandler(object sender, GetSitesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteCompletedEventHandler(object sender, GetSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StatsSite Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StatsSite)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddSiteCompletedEventHandler(object sender, AddSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
