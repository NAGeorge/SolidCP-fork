//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.7905
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

using SolidCP.Providers.Common;
using SolidCP.Providers.OS;
using SolidCP.Providers.ResultObjects;

namespace SolidCP.Providers.HostedSolution {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OrganizationsSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class Organizations : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;
        
        private System.Threading.SendOrPostCallback OrganizationExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserGeneralSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSecurityGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityGroupGeneralSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSecurityGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSecurityGroupGeneralSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddObjectToSecurityGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteObjectFromSecurityGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserGeneralSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserPrincipalNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrganizationDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrganizationDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPasswordPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSamAccountNameByUserPrincipalNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoesSamAccountNameExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDriveMapsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMappedDriveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMappedDriveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMappedDriveByPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMappedDrivesGPOOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDriveMapsTargetingFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeDriveMapFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationUsersWithExpiredPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyPasswordSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPhoneNumberIsInUseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationUserWithExtraDataOperationCompleted;
        
        /// <remarks/>
        public Organizations() {
            this.Url = "http://localhost:9003/Organizations.asmx";
        }
        
        /// <remarks/>
        public event OrganizationExistsCompletedEventHandler OrganizationExistsCompleted;
        
        /// <remarks/>
        public event CreateOrganizationCompletedEventHandler CreateOrganizationCompleted;
        
        /// <remarks/>
        public event DeleteOrganizationCompletedEventHandler DeleteOrganizationCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event DisableUserCompletedEventHandler DisableUserCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event GetUserGeneralSettingsCompletedEventHandler GetUserGeneralSettingsCompleted;
        
        /// <remarks/>
        public event CreateSecurityGroupCompletedEventHandler CreateSecurityGroupCompleted;
        
        /// <remarks/>
        public event GetSecurityGroupGeneralSettingsCompletedEventHandler GetSecurityGroupGeneralSettingsCompleted;
        
        /// <remarks/>
        public event DeleteSecurityGroupCompletedEventHandler DeleteSecurityGroupCompleted;
        
        /// <remarks/>
        public event SetSecurityGroupGeneralSettingsCompletedEventHandler SetSecurityGroupGeneralSettingsCompleted;
        
        /// <remarks/>
        public event AddObjectToSecurityGroupCompletedEventHandler AddObjectToSecurityGroupCompleted;
        
        /// <remarks/>
        public event DeleteObjectFromSecurityGroupCompletedEventHandler DeleteObjectFromSecurityGroupCompleted;
        
        /// <remarks/>
        public event SetUserGeneralSettingsCompletedEventHandler SetUserGeneralSettingsCompleted;
        
        /// <remarks/>
        public event SetUserPasswordCompletedEventHandler SetUserPasswordCompleted;
        
        /// <remarks/>
        public event SetUserPrincipalNameCompletedEventHandler SetUserPrincipalNameCompleted;
        
        /// <remarks/>
        public event DeleteOrganizationDomainCompletedEventHandler DeleteOrganizationDomainCompleted;
        
        /// <remarks/>
        public event CreateOrganizationDomainCompletedEventHandler CreateOrganizationDomainCompleted;
        
        /// <remarks/>
        public event GetPasswordPolicyCompletedEventHandler GetPasswordPolicyCompleted;
        
        /// <remarks/>
        public event GetSamAccountNameByUserPrincipalNameCompletedEventHandler GetSamAccountNameByUserPrincipalNameCompleted;
        
        /// <remarks/>
        public event DoesSamAccountNameExistCompletedEventHandler DoesSamAccountNameExistCompleted;
        
        /// <remarks/>
        public event GetDriveMapsCompletedEventHandler GetDriveMapsCompleted;
        
        /// <remarks/>
        public event CreateMappedDriveCompletedEventHandler CreateMappedDriveCompleted;
        
        /// <remarks/>
        public event DeleteMappedDriveCompletedEventHandler DeleteMappedDriveCompleted;
        
        /// <remarks/>
        public event DeleteMappedDriveByPathCompletedEventHandler DeleteMappedDriveByPathCompleted;
        
        /// <remarks/>
        public event DeleteMappedDrivesGPOCompletedEventHandler DeleteMappedDrivesGPOCompleted;
        
        /// <remarks/>
        public event SetDriveMapsTargetingFilterCompletedEventHandler SetDriveMapsTargetingFilterCompleted;
        
        /// <remarks/>
        public event ChangeDriveMapFolderPathCompletedEventHandler ChangeDriveMapFolderPathCompleted;
        
        /// <remarks/>
        public event GetOrganizationUsersWithExpiredPasswordCompletedEventHandler GetOrganizationUsersWithExpiredPasswordCompleted;
        
        /// <remarks/>
        public event ApplyPasswordSettingsCompletedEventHandler ApplyPasswordSettingsCompleted;
        
        /// <remarks/>
        public event CheckPhoneNumberIsInUseCompletedEventHandler CheckPhoneNumberIsInUseCompleted;
        
        /// <remarks/>
        public event GetOrganizationUserWithExtraDataCompletedEventHandler GetOrganizationUserWithExtraDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OrganizationExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool OrganizationExists(string organizationId) {
            object[] results = this.Invoke("OrganizationExists", new object[] {
                        organizationId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOrganizationExists(string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OrganizationExists", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndOrganizationExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OrganizationExistsAsync(string organizationId) {
            this.OrganizationExistsAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void OrganizationExistsAsync(string organizationId, object userState) {
            if ((this.OrganizationExistsOperationCompleted == null)) {
                this.OrganizationExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrganizationExistsOperationCompleted);
            }
            this.InvokeAsync("OrganizationExists", new object[] {
                        organizationId}, this.OrganizationExistsOperationCompleted, userState);
        }
        
        private void OnOrganizationExistsOperationCompleted(object arg) {
            if ((this.OrganizationExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrganizationExistsCompleted(this, new OrganizationExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOrganization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Organization CreateOrganization(string organizationId) {
            object[] results = this.Invoke("CreateOrganization", new object[] {
                        organizationId});
            return ((Organization)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateOrganization(string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateOrganization", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Organization EndCreateOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Organization)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrganizationAsync(string organizationId) {
            this.CreateOrganizationAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void CreateOrganizationAsync(string organizationId, object userState) {
            if ((this.CreateOrganizationOperationCompleted == null)) {
                this.CreateOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrganizationOperationCompleted);
            }
            this.InvokeAsync("CreateOrganization", new object[] {
                        organizationId}, this.CreateOrganizationOperationCompleted, userState);
        }
        
        private void OnCreateOrganizationOperationCompleted(object arg) {
            if ((this.CreateOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrganizationCompleted(this, new CreateOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOrganization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteOrganization(string organizationId) {
            this.Invoke("DeleteOrganization", new object[] {
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteOrganization(string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteOrganization", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteOrganization(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteOrganizationAsync(string organizationId) {
            this.DeleteOrganizationAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void DeleteOrganizationAsync(string organizationId, object userState) {
            if ((this.DeleteOrganizationOperationCompleted == null)) {
                this.DeleteOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrganizationOperationCompleted);
            }
            this.InvokeAsync("DeleteOrganization", new object[] {
                        organizationId}, this.DeleteOrganizationOperationCompleted, userState);
        }
        
        private void OnDeleteOrganizationOperationCompleted(object arg) {
            if ((this.DeleteOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrganizationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateUser(string organizationId, string loginName, string displayName, string upn, string password, bool enabled) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        organizationId,
                        loginName,
                        displayName,
                        upn,
                        password,
                        enabled});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateUser(string organizationId, string loginName, string displayName, string upn, string password, bool enabled, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateUser", new object[] {
                        organizationId,
                        loginName,
                        displayName,
                        upn,
                        password,
                        enabled}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(string organizationId, string loginName, string displayName, string upn, string password, bool enabled) {
            this.CreateUserAsync(organizationId, loginName, displayName, upn, password, enabled, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(string organizationId, string loginName, string displayName, string upn, string password, bool enabled, object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        organizationId,
                        loginName,
                        displayName,
                        upn,
                        password,
                        enabled}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisableUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableUser(string loginName, string organizationId) {
            this.Invoke("DisableUser", new object[] {
                        loginName,
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisableUser(string loginName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisableUser", new object[] {
                        loginName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisableUser(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DisableUserAsync(string loginName, string organizationId) {
            this.DisableUserAsync(loginName, organizationId, null);
        }
        
        /// <remarks/>
        public void DisableUserAsync(string loginName, string organizationId, object userState) {
            if ((this.DisableUserOperationCompleted == null)) {
                this.DisableUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableUserOperationCompleted);
            }
            this.InvokeAsync("DisableUser", new object[] {
                        loginName,
                        organizationId}, this.DisableUserOperationCompleted, userState);
        }
        
        private void OnDisableUserOperationCompleted(object arg) {
            if ((this.DisableUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(string loginName, string organizationId) {
            this.Invoke("DeleteUser", new object[] {
                        loginName,
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUser(string loginName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUser", new object[] {
                        loginName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteUser(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string loginName, string organizationId) {
            this.DeleteUserAsync(loginName, organizationId, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string loginName, string organizationId, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        loginName,
                        organizationId}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGeneralSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser GetUserGeneralSettings(string loginName, string organizationId) {
            object[] results = this.Invoke("GetUserGeneralSettings", new object[] {
                        loginName,
                        organizationId});
            return ((OrganizationUser)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserGeneralSettings(string loginName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserGeneralSettings", new object[] {
                        loginName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUser EndGetUserGeneralSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserGeneralSettingsAsync(string loginName, string organizationId) {
            this.GetUserGeneralSettingsAsync(loginName, organizationId, null);
        }
        
        /// <remarks/>
        public void GetUserGeneralSettingsAsync(string loginName, string organizationId, object userState) {
            if ((this.GetUserGeneralSettingsOperationCompleted == null)) {
                this.GetUserGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("GetUserGeneralSettings", new object[] {
                        loginName,
                        organizationId}, this.GetUserGeneralSettingsOperationCompleted, userState);
        }
        
        private void OnGetUserGeneralSettingsOperationCompleted(object arg) {
            if ((this.GetUserGeneralSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserGeneralSettingsCompleted(this, new GetUserGeneralSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSecurityGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateSecurityGroup(string organizationId, string groupName) {
            object[] results = this.Invoke("CreateSecurityGroup", new object[] {
                        organizationId,
                        groupName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateSecurityGroup(string organizationId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateSecurityGroup", new object[] {
                        organizationId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateSecurityGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSecurityGroupAsync(string organizationId, string groupName) {
            this.CreateSecurityGroupAsync(organizationId, groupName, null);
        }
        
        /// <remarks/>
        public void CreateSecurityGroupAsync(string organizationId, string groupName, object userState) {
            if ((this.CreateSecurityGroupOperationCompleted == null)) {
                this.CreateSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("CreateSecurityGroup", new object[] {
                        organizationId,
                        groupName}, this.CreateSecurityGroupOperationCompleted, userState);
        }
        
        private void OnCreateSecurityGroupOperationCompleted(object arg) {
            if ((this.CreateSecurityGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSecurityGroupCompleted(this, new CreateSecurityGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSecurityGroupGeneralSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationSecurityGroup GetSecurityGroupGeneralSettings(string groupName, string organizationId) {
            object[] results = this.Invoke("GetSecurityGroupGeneralSettings", new object[] {
                        groupName,
                        organizationId});
            return ((OrganizationSecurityGroup)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityGroupGeneralSettings(string groupName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityGroupGeneralSettings", new object[] {
                        groupName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationSecurityGroup EndGetSecurityGroupGeneralSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationSecurityGroup)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecurityGroupGeneralSettingsAsync(string groupName, string organizationId) {
            this.GetSecurityGroupGeneralSettingsAsync(groupName, organizationId, null);
        }
        
        /// <remarks/>
        public void GetSecurityGroupGeneralSettingsAsync(string groupName, string organizationId, object userState) {
            if ((this.GetSecurityGroupGeneralSettingsOperationCompleted == null)) {
                this.GetSecurityGroupGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityGroupGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("GetSecurityGroupGeneralSettings", new object[] {
                        groupName,
                        organizationId}, this.GetSecurityGroupGeneralSettingsOperationCompleted, userState);
        }
        
        private void OnGetSecurityGroupGeneralSettingsOperationCompleted(object arg) {
            if ((this.GetSecurityGroupGeneralSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityGroupGeneralSettingsCompleted(this, new GetSecurityGroupGeneralSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSecurityGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSecurityGroup(string groupName, string organizationId) {
            this.Invoke("DeleteSecurityGroup", new object[] {
                        groupName,
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecurityGroup(string groupName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSecurityGroup", new object[] {
                        groupName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteSecurityGroup(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteSecurityGroupAsync(string groupName, string organizationId) {
            this.DeleteSecurityGroupAsync(groupName, organizationId, null);
        }
        
        /// <remarks/>
        public void DeleteSecurityGroupAsync(string groupName, string organizationId, object userState) {
            if ((this.DeleteSecurityGroupOperationCompleted == null)) {
                this.DeleteSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteSecurityGroup", new object[] {
                        groupName,
                        organizationId}, this.DeleteSecurityGroupOperationCompleted, userState);
        }
        
        private void OnDeleteSecurityGroupOperationCompleted(object arg) {
            if ((this.DeleteSecurityGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecurityGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSecurityGroupGeneralSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetSecurityGroupGeneralSettings(string organizationId, string groupName, string[] memberAccounts, string notes) {
            this.Invoke("SetSecurityGroupGeneralSettings", new object[] {
                        organizationId,
                        groupName,
                        memberAccounts,
                        notes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetSecurityGroupGeneralSettings(string organizationId, string groupName, string[] memberAccounts, string notes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetSecurityGroupGeneralSettings", new object[] {
                        organizationId,
                        groupName,
                        memberAccounts,
                        notes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetSecurityGroupGeneralSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetSecurityGroupGeneralSettingsAsync(string organizationId, string groupName, string[] memberAccounts, string notes) {
            this.SetSecurityGroupGeneralSettingsAsync(organizationId, groupName, memberAccounts, notes, null);
        }
        
        /// <remarks/>
        public void SetSecurityGroupGeneralSettingsAsync(string organizationId, string groupName, string[] memberAccounts, string notes, object userState) {
            if ((this.SetSecurityGroupGeneralSettingsOperationCompleted == null)) {
                this.SetSecurityGroupGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSecurityGroupGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("SetSecurityGroupGeneralSettings", new object[] {
                        organizationId,
                        groupName,
                        memberAccounts,
                        notes}, this.SetSecurityGroupGeneralSettingsOperationCompleted, userState);
        }
        
        private void OnSetSecurityGroupGeneralSettingsOperationCompleted(object arg) {
            if ((this.SetSecurityGroupGeneralSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSecurityGroupGeneralSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddObjectToSecurityGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddObjectToSecurityGroup(string organizationId, string accountName, string groupName) {
            this.Invoke("AddObjectToSecurityGroup", new object[] {
                        organizationId,
                        accountName,
                        groupName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddObjectToSecurityGroup(string organizationId, string accountName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddObjectToSecurityGroup", new object[] {
                        organizationId,
                        accountName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddObjectToSecurityGroup(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddObjectToSecurityGroupAsync(string organizationId, string accountName, string groupName) {
            this.AddObjectToSecurityGroupAsync(organizationId, accountName, groupName, null);
        }
        
        /// <remarks/>
        public void AddObjectToSecurityGroupAsync(string organizationId, string accountName, string groupName, object userState) {
            if ((this.AddObjectToSecurityGroupOperationCompleted == null)) {
                this.AddObjectToSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddObjectToSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("AddObjectToSecurityGroup", new object[] {
                        organizationId,
                        accountName,
                        groupName}, this.AddObjectToSecurityGroupOperationCompleted, userState);
        }
        
        private void OnAddObjectToSecurityGroupOperationCompleted(object arg) {
            if ((this.AddObjectToSecurityGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddObjectToSecurityGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteObjectFromSecurityGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteObjectFromSecurityGroup(string organizationId, string accountName, string groupName) {
            this.Invoke("DeleteObjectFromSecurityGroup", new object[] {
                        organizationId,
                        accountName,
                        groupName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteObjectFromSecurityGroup(string organizationId, string accountName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteObjectFromSecurityGroup", new object[] {
                        organizationId,
                        accountName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteObjectFromSecurityGroup(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteObjectFromSecurityGroupAsync(string organizationId, string accountName, string groupName) {
            this.DeleteObjectFromSecurityGroupAsync(organizationId, accountName, groupName, null);
        }
        
        /// <remarks/>
        public void DeleteObjectFromSecurityGroupAsync(string organizationId, string accountName, string groupName, object userState) {
            if ((this.DeleteObjectFromSecurityGroupOperationCompleted == null)) {
                this.DeleteObjectFromSecurityGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteObjectFromSecurityGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteObjectFromSecurityGroup", new object[] {
                        organizationId,
                        accountName,
                        groupName}, this.DeleteObjectFromSecurityGroupOperationCompleted, userState);
        }
        
        private void OnDeleteObjectFromSecurityGroupOperationCompleted(object arg) {
            if ((this.DeleteObjectFromSecurityGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteObjectFromSecurityGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserGeneralSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserGeneralSettings(
                    string organizationId, 
                    string accountName, 
                    string displayName, 
                    string password, 
                    bool hideFromAddressBook, 
                    bool disabled, 
                    bool locked, 
                    string firstName, 
                    string initials, 
                    string lastName, 
                    string address, 
                    string city, 
                    string state, 
                    string zip, 
                    string country, 
                    string jobTitle, 
                    string company, 
                    string department, 
                    string office, 
                    string managerAccountName, 
                    string businessPhone, 
                    string fax, 
                    string homePhone, 
                    string mobilePhone, 
                    string pager, 
                    string webPage, 
                    string notes, 
                    string externalEmail, 
                    bool userMustChangePassword) {
            this.Invoke("SetUserGeneralSettings", new object[] {
                        organizationId,
                        accountName,
                        displayName,
                        password,
                        hideFromAddressBook,
                        disabled,
                        locked,
                        firstName,
                        initials,
                        lastName,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        jobTitle,
                        company,
                        department,
                        office,
                        managerAccountName,
                        businessPhone,
                        fax,
                        homePhone,
                        mobilePhone,
                        pager,
                        webPage,
                        notes,
                        externalEmail,
                        userMustChangePassword});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserGeneralSettings(
                    string organizationId, 
                    string accountName, 
                    string displayName, 
                    string password, 
                    bool hideFromAddressBook, 
                    bool disabled, 
                    bool locked, 
                    string firstName, 
                    string initials, 
                    string lastName, 
                    string address, 
                    string city, 
                    string state, 
                    string zip, 
                    string country, 
                    string jobTitle, 
                    string company, 
                    string department, 
                    string office, 
                    string managerAccountName, 
                    string businessPhone, 
                    string fax, 
                    string homePhone, 
                    string mobilePhone, 
                    string pager, 
                    string webPage, 
                    string notes, 
                    string externalEmail, 
                    bool userMustChangePassword, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("SetUserGeneralSettings", new object[] {
                        organizationId,
                        accountName,
                        displayName,
                        password,
                        hideFromAddressBook,
                        disabled,
                        locked,
                        firstName,
                        initials,
                        lastName,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        jobTitle,
                        company,
                        department,
                        office,
                        managerAccountName,
                        businessPhone,
                        fax,
                        homePhone,
                        mobilePhone,
                        pager,
                        webPage,
                        notes,
                        externalEmail,
                        userMustChangePassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetUserGeneralSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetUserGeneralSettingsAsync(
                    string organizationId, 
                    string accountName, 
                    string displayName, 
                    string password, 
                    bool hideFromAddressBook, 
                    bool disabled, 
                    bool locked, 
                    string firstName, 
                    string initials, 
                    string lastName, 
                    string address, 
                    string city, 
                    string state, 
                    string zip, 
                    string country, 
                    string jobTitle, 
                    string company, 
                    string department, 
                    string office, 
                    string managerAccountName, 
                    string businessPhone, 
                    string fax, 
                    string homePhone, 
                    string mobilePhone, 
                    string pager, 
                    string webPage, 
                    string notes, 
                    string externalEmail, 
                    bool userMustChangePassword) {
            this.SetUserGeneralSettingsAsync(organizationId, accountName, displayName, password, hideFromAddressBook, disabled, locked, firstName, initials, lastName, address, city, state, zip, country, jobTitle, company, department, office, managerAccountName, businessPhone, fax, homePhone, mobilePhone, pager, webPage, notes, externalEmail, userMustChangePassword, null);
        }
        
        /// <remarks/>
        public void SetUserGeneralSettingsAsync(
                    string organizationId, 
                    string accountName, 
                    string displayName, 
                    string password, 
                    bool hideFromAddressBook, 
                    bool disabled, 
                    bool locked, 
                    string firstName, 
                    string initials, 
                    string lastName, 
                    string address, 
                    string city, 
                    string state, 
                    string zip, 
                    string country, 
                    string jobTitle, 
                    string company, 
                    string department, 
                    string office, 
                    string managerAccountName, 
                    string businessPhone, 
                    string fax, 
                    string homePhone, 
                    string mobilePhone, 
                    string pager, 
                    string webPage, 
                    string notes, 
                    string externalEmail, 
                    bool userMustChangePassword, 
                    object userState) {
            if ((this.SetUserGeneralSettingsOperationCompleted == null)) {
                this.SetUserGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("SetUserGeneralSettings", new object[] {
                        organizationId,
                        accountName,
                        displayName,
                        password,
                        hideFromAddressBook,
                        disabled,
                        locked,
                        firstName,
                        initials,
                        lastName,
                        address,
                        city,
                        state,
                        zip,
                        country,
                        jobTitle,
                        company,
                        department,
                        office,
                        managerAccountName,
                        businessPhone,
                        fax,
                        homePhone,
                        mobilePhone,
                        pager,
                        webPage,
                        notes,
                        externalEmail,
                        userMustChangePassword}, this.SetUserGeneralSettingsOperationCompleted, userState);
        }
        
        private void OnSetUserGeneralSettingsOperationCompleted(object arg) {
            if ((this.SetUserGeneralSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserGeneralSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserPassword(string organizationId, string accountName, string password) {
            this.Invoke("SetUserPassword", new object[] {
                        organizationId,
                        accountName,
                        password});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserPassword(string organizationId, string accountName, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserPassword", new object[] {
                        organizationId,
                        accountName,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetUserPassword(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetUserPasswordAsync(string organizationId, string accountName, string password) {
            this.SetUserPasswordAsync(organizationId, accountName, password, null);
        }
        
        /// <remarks/>
        public void SetUserPasswordAsync(string organizationId, string accountName, string password, object userState) {
            if ((this.SetUserPasswordOperationCompleted == null)) {
                this.SetUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordOperationCompleted);
            }
            this.InvokeAsync("SetUserPassword", new object[] {
                        organizationId,
                        accountName,
                        password}, this.SetUserPasswordOperationCompleted, userState);
        }
        
        private void OnSetUserPasswordOperationCompleted(object arg) {
            if ((this.SetUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUserPrincipalName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserPrincipalName(string organizationId, string accountName, string userPrincipalName) {
            this.Invoke("SetUserPrincipalName", new object[] {
                        organizationId,
                        accountName,
                        userPrincipalName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserPrincipalName(string organizationId, string accountName, string userPrincipalName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserPrincipalName", new object[] {
                        organizationId,
                        accountName,
                        userPrincipalName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetUserPrincipalName(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetUserPrincipalNameAsync(string organizationId, string accountName, string userPrincipalName) {
            this.SetUserPrincipalNameAsync(organizationId, accountName, userPrincipalName, null);
        }
        
        /// <remarks/>
        public void SetUserPrincipalNameAsync(string organizationId, string accountName, string userPrincipalName, object userState) {
            if ((this.SetUserPrincipalNameOperationCompleted == null)) {
                this.SetUserPrincipalNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPrincipalNameOperationCompleted);
            }
            this.InvokeAsync("SetUserPrincipalName", new object[] {
                        organizationId,
                        accountName,
                        userPrincipalName}, this.SetUserPrincipalNameOperationCompleted, userState);
        }
        
        private void OnSetUserPrincipalNameOperationCompleted(object arg) {
            if ((this.SetUserPrincipalNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPrincipalNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOrganizationDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteOrganizationDomain(string organizationDistinguishedName, string domain) {
            this.Invoke("DeleteOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteOrganizationDomain(string organizationDistinguishedName, string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteOrganizationDomain(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteOrganizationDomainAsync(string organizationDistinguishedName, string domain) {
            this.DeleteOrganizationDomainAsync(organizationDistinguishedName, domain, null);
        }
        
        /// <remarks/>
        public void DeleteOrganizationDomainAsync(string organizationDistinguishedName, string domain, object userState) {
            if ((this.DeleteOrganizationDomainOperationCompleted == null)) {
                this.DeleteOrganizationDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrganizationDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, this.DeleteOrganizationDomainOperationCompleted, userState);
        }
        
        private void OnDeleteOrganizationDomainOperationCompleted(object arg) {
            if ((this.DeleteOrganizationDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrganizationDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOrganizationDomain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateOrganizationDomain(string organizationDistinguishedName, string domain) {
            this.Invoke("CreateOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateOrganizationDomain(string organizationDistinguishedName, string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateOrganizationDomain(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateOrganizationDomainAsync(string organizationDistinguishedName, string domain) {
            this.CreateOrganizationDomainAsync(organizationDistinguishedName, domain, null);
        }
        
        /// <remarks/>
        public void CreateOrganizationDomainAsync(string organizationDistinguishedName, string domain, object userState) {
            if ((this.CreateOrganizationDomainOperationCompleted == null)) {
                this.CreateOrganizationDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrganizationDomainOperationCompleted);
            }
            this.InvokeAsync("CreateOrganizationDomain", new object[] {
                        organizationDistinguishedName,
                        domain}, this.CreateOrganizationDomainOperationCompleted, userState);
        }
        
        private void OnCreateOrganizationDomainOperationCompleted(object arg) {
            if ((this.CreateOrganizationDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrganizationDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPasswordPolicy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PasswordPolicyResult GetPasswordPolicy() {
            object[] results = this.Invoke("GetPasswordPolicy", new object[0]);
            return ((PasswordPolicyResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPasswordPolicy(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPasswordPolicy", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public PasswordPolicyResult EndGetPasswordPolicy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PasswordPolicyResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPasswordPolicyAsync() {
            this.GetPasswordPolicyAsync(null);
        }
        
        /// <remarks/>
        public void GetPasswordPolicyAsync(object userState) {
            if ((this.GetPasswordPolicyOperationCompleted == null)) {
                this.GetPasswordPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPasswordPolicyOperationCompleted);
            }
            this.InvokeAsync("GetPasswordPolicy", new object[0], this.GetPasswordPolicyOperationCompleted, userState);
        }
        
        private void OnGetPasswordPolicyOperationCompleted(object arg) {
            if ((this.GetPasswordPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPasswordPolicyCompleted(this, new GetPasswordPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSamAccountNameByUserPrincipalName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSamAccountNameByUserPrincipalName(string organizationId, string userPrincipalName) {
            object[] results = this.Invoke("GetSamAccountNameByUserPrincipalName", new object[] {
                        organizationId,
                        userPrincipalName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSamAccountNameByUserPrincipalName(string organizationId, string userPrincipalName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSamAccountNameByUserPrincipalName", new object[] {
                        organizationId,
                        userPrincipalName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSamAccountNameByUserPrincipalName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSamAccountNameByUserPrincipalNameAsync(string organizationId, string userPrincipalName) {
            this.GetSamAccountNameByUserPrincipalNameAsync(organizationId, userPrincipalName, null);
        }
        
        /// <remarks/>
        public void GetSamAccountNameByUserPrincipalNameAsync(string organizationId, string userPrincipalName, object userState) {
            if ((this.GetSamAccountNameByUserPrincipalNameOperationCompleted == null)) {
                this.GetSamAccountNameByUserPrincipalNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSamAccountNameByUserPrincipalNameOperationCompleted);
            }
            this.InvokeAsync("GetSamAccountNameByUserPrincipalName", new object[] {
                        organizationId,
                        userPrincipalName}, this.GetSamAccountNameByUserPrincipalNameOperationCompleted, userState);
        }
        
        private void OnGetSamAccountNameByUserPrincipalNameOperationCompleted(object arg) {
            if ((this.GetSamAccountNameByUserPrincipalNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSamAccountNameByUserPrincipalNameCompleted(this, new GetSamAccountNameByUserPrincipalNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoesSamAccountNameExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesSamAccountNameExist(string accountName) {
            object[] results = this.Invoke("DoesSamAccountNameExist", new object[] {
                        accountName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoesSamAccountNameExist(string accountName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoesSamAccountNameExist", new object[] {
                        accountName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDoesSamAccountNameExist(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoesSamAccountNameExistAsync(string accountName) {
            this.DoesSamAccountNameExistAsync(accountName, null);
        }
        
        /// <remarks/>
        public void DoesSamAccountNameExistAsync(string accountName, object userState) {
            if ((this.DoesSamAccountNameExistOperationCompleted == null)) {
                this.DoesSamAccountNameExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesSamAccountNameExistOperationCompleted);
            }
            this.InvokeAsync("DoesSamAccountNameExist", new object[] {
                        accountName}, this.DoesSamAccountNameExistOperationCompleted, userState);
        }
        
        private void OnDoesSamAccountNameExistOperationCompleted(object arg) {
            if ((this.DoesSamAccountNameExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesSamAccountNameExistCompleted(this, new DoesSamAccountNameExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDriveMaps", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MappedDrive[] GetDriveMaps(string organizationId) {
            object[] results = this.Invoke("GetDriveMaps", new object[] {
                        organizationId});
            return ((MappedDrive[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDriveMaps(string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDriveMaps", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public MappedDrive[] EndGetDriveMaps(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MappedDrive[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDriveMapsAsync(string organizationId) {
            this.GetDriveMapsAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void GetDriveMapsAsync(string organizationId, object userState) {
            if ((this.GetDriveMapsOperationCompleted == null)) {
                this.GetDriveMapsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDriveMapsOperationCompleted);
            }
            this.InvokeAsync("GetDriveMaps", new object[] {
                        organizationId}, this.GetDriveMapsOperationCompleted, userState);
        }
        
        private void OnGetDriveMapsOperationCompleted(object arg) {
            if ((this.GetDriveMapsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDriveMapsCompleted(this, new GetDriveMapsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateMappedDrive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateMappedDrive(string organizationId, string drive, string labelAs, string path) {
            object[] results = this.Invoke("CreateMappedDrive", new object[] {
                        organizationId,
                        drive,
                        labelAs,
                        path});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateMappedDrive(string organizationId, string drive, string labelAs, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateMappedDrive", new object[] {
                        organizationId,
                        drive,
                        labelAs,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateMappedDrive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMappedDriveAsync(string organizationId, string drive, string labelAs, string path) {
            this.CreateMappedDriveAsync(organizationId, drive, labelAs, path, null);
        }
        
        /// <remarks/>
        public void CreateMappedDriveAsync(string organizationId, string drive, string labelAs, string path, object userState) {
            if ((this.CreateMappedDriveOperationCompleted == null)) {
                this.CreateMappedDriveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMappedDriveOperationCompleted);
            }
            this.InvokeAsync("CreateMappedDrive", new object[] {
                        organizationId,
                        drive,
                        labelAs,
                        path}, this.CreateMappedDriveOperationCompleted, userState);
        }
        
        private void OnCreateMappedDriveOperationCompleted(object arg) {
            if ((this.CreateMappedDriveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMappedDriveCompleted(this, new CreateMappedDriveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteMappedDrive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMappedDrive(string organizationId, string drive) {
            this.Invoke("DeleteMappedDrive", new object[] {
                        organizationId,
                        drive});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMappedDrive(string organizationId, string drive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMappedDrive", new object[] {
                        organizationId,
                        drive}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteMappedDrive(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteMappedDriveAsync(string organizationId, string drive) {
            this.DeleteMappedDriveAsync(organizationId, drive, null);
        }
        
        /// <remarks/>
        public void DeleteMappedDriveAsync(string organizationId, string drive, object userState) {
            if ((this.DeleteMappedDriveOperationCompleted == null)) {
                this.DeleteMappedDriveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMappedDriveOperationCompleted);
            }
            this.InvokeAsync("DeleteMappedDrive", new object[] {
                        organizationId,
                        drive}, this.DeleteMappedDriveOperationCompleted, userState);
        }
        
        private void OnDeleteMappedDriveOperationCompleted(object arg) {
            if ((this.DeleteMappedDriveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMappedDriveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteMappedDriveByPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMappedDriveByPath(string organizationId, string path) {
            this.Invoke("DeleteMappedDriveByPath", new object[] {
                        organizationId,
                        path});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMappedDriveByPath(string organizationId, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMappedDriveByPath", new object[] {
                        organizationId,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteMappedDriveByPath(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteMappedDriveByPathAsync(string organizationId, string path) {
            this.DeleteMappedDriveByPathAsync(organizationId, path, null);
        }
        
        /// <remarks/>
        public void DeleteMappedDriveByPathAsync(string organizationId, string path, object userState) {
            if ((this.DeleteMappedDriveByPathOperationCompleted == null)) {
                this.DeleteMappedDriveByPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMappedDriveByPathOperationCompleted);
            }
            this.InvokeAsync("DeleteMappedDriveByPath", new object[] {
                        organizationId,
                        path}, this.DeleteMappedDriveByPathOperationCompleted, userState);
        }
        
        private void OnDeleteMappedDriveByPathOperationCompleted(object arg) {
            if ((this.DeleteMappedDriveByPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMappedDriveByPathCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteMappedDrivesGPO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMappedDrivesGPO(string organizationId) {
            this.Invoke("DeleteMappedDrivesGPO", new object[] {
                        organizationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMappedDrivesGPO(string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMappedDrivesGPO", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteMappedDrivesGPO(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteMappedDrivesGPOAsync(string organizationId) {
            this.DeleteMappedDrivesGPOAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void DeleteMappedDrivesGPOAsync(string organizationId, object userState) {
            if ((this.DeleteMappedDrivesGPOOperationCompleted == null)) {
                this.DeleteMappedDrivesGPOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMappedDrivesGPOOperationCompleted);
            }
            this.InvokeAsync("DeleteMappedDrivesGPO", new object[] {
                        organizationId}, this.DeleteMappedDrivesGPOOperationCompleted, userState);
        }
        
        private void OnDeleteMappedDrivesGPOOperationCompleted(object arg) {
            if ((this.DeleteMappedDrivesGPOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMappedDrivesGPOCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDriveMapsTargetingFilter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDriveMapsTargetingFilter(string organizationId, ExchangeAccount[] accounts, string folderName) {
            this.Invoke("SetDriveMapsTargetingFilter", new object[] {
                        organizationId,
                        accounts,
                        folderName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDriveMapsTargetingFilter(string organizationId, ExchangeAccount[] accounts, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDriveMapsTargetingFilter", new object[] {
                        organizationId,
                        accounts,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetDriveMapsTargetingFilter(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetDriveMapsTargetingFilterAsync(string organizationId, ExchangeAccount[] accounts, string folderName) {
            this.SetDriveMapsTargetingFilterAsync(organizationId, accounts, folderName, null);
        }
        
        /// <remarks/>
        public void SetDriveMapsTargetingFilterAsync(string organizationId, ExchangeAccount[] accounts, string folderName, object userState) {
            if ((this.SetDriveMapsTargetingFilterOperationCompleted == null)) {
                this.SetDriveMapsTargetingFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDriveMapsTargetingFilterOperationCompleted);
            }
            this.InvokeAsync("SetDriveMapsTargetingFilter", new object[] {
                        organizationId,
                        accounts,
                        folderName}, this.SetDriveMapsTargetingFilterOperationCompleted, userState);
        }
        
        private void OnSetDriveMapsTargetingFilterOperationCompleted(object arg) {
            if ((this.SetDriveMapsTargetingFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDriveMapsTargetingFilterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeDriveMapFolderPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeDriveMapFolderPath(string organizationId, string oldFolder, string newFolder) {
            this.Invoke("ChangeDriveMapFolderPath", new object[] {
                        organizationId,
                        oldFolder,
                        newFolder});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeDriveMapFolderPath(string organizationId, string oldFolder, string newFolder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeDriveMapFolderPath", new object[] {
                        organizationId,
                        oldFolder,
                        newFolder}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndChangeDriveMapFolderPath(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ChangeDriveMapFolderPathAsync(string organizationId, string oldFolder, string newFolder) {
            this.ChangeDriveMapFolderPathAsync(organizationId, oldFolder, newFolder, null);
        }
        
        /// <remarks/>
        public void ChangeDriveMapFolderPathAsync(string organizationId, string oldFolder, string newFolder, object userState) {
            if ((this.ChangeDriveMapFolderPathOperationCompleted == null)) {
                this.ChangeDriveMapFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeDriveMapFolderPathOperationCompleted);
            }
            this.InvokeAsync("ChangeDriveMapFolderPath", new object[] {
                        organizationId,
                        oldFolder,
                        newFolder}, this.ChangeDriveMapFolderPathOperationCompleted, userState);
        }
        
        private void OnChangeDriveMapFolderPathOperationCompleted(object arg) {
            if ((this.ChangeDriveMapFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeDriveMapFolderPathCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrganizationUsersWithExpiredPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser[] GetOrganizationUsersWithExpiredPassword(string organizationId, int daysBeforeExpiration) {
            object[] results = this.Invoke("GetOrganizationUsersWithExpiredPassword", new object[] {
                        organizationId,
                        daysBeforeExpiration});
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationUsersWithExpiredPassword(string organizationId, int daysBeforeExpiration, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationUsersWithExpiredPassword", new object[] {
                        organizationId,
                        daysBeforeExpiration}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUser[] EndGetOrganizationUsersWithExpiredPassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationUsersWithExpiredPasswordAsync(string organizationId, int daysBeforeExpiration) {
            this.GetOrganizationUsersWithExpiredPasswordAsync(organizationId, daysBeforeExpiration, null);
        }
        
        /// <remarks/>
        public void GetOrganizationUsersWithExpiredPasswordAsync(string organizationId, int daysBeforeExpiration, object userState) {
            if ((this.GetOrganizationUsersWithExpiredPasswordOperationCompleted == null)) {
                this.GetOrganizationUsersWithExpiredPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationUsersWithExpiredPasswordOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationUsersWithExpiredPassword", new object[] {
                        organizationId,
                        daysBeforeExpiration}, this.GetOrganizationUsersWithExpiredPasswordOperationCompleted, userState);
        }
        
        private void OnGetOrganizationUsersWithExpiredPasswordOperationCompleted(object arg) {
            if ((this.GetOrganizationUsersWithExpiredPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationUsersWithExpiredPasswordCompleted(this, new GetOrganizationUsersWithExpiredPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApplyPasswordSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApplyPasswordSettings(string organizationId, OrganizationPasswordSettings passwordSettings) {
            this.Invoke("ApplyPasswordSettings", new object[] {
                        organizationId,
                        passwordSettings});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginApplyPasswordSettings(string organizationId, OrganizationPasswordSettings passwordSettings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ApplyPasswordSettings", new object[] {
                        organizationId,
                        passwordSettings}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndApplyPasswordSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ApplyPasswordSettingsAsync(string organizationId, OrganizationPasswordSettings passwordSettings) {
            this.ApplyPasswordSettingsAsync(organizationId, passwordSettings, null);
        }
        
        /// <remarks/>
        public void ApplyPasswordSettingsAsync(string organizationId, OrganizationPasswordSettings passwordSettings, object userState) {
            if ((this.ApplyPasswordSettingsOperationCompleted == null)) {
                this.ApplyPasswordSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyPasswordSettingsOperationCompleted);
            }
            this.InvokeAsync("ApplyPasswordSettings", new object[] {
                        organizationId,
                        passwordSettings}, this.ApplyPasswordSettingsOperationCompleted, userState);
        }
        
        private void OnApplyPasswordSettingsOperationCompleted(object arg) {
            if ((this.ApplyPasswordSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyPasswordSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPhoneNumberIsInUse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckPhoneNumberIsInUse(string phoneNumber, string userSamAccountName) {
            object[] results = this.Invoke("CheckPhoneNumberIsInUse", new object[] {
                        phoneNumber,
                        userSamAccountName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckPhoneNumberIsInUse(string phoneNumber, string userSamAccountName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckPhoneNumberIsInUse", new object[] {
                        phoneNumber,
                        userSamAccountName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckPhoneNumberIsInUse(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPhoneNumberIsInUseAsync(string phoneNumber, string userSamAccountName) {
            this.CheckPhoneNumberIsInUseAsync(phoneNumber, userSamAccountName, null);
        }
        
        /// <remarks/>
        public void CheckPhoneNumberIsInUseAsync(string phoneNumber, string userSamAccountName, object userState) {
            if ((this.CheckPhoneNumberIsInUseOperationCompleted == null)) {
                this.CheckPhoneNumberIsInUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPhoneNumberIsInUseOperationCompleted);
            }
            this.InvokeAsync("CheckPhoneNumberIsInUse", new object[] {
                        phoneNumber,
                        userSamAccountName}, this.CheckPhoneNumberIsInUseOperationCompleted, userState);
        }
        
        private void OnCheckPhoneNumberIsInUseOperationCompleted(object arg) {
            if ((this.CheckPhoneNumberIsInUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPhoneNumberIsInUseCompleted(this, new CheckPhoneNumberIsInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrganizationUserWithExtraData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser GetOrganizationUserWithExtraData(string loginName, string organizationId) {
            object[] results = this.Invoke("GetOrganizationUserWithExtraData", new object[] {
                        loginName,
                        organizationId});
            return ((OrganizationUser)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationUserWithExtraData(string loginName, string organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationUserWithExtraData", new object[] {
                        loginName,
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUser EndGetOrganizationUserWithExtraData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationUserWithExtraDataAsync(string loginName, string organizationId) {
            this.GetOrganizationUserWithExtraDataAsync(loginName, organizationId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationUserWithExtraDataAsync(string loginName, string organizationId, object userState) {
            if ((this.GetOrganizationUserWithExtraDataOperationCompleted == null)) {
                this.GetOrganizationUserWithExtraDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationUserWithExtraDataOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationUserWithExtraData", new object[] {
                        loginName,
                        organizationId}, this.GetOrganizationUserWithExtraDataOperationCompleted, userState);
        }
        
        private void OnGetOrganizationUserWithExtraDataOperationCompleted(object arg) {
            if ((this.GetOrganizationUserWithExtraDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationUserWithExtraDataCompleted(this, new GetOrganizationUserWithExtraDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void OrganizationExistsCompletedEventHandler(object sender, OrganizationExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrganizationExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OrganizationExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateOrganizationCompletedEventHandler(object sender, CreateOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Organization Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Organization)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteOrganizationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DisableUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUserGeneralSettingsCompletedEventHandler(object sender, GetUserGeneralSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserGeneralSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserGeneralSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateSecurityGroupCompletedEventHandler(object sender, CreateSecurityGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSecurityGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSecurityGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecurityGroupGeneralSettingsCompletedEventHandler(object sender, GetSecurityGroupGeneralSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityGroupGeneralSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityGroupGeneralSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationSecurityGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationSecurityGroup)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSecurityGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetSecurityGroupGeneralSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddObjectToSecurityGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteObjectFromSecurityGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserGeneralSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUserPrincipalNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteOrganizationDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateOrganizationDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetPasswordPolicyCompletedEventHandler(object sender, GetPasswordPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPasswordPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPasswordPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PasswordPolicyResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PasswordPolicyResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSamAccountNameByUserPrincipalNameCompletedEventHandler(object sender, GetSamAccountNameByUserPrincipalNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSamAccountNameByUserPrincipalNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSamAccountNameByUserPrincipalNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DoesSamAccountNameExistCompletedEventHandler(object sender, DoesSamAccountNameExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesSamAccountNameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoesSamAccountNameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDriveMapsCompletedEventHandler(object sender, GetDriveMapsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDriveMapsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDriveMapsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MappedDrive[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MappedDrive[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateMappedDriveCompletedEventHandler(object sender, CreateMappedDriveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMappedDriveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMappedDriveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteMappedDriveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteMappedDriveByPathCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteMappedDrivesGPOCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetDriveMapsTargetingFilterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ChangeDriveMapFolderPathCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationUsersWithExpiredPasswordCompletedEventHandler(object sender, GetOrganizationUsersWithExpiredPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationUsersWithExpiredPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationUsersWithExpiredPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ApplyPasswordSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckPhoneNumberIsInUseCompletedEventHandler(object sender, CheckPhoneNumberIsInUseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPhoneNumberIsInUseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPhoneNumberIsInUseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationUserWithExtraDataCompletedEventHandler(object sender, GetOrganizationUserWithExtraDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationUserWithExtraDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationUserWithExtraDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser)(this.results[0]));
            }
        }
    }
}
