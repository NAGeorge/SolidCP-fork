//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.7905
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

using SolidCP.Providers.OS;

namespace SolidCP.Providers.StorageSpaces {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StorageSpaceServicesSoap", Namespace="http://smbsaas/solidcp/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class StorageSpaceServices : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;
        
        private System.Threading.SendOrPostCallback GetAllDriveLettersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemSubFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStorageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearStorageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFolderQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShareFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileOrDirectoryExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFolderNtfsPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileBinaryChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveShareOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShareSetAbeStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShareSetEncyptDataAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShareGetEncyptDataAccessStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShareGetAbeStateOperationCompleted;
        
        /// <remarks/>
        public StorageSpaceServices() {
            this.Url = "http://localhost:9003/StorageSpaceServices.asmx";
        }
        
        /// <remarks/>
        public event GetAllDriveLettersCompletedEventHandler GetAllDriveLettersCompleted;
        
        /// <remarks/>
        public event GetSystemSubFoldersCompletedEventHandler GetSystemSubFoldersCompleted;
        
        /// <remarks/>
        public event UpdateStorageSettingsCompletedEventHandler UpdateStorageSettingsCompleted;
        
        /// <remarks/>
        public event ClearStorageSettingsCompletedEventHandler ClearStorageSettingsCompleted;
        
        /// <remarks/>
        public event UpdateFolderQuotaCompletedEventHandler UpdateFolderQuotaCompleted;
        
        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;
        
        /// <remarks/>
        public event ShareFolderCompletedEventHandler ShareFolderCompleted;
        
        /// <remarks/>
        public event GetFolderQuotaCompletedEventHandler GetFolderQuotaCompleted;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event RenameFolderCompletedEventHandler RenameFolderCompleted;
        
        /// <remarks/>
        public event FileOrDirectoryExistCompletedEventHandler FileOrDirectoryExistCompleted;
        
        /// <remarks/>
        public event SetFolderNtfsPermissionsCompletedEventHandler SetFolderNtfsPermissionsCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event GetFileBinaryChunkCompletedEventHandler GetFileBinaryChunkCompleted;
        
        /// <remarks/>
        public event RemoveShareCompletedEventHandler RemoveShareCompleted;
        
        /// <remarks/>
        public event ShareSetAbeStateCompletedEventHandler ShareSetAbeStateCompleted;
        
        /// <remarks/>
        public event ShareSetEncyptDataAccessCompletedEventHandler ShareSetEncyptDataAccessCompleted;
        
        /// <remarks/>
        public event ShareGetEncyptDataAccessStatusCompletedEventHandler ShareGetEncyptDataAccessStatusCompleted;
        
        /// <remarks/>
        public event ShareGetAbeStateCompletedEventHandler ShareGetAbeStateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetAllDriveLetters", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetAllDriveLetters() {
            object[] results = this.Invoke("GetAllDriveLetters", new object[0]);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDriveLetters(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDriveLetters", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetAllDriveLetters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDriveLettersAsync() {
            this.GetAllDriveLettersAsync(null);
        }
        
        /// <remarks/>
        public void GetAllDriveLettersAsync(object userState) {
            if ((this.GetAllDriveLettersOperationCompleted == null)) {
                this.GetAllDriveLettersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDriveLettersOperationCompleted);
            }
            this.InvokeAsync("GetAllDriveLetters", new object[0], this.GetAllDriveLettersOperationCompleted, userState);
        }
        
        private void OnGetAllDriveLettersOperationCompleted(object arg) {
            if ((this.GetAllDriveLettersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDriveLettersCompleted(this, new GetAllDriveLettersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSystemSubFolders", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetSystemSubFolders(string path) {
            object[] results = this.Invoke("GetSystemSubFolders", new object[] {
                        path});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSystemSubFolders(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSystemSubFolders", new object[] {
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetSystemSubFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemSubFoldersAsync(string path) {
            this.GetSystemSubFoldersAsync(path, null);
        }
        
        /// <remarks/>
        public void GetSystemSubFoldersAsync(string path, object userState) {
            if ((this.GetSystemSubFoldersOperationCompleted == null)) {
                this.GetSystemSubFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemSubFoldersOperationCompleted);
            }
            this.InvokeAsync("GetSystemSubFolders", new object[] {
                        path}, this.GetSystemSubFoldersOperationCompleted, userState);
        }
        
        private void OnGetSystemSubFoldersOperationCompleted(object arg) {
            if ((this.GetSystemSubFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemSubFoldersCompleted(this, new GetSystemSubFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateStorageSettings", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateStorageSettings(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.Invoke("UpdateStorageSettings", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStorageSettings(string fullPath, long qouteSizeBytes, QuotaType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStorageSettings", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateStorageSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateStorageSettingsAsync(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.UpdateStorageSettingsAsync(fullPath, qouteSizeBytes, type, null);
        }
        
        /// <remarks/>
        public void UpdateStorageSettingsAsync(string fullPath, long qouteSizeBytes, QuotaType type, object userState) {
            if ((this.UpdateStorageSettingsOperationCompleted == null)) {
                this.UpdateStorageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStorageSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateStorageSettings", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, this.UpdateStorageSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateStorageSettingsOperationCompleted(object arg) {
            if ((this.UpdateStorageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStorageSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ClearStorageSettings", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearStorageSettings(string fullPath, string uncPath) {
            this.Invoke("ClearStorageSettings", new object[] {
                        fullPath,
                        uncPath});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearStorageSettings(string fullPath, string uncPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearStorageSettings", new object[] {
                        fullPath,
                        uncPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndClearStorageSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ClearStorageSettingsAsync(string fullPath, string uncPath) {
            this.ClearStorageSettingsAsync(fullPath, uncPath, null);
        }
        
        /// <remarks/>
        public void ClearStorageSettingsAsync(string fullPath, string uncPath, object userState) {
            if ((this.ClearStorageSettingsOperationCompleted == null)) {
                this.ClearStorageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearStorageSettingsOperationCompleted);
            }
            this.InvokeAsync("ClearStorageSettings", new object[] {
                        fullPath,
                        uncPath}, this.ClearStorageSettingsOperationCompleted, userState);
        }
        
        private void OnClearStorageSettingsOperationCompleted(object arg) {
            if ((this.ClearStorageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearStorageSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateFolderQuota", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFolderQuota(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.Invoke("UpdateFolderQuota", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateFolderQuota(string fullPath, long qouteSizeBytes, QuotaType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateFolderQuota", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateFolderQuota(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateFolderQuotaAsync(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.UpdateFolderQuotaAsync(fullPath, qouteSizeBytes, type, null);
        }
        
        /// <remarks/>
        public void UpdateFolderQuotaAsync(string fullPath, long qouteSizeBytes, QuotaType type, object userState) {
            if ((this.UpdateFolderQuotaOperationCompleted == null)) {
                this.UpdateFolderQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFolderQuotaOperationCompleted);
            }
            this.InvokeAsync("UpdateFolderQuota", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, this.UpdateFolderQuotaOperationCompleted, userState);
        }
        
        private void OnUpdateFolderQuotaOperationCompleted(object arg) {
            if ((this.UpdateFolderQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFolderQuotaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CreateFolder", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateFolder(string fullPath) {
            this.Invoke("CreateFolder", new object[] {
                        fullPath});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateFolder(string fullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateFolder", new object[] {
                        fullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateFolder(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string fullPath) {
            this.CreateFolderAsync(fullPath, null);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string fullPath, object userState) {
            if ((this.CreateFolderOperationCompleted == null)) {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        fullPath}, this.CreateFolderOperationCompleted, userState);
        }
        
        private void OnCreateFolderOperationCompleted(object arg) {
            if ((this.CreateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShareFolder", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StorageSpaceFolderShare ShareFolder(string fullPath, string shareName) {
            object[] results = this.Invoke("ShareFolder", new object[] {
                        fullPath,
                        shareName});
            return ((StorageSpaceFolderShare)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShareFolder(string fullPath, string shareName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShareFolder", new object[] {
                        fullPath,
                        shareName}, callback, asyncState);
        }
        
        /// <remarks/>
        public StorageSpaceFolderShare EndShareFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StorageSpaceFolderShare)(results[0]));
        }
        
        /// <remarks/>
        public void ShareFolderAsync(string fullPath, string shareName) {
            this.ShareFolderAsync(fullPath, shareName, null);
        }
        
        /// <remarks/>
        public void ShareFolderAsync(string fullPath, string shareName, object userState) {
            if ((this.ShareFolderOperationCompleted == null)) {
                this.ShareFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShareFolderOperationCompleted);
            }
            this.InvokeAsync("ShareFolder", new object[] {
                        fullPath,
                        shareName}, this.ShareFolderOperationCompleted, userState);
        }
        
        private void OnShareFolderOperationCompleted(object arg) {
            if ((this.ShareFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShareFolderCompleted(this, new ShareFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetFolderQuota", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Quota GetFolderQuota(string fullPath) {
            object[] results = this.Invoke("GetFolderQuota", new object[] {
                        fullPath});
            return ((Quota)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFolderQuota(string fullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFolderQuota", new object[] {
                        fullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public Quota EndGetFolderQuota(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Quota)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderQuotaAsync(string fullPath) {
            this.GetFolderQuotaAsync(fullPath, null);
        }
        
        /// <remarks/>
        public void GetFolderQuotaAsync(string fullPath, object userState) {
            if ((this.GetFolderQuotaOperationCompleted == null)) {
                this.GetFolderQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderQuotaOperationCompleted);
            }
            this.InvokeAsync("GetFolderQuota", new object[] {
                        fullPath}, this.GetFolderQuotaOperationCompleted, userState);
        }
        
        private void OnGetFolderQuotaOperationCompleted(object arg) {
            if ((this.GetFolderQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderQuotaCompleted(this, new GetFolderQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteFolder", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFolder(string fullPath) {
            this.Invoke("DeleteFolder", new object[] {
                        fullPath});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteFolder(string fullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteFolder", new object[] {
                        fullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteFolder(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string fullPath) {
            this.DeleteFolderAsync(fullPath, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string fullPath, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        fullPath}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RenameFolder", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RenameFolder(string originalPath, string newName) {
            object[] results = this.Invoke("RenameFolder", new object[] {
                        originalPath,
                        newName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameFolder(string originalPath, string newName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameFolder", new object[] {
                        originalPath,
                        newName}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRenameFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RenameFolderAsync(string originalPath, string newName) {
            this.RenameFolderAsync(originalPath, newName, null);
        }
        
        /// <remarks/>
        public void RenameFolderAsync(string originalPath, string newName, object userState) {
            if ((this.RenameFolderOperationCompleted == null)) {
                this.RenameFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameFolderOperationCompleted);
            }
            this.InvokeAsync("RenameFolder", new object[] {
                        originalPath,
                        newName}, this.RenameFolderOperationCompleted, userState);
        }
        
        private void OnRenameFolderOperationCompleted(object arg) {
            if ((this.RenameFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameFolderCompleted(this, new RenameFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/FileOrDirectoryExist", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FileOrDirectoryExist(string fullPath) {
            object[] results = this.Invoke("FileOrDirectoryExist", new object[] {
                        fullPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFileOrDirectoryExist(string fullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FileOrDirectoryExist", new object[] {
                        fullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndFileOrDirectoryExist(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FileOrDirectoryExistAsync(string fullPath) {
            this.FileOrDirectoryExistAsync(fullPath, null);
        }
        
        /// <remarks/>
        public void FileOrDirectoryExistAsync(string fullPath, object userState) {
            if ((this.FileOrDirectoryExistOperationCompleted == null)) {
                this.FileOrDirectoryExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileOrDirectoryExistOperationCompleted);
            }
            this.InvokeAsync("FileOrDirectoryExist", new object[] {
                        fullPath}, this.FileOrDirectoryExistOperationCompleted, userState);
        }
        
        private void OnFileOrDirectoryExistOperationCompleted(object arg) {
            if ((this.FileOrDirectoryExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileOrDirectoryExistCompleted(this, new FileOrDirectoryExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetFolderNtfsPermissions", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFolderNtfsPermissions(string fullPath, UserPermission[] permissions, bool isProtected, bool preserveInheritance) {
            this.Invoke("SetFolderNtfsPermissions", new object[] {
                        fullPath,
                        permissions,
                        isProtected,
                        preserveInheritance});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetFolderNtfsPermissions(string fullPath, UserPermission[] permissions, bool isProtected, bool preserveInheritance, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetFolderNtfsPermissions", new object[] {
                        fullPath,
                        permissions,
                        isProtected,
                        preserveInheritance}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetFolderNtfsPermissions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetFolderNtfsPermissionsAsync(string fullPath, UserPermission[] permissions, bool isProtected, bool preserveInheritance) {
            this.SetFolderNtfsPermissionsAsync(fullPath, permissions, isProtected, preserveInheritance, null);
        }
        
        /// <remarks/>
        public void SetFolderNtfsPermissionsAsync(string fullPath, UserPermission[] permissions, bool isProtected, bool preserveInheritance, object userState) {
            if ((this.SetFolderNtfsPermissionsOperationCompleted == null)) {
                this.SetFolderNtfsPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFolderNtfsPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetFolderNtfsPermissions", new object[] {
                        fullPath,
                        permissions,
                        isProtected,
                        preserveInheritance}, this.SetFolderNtfsPermissionsOperationCompleted, userState);
        }
        
        private void OnSetFolderNtfsPermissionsOperationCompleted(object arg) {
            if ((this.SetFolderNtfsPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFolderNtfsPermissionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/Search", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] Search(string[] searchPaths, string searchText, bool recursive) {
            object[] results = this.Invoke("Search", new object[] {
                        searchPaths,
                        searchText,
                        recursive});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearch(string[] searchPaths, string searchText, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Search", new object[] {
                        searchPaths,
                        searchText,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndSearch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(string[] searchPaths, string searchText, bool recursive) {
            this.SearchAsync(searchPaths, searchText, recursive, null);
        }
        
        /// <remarks/>
        public void SearchAsync(string[] searchPaths, string searchText, bool recursive, object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        searchPaths,
                        searchText,
                        recursive}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetFileBinaryChunk", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileBinaryChunk(string path, int offset, int length) {
            object[] results = this.Invoke("GetFileBinaryChunk", new object[] {
                        path,
                        offset,
                        length});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileBinaryChunk(string path, int offset, int length, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileBinaryChunk", new object[] {
                        path,
                        offset,
                        length}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetFileBinaryChunk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileBinaryChunkAsync(string path, int offset, int length) {
            this.GetFileBinaryChunkAsync(path, offset, length, null);
        }
        
        /// <remarks/>
        public void GetFileBinaryChunkAsync(string path, int offset, int length, object userState) {
            if ((this.GetFileBinaryChunkOperationCompleted == null)) {
                this.GetFileBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileBinaryChunkOperationCompleted);
            }
            this.InvokeAsync("GetFileBinaryChunk", new object[] {
                        path,
                        offset,
                        length}, this.GetFileBinaryChunkOperationCompleted, userState);
        }
        
        private void OnGetFileBinaryChunkOperationCompleted(object arg) {
            if ((this.GetFileBinaryChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileBinaryChunkCompleted(this, new GetFileBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RemoveShare", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveShare(string fullPath) {
            this.Invoke("RemoveShare", new object[] {
                        fullPath});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveShare(string fullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveShare", new object[] {
                        fullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveShare(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveShareAsync(string fullPath) {
            this.RemoveShareAsync(fullPath, null);
        }
        
        /// <remarks/>
        public void RemoveShareAsync(string fullPath, object userState) {
            if ((this.RemoveShareOperationCompleted == null)) {
                this.RemoveShareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveShareOperationCompleted);
            }
            this.InvokeAsync("RemoveShare", new object[] {
                        fullPath}, this.RemoveShareOperationCompleted, userState);
        }
        
        private void OnRemoveShareOperationCompleted(object arg) {
            if ((this.RemoveShareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveShareCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShareSetAbeState", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ShareSetAbeState(string path, bool enabled) {
            this.Invoke("ShareSetAbeState", new object[] {
                        path,
                        enabled});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShareSetAbeState(string path, bool enabled, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShareSetAbeState", new object[] {
                        path,
                        enabled}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndShareSetAbeState(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ShareSetAbeStateAsync(string path, bool enabled) {
            this.ShareSetAbeStateAsync(path, enabled, null);
        }
        
        /// <remarks/>
        public void ShareSetAbeStateAsync(string path, bool enabled, object userState) {
            if ((this.ShareSetAbeStateOperationCompleted == null)) {
                this.ShareSetAbeStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShareSetAbeStateOperationCompleted);
            }
            this.InvokeAsync("ShareSetAbeState", new object[] {
                        path,
                        enabled}, this.ShareSetAbeStateOperationCompleted, userState);
        }
        
        private void OnShareSetAbeStateOperationCompleted(object arg) {
            if ((this.ShareSetAbeStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShareSetAbeStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShareSetEncyptDataAccess", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ShareSetEncyptDataAccess(string path, bool enabled) {
            this.Invoke("ShareSetEncyptDataAccess", new object[] {
                        path,
                        enabled});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShareSetEncyptDataAccess(string path, bool enabled, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShareSetEncyptDataAccess", new object[] {
                        path,
                        enabled}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndShareSetEncyptDataAccess(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ShareSetEncyptDataAccessAsync(string path, bool enabled) {
            this.ShareSetEncyptDataAccessAsync(path, enabled, null);
        }
        
        /// <remarks/>
        public void ShareSetEncyptDataAccessAsync(string path, bool enabled, object userState) {
            if ((this.ShareSetEncyptDataAccessOperationCompleted == null)) {
                this.ShareSetEncyptDataAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShareSetEncyptDataAccessOperationCompleted);
            }
            this.InvokeAsync("ShareSetEncyptDataAccess", new object[] {
                        path,
                        enabled}, this.ShareSetEncyptDataAccessOperationCompleted, userState);
        }
        
        private void OnShareSetEncyptDataAccessOperationCompleted(object arg) {
            if ((this.ShareSetEncyptDataAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShareSetEncyptDataAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShareGetEncyptDataAccessStatus", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ShareGetEncyptDataAccessStatus(string path) {
            object[] results = this.Invoke("ShareGetEncyptDataAccessStatus", new object[] {
                        path});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShareGetEncyptDataAccessStatus(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShareGetEncyptDataAccessStatus", new object[] {
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndShareGetEncyptDataAccessStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ShareGetEncyptDataAccessStatusAsync(string path) {
            this.ShareGetEncyptDataAccessStatusAsync(path, null);
        }
        
        /// <remarks/>
        public void ShareGetEncyptDataAccessStatusAsync(string path, object userState) {
            if ((this.ShareGetEncyptDataAccessStatusOperationCompleted == null)) {
                this.ShareGetEncyptDataAccessStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShareGetEncyptDataAccessStatusOperationCompleted);
            }
            this.InvokeAsync("ShareGetEncyptDataAccessStatus", new object[] {
                        path}, this.ShareGetEncyptDataAccessStatusOperationCompleted, userState);
        }
        
        private void OnShareGetEncyptDataAccessStatusOperationCompleted(object arg) {
            if ((this.ShareGetEncyptDataAccessStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShareGetEncyptDataAccessStatusCompleted(this, new ShareGetEncyptDataAccessStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ShareGetAbeState", RequestNamespace="http://smbsaas/solidcp/server/", ResponseNamespace="http://smbsaas/solidcp/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ShareGetAbeState(string path) {
            object[] results = this.Invoke("ShareGetAbeState", new object[] {
                        path});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShareGetAbeState(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShareGetAbeState", new object[] {
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndShareGetAbeState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ShareGetAbeStateAsync(string path) {
            this.ShareGetAbeStateAsync(path, null);
        }
        
        /// <remarks/>
        public void ShareGetAbeStateAsync(string path, object userState) {
            if ((this.ShareGetAbeStateOperationCompleted == null)) {
                this.ShareGetAbeStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShareGetAbeStateOperationCompleted);
            }
            this.InvokeAsync("ShareGetAbeState", new object[] {
                        path}, this.ShareGetAbeStateOperationCompleted, userState);
        }
        
        private void OnShareGetAbeStateOperationCompleted(object arg) {
            if ((this.ShareGetAbeStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShareGetAbeStateCompleted(this, new ShareGetAbeStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllDriveLettersCompletedEventHandler(object sender, GetAllDriveLettersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDriveLettersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDriveLettersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSystemSubFoldersCompletedEventHandler(object sender, GetSystemSubFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemSubFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemSubFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateStorageSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ClearStorageSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateFolderQuotaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShareFolderCompletedEventHandler(object sender, ShareFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShareFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShareFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StorageSpaceFolderShare Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StorageSpaceFolderShare)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetFolderQuotaCompletedEventHandler(object sender, GetFolderQuotaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Quota Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Quota)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RenameFolderCompletedEventHandler(object sender, RenameFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void FileOrDirectoryExistCompletedEventHandler(object sender, FileOrDirectoryExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileOrDirectoryExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileOrDirectoryExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetFolderNtfsPermissionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetFileBinaryChunkCompletedEventHandler(object sender, GetFileBinaryChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveShareCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShareSetAbeStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShareSetEncyptDataAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShareGetEncyptDataAccessStatusCompletedEventHandler(object sender, ShareGetEncyptDataAccessStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShareGetEncyptDataAccessStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShareGetEncyptDataAccessStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShareGetAbeStateCompletedEventHandler(object sender, ShareGetAbeStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShareGetAbeStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShareGetAbeStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
