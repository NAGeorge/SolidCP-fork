// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

using SolidCP.Providers.Common;
using SolidCP.Providers.ResultObjects;
using SolidCP.Providers.WebAppGallery;

namespace SolidCP.Providers.Web
{
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "WebServerSoap", Namespace = "http://smbsaas/solidcp/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class WebServer : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;

        private System.Threading.SendOrPostCallback generateCSROperationCompleted;

        private System.Threading.SendOrPostCallback generateRenewalCSROperationCompleted;

        private System.Threading.SendOrPostCallback getCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback installCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback installPFXOperationCompleted;

        private System.Threading.SendOrPostCallback exportCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback getServerCertificatesOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback ImportCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback CheckCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback GetDirectoryBrowseEnabledOperationCompleted;

        private System.Threading.SendOrPostCallback SetDirectoryBrowseEnabledOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeSiteStateOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteStateOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetSitesAccountsOperationCompleted;

        private System.Threading.SendOrPostCallback SiteExistsOperationCompleted;

        private System.Threading.SendOrPostCallback GetSitesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteBindingsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateSiteOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSiteOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSiteBindingsOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSiteOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeAppPoolStateOperationCompleted;

        private System.Threading.SendOrPostCallback GetAppPoolStateOperationCompleted;
        private System.Threading.SendOrPostCallback CreateEnterpriseStorageAppVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback VirtualDirectoryExistsOperationCompleted;

        private System.Threading.SendOrPostCallback GetVirtualDirectoriesOperationCompleted;

        private System.Threading.SendOrPostCallback GetVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback CreateVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback AppVirtualDirectoryExistsOperationCompleted;

        private System.Threading.SendOrPostCallback GetAppVirtualDirectoriesOperationCompleted;

        private System.Threading.SendOrPostCallback GetAppVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback CreateAppVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateAppVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteAppVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback IsFrontPageSystemInstalledOperationCompleted;

        private System.Threading.SendOrPostCallback IsFrontPageInstalledOperationCompleted;

        private System.Threading.SendOrPostCallback InstallFrontPageOperationCompleted;

        private System.Threading.SendOrPostCallback UninstallFrontPageOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeFrontPagePasswordOperationCompleted;

        private System.Threading.SendOrPostCallback IsColdFusionSystemInstalledOperationCompleted;

        private System.Threading.SendOrPostCallback GrantWebSiteAccessOperationCompleted;

        private System.Threading.SendOrPostCallback InstallSecuredFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback UninstallSecuredFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetGroupsOperationCompleted;

        private System.Threading.SendOrPostCallback GetGroupOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateGroupOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeStatusOperationCompleted;

        private System.Threading.SendOrPostCallback InstallHeliconApeOperationCompleted;

        private System.Threading.SendOrPostCallback EnableHeliconApeOperationCompleted;

        private System.Threading.SendOrPostCallback DisableHeliconApeOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeHttpdFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeHttpdFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteHeliconApeFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeUserOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeUserOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteHeliconApeUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeGroupsOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeGroupOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GrantWebDeployPublishingAccessOperationCompleted;

        private System.Threading.SendOrPostCallback RevokeWebDeployPublishingAccessOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteHeliconApeGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GetZooApplicationsOperationCompleted;

        private System.Threading.SendOrPostCallback SetZooEnvironmentVariableOperationCompleted;

        private System.Threading.SendOrPostCallback SetZooConsoleEnabledOperationCompleted;

        private System.Threading.SendOrPostCallback SetZooConsoleDisabledOperationCompleted;

        private System.Threading.SendOrPostCallback CheckLoadUserProfileOperationCompleted;

        private System.Threading.SendOrPostCallback EnableLoadUserProfileOperationCompleted;

        private System.Threading.SendOrPostCallback InitFeedsOperationCompleted;

        private System.Threading.SendOrPostCallback SetResourceLanguageOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryLanguagesOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryCategoriesOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryApplicationsOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryApplicationsFilteredOperationCompleted;

        private System.Threading.SendOrPostCallback IsMsDeployInstalledOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryApplicationOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryApplicationStatusOperationCompleted;

        private System.Threading.SendOrPostCallback DownloadGalleryApplicationOperationCompleted;

        private System.Threading.SendOrPostCallback GetGalleryApplicationParametersOperationCompleted;

        private System.Threading.SendOrPostCallback InstallGalleryApplicationOperationCompleted;

        private System.Threading.SendOrPostCallback CheckWebManagementAccountExistsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckWebManagementPasswordComplexityOperationCompleted;

        private System.Threading.SendOrPostCallback GrantWebManagementAccessOperationCompleted;

        private System.Threading.SendOrPostCallback RevokeWebManagementAccessOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeWebManagementAccessPasswordOperationCompleted;

        // RB Added for LetsEncrypt
        private System.Threading.SendOrPostCallback InstallLetsEncryptCertificateOperationCompleted;

        /// <remarks/>
        public WebServer()
        {
            this.Url = "http://localhost:9004/WebServer.asmx";
        }

        /// <remarks/>
        public event generateCSRCompletedEventHandler generateCSRCompleted;

        /// <remarks/>
        public event generateRenewalCSRCompletedEventHandler generateRenewalCSRCompleted;

        /// <remarks/>
        public event getCertificateCompletedEventHandler getCertificateCompleted;

        /// <remarks/>
        public event installCertificateCompletedEventHandler installCertificateCompleted;

        // RB ADDED for LetsEncrypt
        public event InstallLetsEncryptCertificateCompletedEventHandler InstallLetsEncryptCertificateCompleted;

        /// <remarks/>
        public event installPFXCompletedEventHandler installPFXCompleted;

        /// <remarks/>
        public event exportCertificateCompletedEventHandler exportCertificateCompleted;

        /// <remarks/>
        public event getServerCertificatesCompletedEventHandler getServerCertificatesCompleted;

        /// <remarks/>
        public event DeleteCertificateCompletedEventHandler DeleteCertificateCompleted;

        /// <remarks/>
        public event ImportCertificateCompletedEventHandler ImportCertificateCompleted;

        /// <remarks/>
        public event CheckCertificateCompletedEventHandler CheckCertificateCompleted;

        /// <remarks/>
        public event GetDirectoryBrowseEnabledCompletedEventHandler GetDirectoryBrowseEnabledCompleted;

        /// <remarks/>
        public event SetDirectoryBrowseEnabledCompletedEventHandler SetDirectoryBrowseEnabledCompleted;

        /// <remarks/>
        public event ChangeSiteStateCompletedEventHandler ChangeSiteStateCompleted;

        /// <remarks/>
        public event GetSiteStateCompletedEventHandler GetSiteStateCompleted;

        /// <remarks/>
        public event GetSiteIdCompletedEventHandler GetSiteIdCompleted;

        /// <remarks/>
        public event GetSitesAccountsCompletedEventHandler GetSitesAccountsCompleted;

        /// <remarks/>
        public event SiteExistsCompletedEventHandler SiteExistsCompleted;

        /// <remarks/>
        public event GetSitesCompletedEventHandler GetSitesCompleted;

        /// <remarks/>
        public event GetSiteCompletedEventHandler GetSiteCompleted;

        /// <remarks/>
        public event GetSiteBindingsCompletedEventHandler GetSiteBindingsCompleted;

        /// <remarks/>
        public event CreateSiteCompletedEventHandler CreateSiteCompleted;

        /// <remarks/>
        public event UpdateSiteCompletedEventHandler UpdateSiteCompleted;

        /// <remarks/>
        public event UpdateSiteBindingsCompletedEventHandler UpdateSiteBindingsCompleted;

        /// <remarks/>
        public event DeleteSiteCompletedEventHandler DeleteSiteCompleted;

        /// <remarks/>
        public event ChangeAppPoolStateCompletedEventHandler ChangeAppPoolStateCompleted;

        /// <remarks/>
        public event GetAppPoolStateCompletedEventHandler GetAppPoolStateCompleted;

        /// <remarks/>
        public event CreateEnterpriseStorageAppVirtualDirectoryCompletedEventHandler CreateEnterpriseStorageAppVirtualDirectoryCompleted;

        /// <remarks/>
        public event VirtualDirectoryExistsCompletedEventHandler VirtualDirectoryExistsCompleted;

        /// <remarks/>
        public event GetVirtualDirectoriesCompletedEventHandler GetVirtualDirectoriesCompleted;

        /// <remarks/>
        public event GetVirtualDirectoryCompletedEventHandler GetVirtualDirectoryCompleted;

        /// <remarks/>
        public event CreateVirtualDirectoryCompletedEventHandler CreateVirtualDirectoryCompleted;

        /// <remarks/>
        public event UpdateVirtualDirectoryCompletedEventHandler UpdateVirtualDirectoryCompleted;

        /// <remarks/>
        public event DeleteVirtualDirectoryCompletedEventHandler DeleteVirtualDirectoryCompleted;

        /// <remarks/>
        public event AppVirtualDirectoryExistsCompletedEventHandler AppVirtualDirectoryExistsCompleted;

        /// <remarks/>
        public event GetAppVirtualDirectoriesCompletedEventHandler GetAppVirtualDirectoriesCompleted;

        /// <remarks/>
        public event GetAppVirtualDirectoryCompletedEventHandler GetAppVirtualDirectoryCompleted;

        /// <remarks/>
        public event CreateAppVirtualDirectoryCompletedEventHandler CreateAppVirtualDirectoryCompleted;

        /// <remarks/>
        public event UpdateAppVirtualDirectoryCompletedEventHandler UpdateAppVirtualDirectoryCompleted;

        /// <remarks/>
        public event DeleteAppVirtualDirectoryCompletedEventHandler DeleteAppVirtualDirectoryCompleted;

        /// <remarks/>
        public event IsFrontPageSystemInstalledCompletedEventHandler IsFrontPageSystemInstalledCompleted;

        /// <remarks/>
        public event IsFrontPageInstalledCompletedEventHandler IsFrontPageInstalledCompleted;

        /// <remarks/>
        public event InstallFrontPageCompletedEventHandler InstallFrontPageCompleted;

        /// <remarks/>
        public event UninstallFrontPageCompletedEventHandler UninstallFrontPageCompleted;

        /// <remarks/>
        public event ChangeFrontPagePasswordCompletedEventHandler ChangeFrontPagePasswordCompleted;

        /// <remarks/>
        public event IsColdFusionSystemInstalledCompletedEventHandler IsColdFusionSystemInstalledCompleted;

        /// <remarks/>
        public event GrantWebSiteAccessCompletedEventHandler GrantWebSiteAccessCompleted;

        /// <remarks/>
        public event InstallSecuredFoldersCompletedEventHandler InstallSecuredFoldersCompleted;

        /// <remarks/>
        public event UninstallSecuredFoldersCompletedEventHandler UninstallSecuredFoldersCompleted;

        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;

        /// <remarks/>
        public event GetFolderCompletedEventHandler GetFolderCompleted;

        /// <remarks/>
        public event UpdateFolderCompletedEventHandler UpdateFolderCompleted;

        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;

        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;

        /// <remarks/>
        public event GetUserCompletedEventHandler GetUserCompleted;

        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;

        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;

        /// <remarks/>
        public event GetGroupsCompletedEventHandler GetGroupsCompleted;

        /// <remarks/>
        public event GetGroupCompletedEventHandler GetGroupCompleted;

        /// <remarks/>
        public event UpdateGroupCompletedEventHandler UpdateGroupCompleted;

        /// <remarks/>
        public event DeleteGroupCompletedEventHandler DeleteGroupCompleted;

        /// <remarks/>
        public event GetHeliconApeStatusCompletedEventHandler GetHeliconApeStatusCompleted;

        /// <remarks/>
        public event InstallHeliconApeCompletedEventHandler InstallHeliconApeCompleted;

        /// <remarks/>
        public event EnableHeliconApeCompletedEventHandler EnableHeliconApeCompleted;

        /// <remarks/>
        public event DisableHeliconApeCompletedEventHandler DisableHeliconApeCompleted;

        /// <remarks/>
        public event GetHeliconApeFoldersCompletedEventHandler GetHeliconApeFoldersCompleted;

        /// <remarks/>
        public event GetHeliconApeHttpdFolderCompletedEventHandler GetHeliconApeHttpdFolderCompleted;

        /// <remarks/>
        public event GetHeliconApeFolderCompletedEventHandler GetHeliconApeFolderCompleted;

        /// <remarks/>
        public event UpdateHeliconApeFolderCompletedEventHandler UpdateHeliconApeFolderCompleted;

        /// <remarks/>
        public event UpdateHeliconApeHttpdFolderCompletedEventHandler UpdateHeliconApeHttpdFolderCompleted;

        /// <remarks/>
        public event DeleteHeliconApeFolderCompletedEventHandler DeleteHeliconApeFolderCompleted;

        /// <remarks/>
        public event GetHeliconApeUsersCompletedEventHandler GetHeliconApeUsersCompleted;

        /// <remarks/>
        public event GetHeliconApeUserCompletedEventHandler GetHeliconApeUserCompleted;

        /// <remarks/>
        public event UpdateHeliconApeUserCompletedEventHandler UpdateHeliconApeUserCompleted;

        /// <remarks/>
        public event DeleteHeliconApeUserCompletedEventHandler DeleteHeliconApeUserCompleted;

        /// <remarks/>
        public event GetHeliconApeGroupsCompletedEventHandler GetHeliconApeGroupsCompleted;

        /// <remarks/>
        public event GetHeliconApeGroupCompletedEventHandler GetHeliconApeGroupCompleted;

        /// <remarks/>
        public event UpdateHeliconApeGroupCompletedEventHandler UpdateHeliconApeGroupCompleted;

        /// <remarks/>
        public event GrantWebDeployPublishingAccessCompletedEventHandler GrantWebDeployPublishingAccessCompleted;

        /// <remarks/>
        public event RevokeWebDeployPublishingAccessCompletedEventHandler RevokeWebDeployPublishingAccessCompleted;

        /// <remarks/>
        public event DeleteHeliconApeGroupCompletedEventHandler DeleteHeliconApeGroupCompleted;

        /// <remarks/>
        public event GetZooApplicationsCompletedEventHandler GetZooApplicationsCompleted;

        /// <remarks/>
        public event SetZooEnvironmentVariableCompletedEventHandler SetZooEnvironmentVariableCompleted;

        /// <remarks/>
        public event SetZooConsoleEnabledCompletedEventHandler SetZooConsoleEnabledCompleted;

        /// <remarks/>
        public event SetZooConsoleDisabledCompletedEventHandler SetZooConsoleDisabledCompleted;

        /// <remarks/>
        public event CheckLoadUserProfileCompletedEventHandler CheckLoadUserProfileCompleted;

        /// <remarks/>
        public event EnableLoadUserProfileCompletedEventHandler EnableLoadUserProfileCompleted;

        /// <remarks/>
        public event InitFeedsCompletedEventHandler InitFeedsCompleted;

        /// <remarks/>
        public event SetResourceLanguageCompletedEventHandler SetResourceLanguageCompleted;

        /// <remarks/>
        public event GetGalleryLanguagesCompletedEventHandler GetGalleryLanguagesCompleted;

        /// <remarks/>
        public event GetGalleryCategoriesCompletedEventHandler GetGalleryCategoriesCompleted;

        /// <remarks/>
        public event GetGalleryApplicationsCompletedEventHandler GetGalleryApplicationsCompleted;

        /// <remarks/>
        public event GetGalleryApplicationsFilteredCompletedEventHandler GetGalleryApplicationsFilteredCompleted;

        /// <remarks/>
        public event IsMsDeployInstalledCompletedEventHandler IsMsDeployInstalledCompleted;

        /// <remarks/>
        public event GetGalleryApplicationCompletedEventHandler GetGalleryApplicationCompleted;

        /// <remarks/>
        public event GetGalleryApplicationStatusCompletedEventHandler GetGalleryApplicationStatusCompleted;

        /// <remarks/>
        public event DownloadGalleryApplicationCompletedEventHandler DownloadGalleryApplicationCompleted;

        /// <remarks/>
        public event GetGalleryApplicationParametersCompletedEventHandler GetGalleryApplicationParametersCompleted;

        /// <remarks/>
        public event InstallGalleryApplicationCompletedEventHandler InstallGalleryApplicationCompleted;

        /// <remarks/>
        public event CheckWebManagementAccountExistsCompletedEventHandler CheckWebManagementAccountExistsCompleted;

        /// <remarks/>
        public event CheckWebManagementPasswordComplexityCompletedEventHandler CheckWebManagementPasswordComplexityCompleted;

        /// <remarks/>
        public event GrantWebManagementAccessCompletedEventHandler GrantWebManagementAccessCompleted;

        /// <remarks/>
        public event RevokeWebManagementAccessCompletedEventHandler RevokeWebManagementAccessCompleted;

        /// <remarks/>
        public event ChangeWebManagementAccessPasswordCompletedEventHandler ChangeWebManagementAccessPasswordCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/generateCSR", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate generateCSR(SSLCertificate certificate)
        {
            object[] results = this.Invoke("generateCSR", new object[] {
                        certificate});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingenerateCSR(SSLCertificate certificate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("generateCSR", new object[] {
                        certificate}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndgenerateCSR(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void generateCSRAsync(SSLCertificate certificate)
        {
            this.generateCSRAsync(certificate, null);
        }

        /// <remarks/>
        public void generateCSRAsync(SSLCertificate certificate, object userState)
        {
            if ((this.generateCSROperationCompleted == null))
            {
                this.generateCSROperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateCSROperationCompleted);
            }
            this.InvokeAsync("generateCSR", new object[] {
                        certificate}, this.generateCSROperationCompleted, userState);
        }

        private void OngenerateCSROperationCompleted(object arg)
        {
            if ((this.generateCSRCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateCSRCompleted(this, new generateCSRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/generateRenewalCSR", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate generateRenewalCSR(SSLCertificate certificate)
        {
            object[] results = this.Invoke("generateRenewalCSR", new object[] {
                        certificate});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingenerateRenewalCSR(SSLCertificate certificate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("generateRenewalCSR", new object[] {
                        certificate}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndgenerateRenewalCSR(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void generateRenewalCSRAsync(SSLCertificate certificate)
        {
            this.generateRenewalCSRAsync(certificate, null);
        }

        /// <remarks/>
        public void generateRenewalCSRAsync(SSLCertificate certificate, object userState)
        {
            if ((this.generateRenewalCSROperationCompleted == null))
            {
                this.generateRenewalCSROperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateRenewalCSROperationCompleted);
            }
            this.InvokeAsync("generateRenewalCSR", new object[] {
                        certificate}, this.generateRenewalCSROperationCompleted, userState);
        }

        private void OngenerateRenewalCSROperationCompleted(object arg)
        {
            if ((this.generateRenewalCSRCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateRenewalCSRCompleted(this, new generateRenewalCSRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/getCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate getCertificate(WebSite site)
        {
            object[] results = this.Invoke("getCertificate", new object[] {
                        site});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetCertificate(WebSite site, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getCertificate", new object[] {
                        site}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndgetCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void getCertificateAsync(WebSite site)
        {
            this.getCertificateAsync(site, null);
        }

        /// <remarks/>
        public void getCertificateAsync(WebSite site, object userState)
        {
            if ((this.getCertificateOperationCompleted == null))
            {
                this.getCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCertificateOperationCompleted);
            }
            this.InvokeAsync("getCertificate", new object[] {
                        site}, this.getCertificateOperationCompleted, userState);
        }

        private void OngetCertificateOperationCompleted(object arg)
        {
            if ((this.getCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCertificateCompleted(this, new getCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/installCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate installCertificate(SSLCertificate certificate, WebSite website)
        {
            object[] results = this.Invoke("installCertificate", new object[] {
                        certificate,
                        website});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegininstallCertificate(SSLCertificate certificate, WebSite website, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("installCertificate", new object[] {
                        certificate,
                        website}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndinstallCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void installCertificateAsync(SSLCertificate certificate, WebSite website)
        {
            this.installCertificateAsync(certificate, website, null);
        }

        /// <remarks/>
        public void installCertificateAsync(SSLCertificate certificate, WebSite website, object userState)
        {
            if ((this.installCertificateOperationCompleted == null))
            {
                this.installCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OninstallCertificateOperationCompleted);
            }
            this.InvokeAsync("installCertificate", new object[] {
                        certificate,
                        website}, this.installCertificateOperationCompleted, userState);
        }

        private void OninstallCertificateOperationCompleted(object arg)
        {
            if ((this.installCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.installCertificateCompleted(this, new installCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        // RB Added For LetsEncrypt
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InstallLetsEncryptCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LetsEncryptResult InstallLetsEncryptCertificate(WebSite webSite, string hostName, string[] SANs, string vaultProfile, string email)
        {
            return (LetsEncryptResult)base.Invoke("InstallLetsEncryptCertificate", new object[] { webSite, hostName, SANs, vaultProfile, email })[0];
        }

        public void InstallLetsEncryptCertificateAsync(WebSite webSite, string hostName, string[] SANs, string vaultProfile, string email)
        {
            this.InstallLetsEncryptCertificateAsync(webSite, hostName, SANs, vaultProfile, email, null);
        }

        public void InstallLetsEncryptCertificateAsync(WebSite webSite, string hostName, string[] SANs, string vaultProfile, string email, object userState)
        {
            if (this.InstallLetsEncryptCertificateOperationCompleted == null)
            {
                this.InstallLetsEncryptCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallLetsEncryptCertificateOperationCompleted);
            }
            base.InvokeAsync("InstallLetsEncryptCertificate", new object[] { webSite, hostName, SANs, vaultProfile, email }, this.InstallLetsEncryptCertificateOperationCompleted, userState);
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/installPFX", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate installPFX([System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] certificate, string password, WebSite website)
        {
            object[] results = this.Invoke("installPFX", new object[] {
                        certificate,
                        password,
                        website});
            return ((SSLCertificate)(results[0]));
        }

        /// RB Added For LetsEncrypt
        public IAsyncResult BeginInstallLetsEncryptCertificate(WebSite webSite, string hostName, string[] SANs, string vaultProfile, string email, AsyncCallback callback, object asyncState)
        {
            return base.BeginInvoke("InstallLetsEncryptCertificate", new object[] { webSite, hostName, SANs, vaultProfile, email }, callback, asyncState);
        }

        /// <remarks/>
        public System.IAsyncResult BegininstallPFX(byte[] certificate, string password, WebSite website, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("installPFX", new object[] {
                        certificate,
                        password,
                        website}, callback, asyncState);
        }

        /// RB Added For LetsEncrypt
        public LetsEncryptResult EndInstallLetsEncryptCertificate(IAsyncResult asyncResult)
        {
            return (LetsEncryptResult)base.EndInvoke(asyncResult)[0];
        }

        /// <remarks/>
        public SSLCertificate EndinstallPFX(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void installPFXAsync(byte[] certificate, string password, WebSite website)
        {
            this.installPFXAsync(certificate, password, website, null);
        }

        /// <remarks/>
        public void installPFXAsync(byte[] certificate, string password, WebSite website, object userState)
        {
            if ((this.installPFXOperationCompleted == null))
            {
                this.installPFXOperationCompleted = new System.Threading.SendOrPostCallback(this.OninstallPFXOperationCompleted);
            }
            this.InvokeAsync("installPFX", new object[] {
                        certificate,
                        password,
                        website}, this.installPFXOperationCompleted, userState);
        }

        // RB Added for LetsEncrypt
        private void OnInstallLetsEncryptCertificateOperationCompleted(object arg)
        {
            if (this.InstallLetsEncryptCertificateCompleted != null)
            {
                InvokeCompletedEventArgs invokeCompletedEventArg = (InvokeCompletedEventArgs)arg;
                this.InstallLetsEncryptCertificateCompleted(this, new InstallLetsEncryptCertificateCompletedEventArgs(invokeCompletedEventArg.Results, invokeCompletedEventArg.Error, invokeCompletedEventArg.Cancelled, invokeCompletedEventArg.UserState));
            }
        }

        private void OninstallPFXOperationCompleted(object arg)
        {
            if ((this.installPFXCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.installPFXCompleted(this, new installPFXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/exportCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] exportCertificate(string serialNumber, string password)
        {
            object[] results = this.Invoke("exportCertificate", new object[] {
                        serialNumber,
                        password});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginexportCertificate(string serialNumber, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("exportCertificate", new object[] {
                        serialNumber,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndexportCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void exportCertificateAsync(string serialNumber, string password)
        {
            this.exportCertificateAsync(serialNumber, password, null);
        }

        /// <remarks/>
        public void exportCertificateAsync(string serialNumber, string password, object userState)
        {
            if ((this.exportCertificateOperationCompleted == null))
            {
                this.exportCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexportCertificateOperationCompleted);
            }
            this.InvokeAsync("exportCertificate", new object[] {
                        serialNumber,
                        password}, this.exportCertificateOperationCompleted, userState);
        }

        private void OnexportCertificateOperationCompleted(object arg)
        {
            if ((this.exportCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.exportCertificateCompleted(this, new exportCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/getServerCertificates", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate[] getServerCertificates()
        {
            object[] results = this.Invoke("getServerCertificates", new object[0]);
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetServerCertificates(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getServerCertificates", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate[] EndgetServerCertificates(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public void getServerCertificatesAsync()
        {
            this.getServerCertificatesAsync(null);
        }

        /// <remarks/>
        public void getServerCertificatesAsync(object userState)
        {
            if ((this.getServerCertificatesOperationCompleted == null))
            {
                this.getServerCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerCertificatesOperationCompleted);
            }
            this.InvokeAsync("getServerCertificates", new object[0], this.getServerCertificatesOperationCompleted, userState);
        }

        private void OngetServerCertificatesOperationCompleted(object arg)
        {
            if ((this.getServerCertificatesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerCertificatesCompleted(this, new getServerCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteCertificate(SSLCertificate certificate, WebSite website)
        {
            object[] results = this.Invoke("DeleteCertificate", new object[] {
                        certificate,
                        website});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificate(SSLCertificate certificate, WebSite website, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteCertificate", new object[] {
                        certificate,
                        website}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndDeleteCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void DeleteCertificateAsync(SSLCertificate certificate, WebSite website)
        {
            this.DeleteCertificateAsync(certificate, website, null);
        }

        /// <remarks/>
        public void DeleteCertificateAsync(SSLCertificate certificate, WebSite website, object userState)
        {
            if ((this.DeleteCertificateOperationCompleted == null))
            {
                this.DeleteCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificate", new object[] {
                        certificate,
                        website}, this.DeleteCertificateOperationCompleted, userState);
        }

        private void OnDeleteCertificateOperationCompleted(object arg)
        {
            if ((this.DeleteCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateCompleted(this, new DeleteCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ImportCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate ImportCertificate(WebSite website)
        {
            object[] results = this.Invoke("ImportCertificate", new object[] {
                        website});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportCertificate(WebSite website, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportCertificate", new object[] {
                        website}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndImportCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void ImportCertificateAsync(WebSite website)
        {
            this.ImportCertificateAsync(website, null);
        }

        /// <remarks/>
        public void ImportCertificateAsync(WebSite website, object userState)
        {
            if ((this.ImportCertificateOperationCompleted == null))
            {
                this.ImportCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCertificateOperationCompleted);
            }
            this.InvokeAsync("ImportCertificate", new object[] {
                        website}, this.ImportCertificateOperationCompleted, userState);
        }

        private void OnImportCertificateOperationCompleted(object arg)
        {
            if ((this.ImportCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCertificateCompleted(this, new ImportCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckCertificate", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckCertificate(WebSite webSite)
        {
            object[] results = this.Invoke("CheckCertificate", new object[] {
                        webSite});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckCertificate(WebSite webSite, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckCertificate", new object[] {
                        webSite}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCheckCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CheckCertificateAsync(WebSite webSite)
        {
            this.CheckCertificateAsync(webSite, null);
        }

        /// <remarks/>
        public void CheckCertificateAsync(WebSite webSite, object userState)
        {
            if ((this.CheckCertificateOperationCompleted == null))
            {
                this.CheckCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCertificateOperationCompleted);
            }
            this.InvokeAsync("CheckCertificate", new object[] {
                        webSite}, this.CheckCertificateOperationCompleted, userState);
        }

        private void OnCheckCertificateOperationCompleted(object arg)
        {
            if ((this.CheckCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCertificateCompleted(this, new CheckCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetDirectoryBrowseEnabled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDirectoryBrowseEnabled(string siteId)
        {
            object[] results = this.Invoke("GetDirectoryBrowseEnabled", new object[] {
                        siteId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetDirectoryBrowseEnabled(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetDirectoryBrowseEnabled", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndGetDirectoryBrowseEnabled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void GetDirectoryBrowseEnabledAsync(string siteId)
        {
            this.GetDirectoryBrowseEnabledAsync(siteId, null);
        }

        /// <remarks/>
        public void GetDirectoryBrowseEnabledAsync(string siteId, object userState)
        {
            if ((this.GetDirectoryBrowseEnabledOperationCompleted == null))
            {
                this.GetDirectoryBrowseEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirectoryBrowseEnabledOperationCompleted);
            }
            this.InvokeAsync("GetDirectoryBrowseEnabled", new object[] {
                        siteId}, this.GetDirectoryBrowseEnabledOperationCompleted, userState);
        }

        private void OnGetDirectoryBrowseEnabledOperationCompleted(object arg)
        {
            if ((this.GetDirectoryBrowseEnabledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirectoryBrowseEnabledCompleted(this, new GetDirectoryBrowseEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetDirectoryBrowseEnabled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDirectoryBrowseEnabled(string siteId, bool enabled)
        {
            this.Invoke("SetDirectoryBrowseEnabled", new object[] {
                        siteId,
                        enabled});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetDirectoryBrowseEnabled(string siteId, bool enabled, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetDirectoryBrowseEnabled", new object[] {
                        siteId,
                        enabled}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetDirectoryBrowseEnabled(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetDirectoryBrowseEnabledAsync(string siteId, bool enabled)
        {
            this.SetDirectoryBrowseEnabledAsync(siteId, enabled, null);
        }

        /// <remarks/>
        public void SetDirectoryBrowseEnabledAsync(string siteId, bool enabled, object userState)
        {
            if ((this.SetDirectoryBrowseEnabledOperationCompleted == null))
            {
                this.SetDirectoryBrowseEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDirectoryBrowseEnabledOperationCompleted);
            }
            this.InvokeAsync("SetDirectoryBrowseEnabled", new object[] {
                        siteId,
                        enabled}, this.SetDirectoryBrowseEnabledOperationCompleted, userState);
        }

        private void OnSetDirectoryBrowseEnabledOperationCompleted(object arg)
        {
            if ((this.SetDirectoryBrowseEnabledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDirectoryBrowseEnabledCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ChangeSiteState", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeSiteState(string siteId, ServerState state)
        {
            this.Invoke("ChangeSiteState", new object[] {
                        siteId,
                        state});
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeSiteState(string siteId, ServerState state, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeSiteState", new object[] {
                        siteId,
                        state}, callback, asyncState);
        }

        /// <remarks/>
        public void EndChangeSiteState(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ChangeSiteStateAsync(string siteId, ServerState state)
        {
            this.ChangeSiteStateAsync(siteId, state, null);
        }

        /// <remarks/>
        public void ChangeSiteStateAsync(string siteId, ServerState state, object userState)
        {
            if ((this.ChangeSiteStateOperationCompleted == null))
            {
                this.ChangeSiteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSiteStateOperationCompleted);
            }
            this.InvokeAsync("ChangeSiteState", new object[] {
                        siteId,
                        state}, this.ChangeSiteStateOperationCompleted, userState);
        }

        private void OnChangeSiteStateOperationCompleted(object arg)
        {
            if ((this.ChangeSiteStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSiteStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSiteState", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerState GetSiteState(string siteId)
        {
            object[] results = this.Invoke("GetSiteState", new object[] {
                        siteId});
            return ((ServerState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteState(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteState", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public ServerState EndGetSiteState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerState)(results[0]));
        }

        /// <remarks/>
        public void GetSiteStateAsync(string siteId)
        {
            this.GetSiteStateAsync(siteId, null);
        }

        /// <remarks/>
        public void GetSiteStateAsync(string siteId, object userState)
        {
            if ((this.GetSiteStateOperationCompleted == null))
            {
                this.GetSiteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteStateOperationCompleted);
            }
            this.InvokeAsync("GetSiteState", new object[] {
                        siteId}, this.GetSiteStateOperationCompleted, userState);
        }

        private void OnGetSiteStateOperationCompleted(object arg)
        {
            if ((this.GetSiteStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteStateCompleted(this, new GetSiteStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSiteId", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSiteId(string siteName)
        {
            object[] results = this.Invoke("GetSiteId", new object[] {
                        siteName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteId(string siteName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteId", new object[] {
                        siteName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetSiteId(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetSiteIdAsync(string siteName)
        {
            this.GetSiteIdAsync(siteName, null);
        }

        /// <remarks/>
        public void GetSiteIdAsync(string siteName, object userState)
        {
            if ((this.GetSiteIdOperationCompleted == null))
            {
                this.GetSiteIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteIdOperationCompleted);
            }
            this.InvokeAsync("GetSiteId", new object[] {
                        siteName}, this.GetSiteIdOperationCompleted, userState);
        }

        private void OnGetSiteIdOperationCompleted(object arg)
        {
            if ((this.GetSiteIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteIdCompleted(this, new GetSiteIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSitesAccounts", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSitesAccounts(string[] siteIds)
        {
            object[] results = this.Invoke("GetSitesAccounts", new object[] {
                        siteIds});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSitesAccounts(string[] siteIds, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSitesAccounts", new object[] {
                        siteIds}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetSitesAccounts(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void GetSitesAccountsAsync(string[] siteIds)
        {
            this.GetSitesAccountsAsync(siteIds, null);
        }

        /// <remarks/>
        public void GetSitesAccountsAsync(string[] siteIds, object userState)
        {
            if ((this.GetSitesAccountsOperationCompleted == null))
            {
                this.GetSitesAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSitesAccountsOperationCompleted);
            }
            this.InvokeAsync("GetSitesAccounts", new object[] {
                        siteIds}, this.GetSitesAccountsOperationCompleted, userState);
        }

        private void OnGetSitesAccountsOperationCompleted(object arg)
        {
            if ((this.GetSitesAccountsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSitesAccountsCompleted(this, new GetSitesAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SiteExists", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SiteExists(string siteId)
        {
            object[] results = this.Invoke("SiteExists", new object[] {
                        siteId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSiteExists(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SiteExists", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndSiteExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void SiteExistsAsync(string siteId)
        {
            this.SiteExistsAsync(siteId, null);
        }

        /// <remarks/>
        public void SiteExistsAsync(string siteId, object userState)
        {
            if ((this.SiteExistsOperationCompleted == null))
            {
                this.SiteExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSiteExistsOperationCompleted);
            }
            this.InvokeAsync("SiteExists", new object[] {
                        siteId}, this.SiteExistsOperationCompleted, userState);
        }

        private void OnSiteExistsOperationCompleted(object arg)
        {
            if ((this.SiteExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SiteExistsCompleted(this, new SiteExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSites", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSites()
        {
            object[] results = this.Invoke("GetSites", new object[0]);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSites(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSites", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetSites(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void GetSitesAsync()
        {
            this.GetSitesAsync(null);
        }

        /// <remarks/>
        public void GetSitesAsync(object userState)
        {
            if ((this.GetSitesOperationCompleted == null))
            {
                this.GetSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSitesOperationCompleted);
            }
            this.InvokeAsync("GetSites", new object[0], this.GetSitesOperationCompleted, userState);
        }

        private void OnGetSitesOperationCompleted(object arg)
        {
            if ((this.GetSitesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSitesCompleted(this, new GetSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebSite GetSite(string siteId)
        {
            object[] results = this.Invoke("GetSite", new object[] {
                        siteId});
            return ((WebSite)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSite(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSite", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebSite EndGetSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebSite)(results[0]));
        }

        /// <remarks/>
        public void GetSiteAsync(string siteId)
        {
            this.GetSiteAsync(siteId, null);
        }

        /// <remarks/>
        public void GetSiteAsync(string siteId, object userState)
        {
            if ((this.GetSiteOperationCompleted == null))
            {
                this.GetSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteOperationCompleted);
            }
            this.InvokeAsync("GetSite", new object[] {
                        siteId}, this.GetSiteOperationCompleted, userState);
        }

        private void OnGetSiteOperationCompleted(object arg)
        {
            if ((this.GetSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCompleted(this, new GetSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetSiteBindings", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerBinding[] GetSiteBindings(string siteId)
        {
            object[] results = this.Invoke("GetSiteBindings", new object[] {
                        siteId});
            return ((ServerBinding[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteBindings(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteBindings", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public ServerBinding[] EndGetSiteBindings(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerBinding[])(results[0]));
        }

        /// <remarks/>
        public void GetSiteBindingsAsync(string siteId)
        {
            this.GetSiteBindingsAsync(siteId, null);
        }

        /// <remarks/>
        public void GetSiteBindingsAsync(string siteId, object userState)
        {
            if ((this.GetSiteBindingsOperationCompleted == null))
            {
                this.GetSiteBindingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteBindingsOperationCompleted);
            }
            this.InvokeAsync("GetSiteBindings", new object[] {
                        siteId}, this.GetSiteBindingsOperationCompleted, userState);
        }

        private void OnGetSiteBindingsOperationCompleted(object arg)
        {
            if ((this.GetSiteBindingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteBindingsCompleted(this, new GetSiteBindingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CreateSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateSite(WebSite site)
        {
            object[] results = this.Invoke("CreateSite", new object[] {
                        site});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateSite(WebSite site, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateSite", new object[] {
                        site}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCreateSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CreateSiteAsync(WebSite site)
        {
            this.CreateSiteAsync(site, null);
        }

        /// <remarks/>
        public void CreateSiteAsync(WebSite site, object userState)
        {
            if ((this.CreateSiteOperationCompleted == null))
            {
                this.CreateSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSiteOperationCompleted);
            }
            this.InvokeAsync("CreateSite", new object[] {
                        site}, this.CreateSiteOperationCompleted, userState);
        }

        private void OnCreateSiteOperationCompleted(object arg)
        {
            if ((this.CreateSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSiteCompleted(this, new CreateSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSite(WebSite site)
        {
            this.Invoke("UpdateSite", new object[] {
                        site});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSite(WebSite site, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSite", new object[] {
                        site}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateSite(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateSiteAsync(WebSite site)
        {
            this.UpdateSiteAsync(site, null);
        }

        /// <remarks/>
        public void UpdateSiteAsync(WebSite site, object userState)
        {
            if ((this.UpdateSiteOperationCompleted == null))
            {
                this.UpdateSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSiteOperationCompleted);
            }
            this.InvokeAsync("UpdateSite", new object[] {
                        site}, this.UpdateSiteOperationCompleted, userState);
        }

        private void OnUpdateSiteOperationCompleted(object arg)
        {
            if ((this.UpdateSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateSiteBindings", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSiteBindings(string siteId, ServerBinding[] bindings, bool emptyBindingsAllowed)
        {
            this.Invoke("UpdateSiteBindings", new object[] {
                        siteId,
                        bindings,
                        emptyBindingsAllowed});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSiteBindings(string siteId, ServerBinding[] bindings, bool emptyBindingsAllowed, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSiteBindings", new object[] {
                        siteId,
                        bindings,
                        emptyBindingsAllowed}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateSiteBindings(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateSiteBindingsAsync(string siteId, ServerBinding[] bindings, bool emptyBindingsAllowed)
        {
            this.UpdateSiteBindingsAsync(siteId, bindings, emptyBindingsAllowed, null);
        }

        /// <remarks/>
        public void UpdateSiteBindingsAsync(string siteId, ServerBinding[] bindings, bool emptyBindingsAllowed, object userState)
        {
            if ((this.UpdateSiteBindingsOperationCompleted == null))
            {
                this.UpdateSiteBindingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSiteBindingsOperationCompleted);
            }
            this.InvokeAsync("UpdateSiteBindings", new object[] {
                        siteId,
                        bindings,
                        emptyBindingsAllowed}, this.UpdateSiteBindingsOperationCompleted, userState);
        }

        private void OnUpdateSiteBindingsOperationCompleted(object arg)
        {
            if ((this.UpdateSiteBindingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSiteBindingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteSite", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSite(string siteId)
        {
            this.Invoke("DeleteSite", new object[] {
                        siteId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSite(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSite", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteSite(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteSiteAsync(string siteId)
        {
            this.DeleteSiteAsync(siteId, null);
        }

        /// <remarks/>
        public void DeleteSiteAsync(string siteId, object userState)
        {
            if ((this.DeleteSiteOperationCompleted == null))
            {
                this.DeleteSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSiteOperationCompleted);
            }
            this.InvokeAsync("DeleteSite", new object[] {
                        siteId}, this.DeleteSiteOperationCompleted, userState);
        }

        private void OnDeleteSiteOperationCompleted(object arg)
        {
            if ((this.DeleteSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSiteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ChangeAppPoolState", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeAppPoolState(string siteId, AppPoolState state)
        {
            this.Invoke("ChangeAppPoolState", new object[] {
                        siteId,
                        state});
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeAppPoolState(string siteId, AppPoolState state, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeAppPoolState", new object[] {
                        siteId,
                        state}, callback, asyncState);
        }

        /// <remarks/>
        public void EndChangeAppPoolState(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ChangeAppPoolStateAsync(string siteId, AppPoolState state)
        {
            this.ChangeAppPoolStateAsync(siteId, state, null);
        }

        /// <remarks/>
        public void ChangeAppPoolStateAsync(string siteId, AppPoolState state, object userState)
        {
            if ((this.ChangeAppPoolStateOperationCompleted == null))
            {
                this.ChangeAppPoolStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAppPoolStateOperationCompleted);
            }
            this.InvokeAsync("ChangeAppPoolState", new object[] {
                        siteId,
                        state}, this.ChangeAppPoolStateOperationCompleted, userState);
        }

        private void OnChangeAppPoolStateOperationCompleted(object arg)
        {
            if ((this.ChangeAppPoolStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAppPoolStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetAppPoolState", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AppPoolState GetAppPoolState(string siteId)
        {
            object[] results = this.Invoke("GetAppPoolState", new object[] {
                        siteId});
            return ((AppPoolState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAppPoolState(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAppPoolState", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public AppPoolState EndGetAppPoolState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((AppPoolState)(results[0]));
        }

        /// <remarks/>
        public void GetAppPoolStateAsync(string siteId)
        {
            this.GetAppPoolStateAsync(siteId, null);
        }

        /// <remarks/>
        public void GetAppPoolStateAsync(string siteId, object userState)
        {
            if ((this.GetAppPoolStateOperationCompleted == null))
            {
                this.GetAppPoolStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppPoolStateOperationCompleted);
            }
            this.InvokeAsync("GetAppPoolState", new object[] {
                        siteId}, this.GetAppPoolStateOperationCompleted, userState);
        }

        private void OnGetAppPoolStateOperationCompleted(object arg)
        {
            if ((this.GetAppPoolStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppPoolStateCompleted(this, new GetAppPoolStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


























        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/VirtualDirectoryExists", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VirtualDirectoryExists(string siteId, string directoryName)
        {
            object[] results = this.Invoke("VirtualDirectoryExists", new object[] {
                        siteId,
                        directoryName});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginVirtualDirectoryExists(string siteId, string directoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("VirtualDirectoryExists", new object[] {
                        siteId,
                        directoryName}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndVirtualDirectoryExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void VirtualDirectoryExistsAsync(string siteId, string directoryName)
        {
            this.VirtualDirectoryExistsAsync(siteId, directoryName, null);
        }

        /// <remarks/>
        public void VirtualDirectoryExistsAsync(string siteId, string directoryName, object userState)
        {
            if ((this.VirtualDirectoryExistsOperationCompleted == null))
            {
                this.VirtualDirectoryExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVirtualDirectoryExistsOperationCompleted);
            }
            this.InvokeAsync("VirtualDirectoryExists", new object[] {
                        siteId,
                        directoryName}, this.VirtualDirectoryExistsOperationCompleted, userState);
        }

        private void OnVirtualDirectoryExistsOperationCompleted(object arg)
        {
            if ((this.VirtualDirectoryExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VirtualDirectoryExistsCompleted(this, new VirtualDirectoryExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetVirtualDirectories", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebVirtualDirectory[] GetVirtualDirectories(string siteId)
        {
            object[] results = this.Invoke("GetVirtualDirectories", new object[] {
                        siteId});
            return ((WebVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualDirectories(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetVirtualDirectories", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebVirtualDirectory[] EndGetVirtualDirectories(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public void GetVirtualDirectoriesAsync(string siteId)
        {
            this.GetVirtualDirectoriesAsync(siteId, null);
        }

        /// <remarks/>
        public void GetVirtualDirectoriesAsync(string siteId, object userState)
        {
            if ((this.GetVirtualDirectoriesOperationCompleted == null))
            {
                this.GetVirtualDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetVirtualDirectories", new object[] {
                        siteId}, this.GetVirtualDirectoriesOperationCompleted, userState);
        }

        private void OnGetVirtualDirectoriesOperationCompleted(object arg)
        {
            if ((this.GetVirtualDirectoriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualDirectoriesCompleted(this, new GetVirtualDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebVirtualDirectory GetVirtualDirectory(string siteId, string directoryName)
        {
            object[] results = this.Invoke("GetVirtualDirectory", new object[] {
                        siteId,
                        directoryName});
            return ((WebVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualDirectory(string siteId, string directoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, callback, asyncState);
        }

        /// <remarks/>
        public WebVirtualDirectory EndGetVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public void GetVirtualDirectoryAsync(string siteId, string directoryName)
        {
            this.GetVirtualDirectoryAsync(siteId, directoryName, null);
        }

        /// <remarks/>
        public void GetVirtualDirectoryAsync(string siteId, string directoryName, object userState)
        {
            if ((this.GetVirtualDirectoryOperationCompleted == null))
            {
                this.GetVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, this.GetVirtualDirectoryOperationCompleted, userState);
        }

        private void OnGetVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.GetVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualDirectoryCompleted(this, new GetVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CreateVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateVirtualDirectory(string siteId, WebVirtualDirectory directory)
        {
            this.Invoke("CreateVirtualDirectory", new object[] {
                        siteId,
                        directory});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateVirtualDirectory(string siteId, WebVirtualDirectory directory, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateVirtualDirectory", new object[] {
                        siteId,
                        directory}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateVirtualDirectoryAsync(string siteId, WebVirtualDirectory directory)
        {
            this.CreateVirtualDirectoryAsync(siteId, directory, null);
        }

        /// <remarks/>
        public void CreateVirtualDirectoryAsync(string siteId, WebVirtualDirectory directory, object userState)
        {
            if ((this.CreateVirtualDirectoryOperationCompleted == null))
            {
                this.CreateVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("CreateVirtualDirectory", new object[] {
                        siteId,
                        directory}, this.CreateVirtualDirectoryOperationCompleted, userState);
        }

        private void OnCreateVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.CreateVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateVirtualDirectory(string siteId, WebVirtualDirectory directory)
        {
            this.Invoke("UpdateVirtualDirectory", new object[] {
                        siteId,
                        directory});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateVirtualDirectory(string siteId, WebVirtualDirectory directory, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateVirtualDirectory", new object[] {
                        siteId,
                        directory}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateVirtualDirectoryAsync(string siteId, WebVirtualDirectory directory)
        {
            this.UpdateVirtualDirectoryAsync(siteId, directory, null);
        }

        /// <remarks/>
        public void UpdateVirtualDirectoryAsync(string siteId, WebVirtualDirectory directory, object userState)
        {
            if ((this.UpdateVirtualDirectoryOperationCompleted == null))
            {
                this.UpdateVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("UpdateVirtualDirectory", new object[] {
                        siteId,
                        directory}, this.UpdateVirtualDirectoryOperationCompleted, userState);
        }

        private void OnUpdateVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.UpdateVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteVirtualDirectory(string siteId, string directoryName)
        {
            this.Invoke("DeleteVirtualDirectory", new object[] {
                        siteId,
                        directoryName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteVirtualDirectory(string siteId, string directoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteVirtualDirectoryAsync(string siteId, string directoryName)
        {
            this.DeleteVirtualDirectoryAsync(siteId, directoryName, null);
        }

        /// <remarks/>
        public void DeleteVirtualDirectoryAsync(string siteId, string directoryName, object userState)
        {
            if ((this.DeleteVirtualDirectoryOperationCompleted == null))
            {
                this.DeleteVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("DeleteVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, this.DeleteVirtualDirectoryOperationCompleted, userState);
        }

        private void OnDeleteVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.DeleteVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
























        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/AppVirtualDirectoryExists", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AppVirtualDirectoryExists(string siteId, string directoryName)
        {
            object[] results = this.Invoke("AppVirtualDirectoryExists", new object[] {
                        siteId,
                        directoryName});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAppVirtualDirectoryExists(string siteId, string directoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AppVirtualDirectoryExists", new object[] {
                        siteId,
                        directoryName}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndAppVirtualDirectoryExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void AppVirtualDirectoryExistsAsync(string siteId, string directoryName)
        {
            this.AppVirtualDirectoryExistsAsync(siteId, directoryName, null);
        }

        /// <remarks/>
        public void AppVirtualDirectoryExistsAsync(string siteId, string directoryName, object userState)
        {
            if ((this.AppVirtualDirectoryExistsOperationCompleted == null))
            {
                this.AppVirtualDirectoryExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppVirtualDirectoryExistsOperationCompleted);
            }
            this.InvokeAsync("AppVirtualDirectoryExists", new object[] {
                        siteId,
                        directoryName}, this.AppVirtualDirectoryExistsOperationCompleted, userState);
        }

        private void OnAppVirtualDirectoryExistsOperationCompleted(object arg)
        {
            if ((this.AppVirtualDirectoryExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppVirtualDirectoryExistsCompleted(this, new AppVirtualDirectoryExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetAppVirtualDirectories", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebAppVirtualDirectory[] GetAppVirtualDirectories(string siteId)
        {
            object[] results = this.Invoke("GetAppVirtualDirectories", new object[] {
                        siteId});
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAppVirtualDirectories(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAppVirtualDirectories", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] EndGetAppVirtualDirectories(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public void GetAppVirtualDirectoriesAsync(string siteId)
        {
            this.GetAppVirtualDirectoriesAsync(siteId, null);
        }

        /// <remarks/>
        public void GetAppVirtualDirectoriesAsync(string siteId, object userState)
        {
            if ((this.GetAppVirtualDirectoriesOperationCompleted == null))
            {
                this.GetAppVirtualDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppVirtualDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetAppVirtualDirectories", new object[] {
                        siteId}, this.GetAppVirtualDirectoriesOperationCompleted, userState);
        }

        private void OnGetAppVirtualDirectoriesOperationCompleted(object arg)
        {
            if ((this.GetAppVirtualDirectoriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppVirtualDirectoriesCompleted(this, new GetAppVirtualDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebAppVirtualDirectory GetAppVirtualDirectory(string siteId, string directoryName)
        {
            object[] results = this.Invoke("GetAppVirtualDirectory", new object[] {
                        siteId,
                        directoryName});
            return ((WebAppVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAppVirtualDirectory(string siteId, string directoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAppVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, callback, asyncState);
        }

        /// <remarks/>
        public WebAppVirtualDirectory EndGetAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebAppVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public void GetAppVirtualDirectoryAsync(string siteId, string directoryName)
        {
            this.GetAppVirtualDirectoryAsync(siteId, directoryName, null);
        }

        /// <remarks/>
        public void GetAppVirtualDirectoryAsync(string siteId, string directoryName, object userState)
        {
            if ((this.GetAppVirtualDirectoryOperationCompleted == null))
            {
                this.GetAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetAppVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, this.GetAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnGetAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.GetAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppVirtualDirectoryCompleted(this, new GetAppVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CreateAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateAppVirtualDirectory(string siteId, WebAppVirtualDirectory directory)
        {
            this.Invoke("CreateAppVirtualDirectory", new object[] {
                        siteId,
                        directory});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateAppVirtualDirectory(string siteId, WebAppVirtualDirectory directory, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateAppVirtualDirectory", new object[] {
                        siteId,
                        directory}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateAppVirtualDirectoryAsync(string siteId, WebAppVirtualDirectory directory)
        {
            this.CreateAppVirtualDirectoryAsync(siteId, directory, null);
        }

        /// <remarks/>
        public void CreateAppVirtualDirectoryAsync(string siteId, WebAppVirtualDirectory directory, object userState)
        {
            if ((this.CreateAppVirtualDirectoryOperationCompleted == null))
            {
                this.CreateAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("CreateAppVirtualDirectory", new object[] {
                        siteId,
                        directory}, this.CreateAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnCreateAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.CreateAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAppVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CreateEnterpriseStorageAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateEnterpriseStorageAppVirtualDirectory(string siteId, WebAppVirtualDirectory directory)
        {
            this.Invoke("CreateEnterpriseStorageAppVirtualDirectory", new object[] {
                    siteId,
                    directory});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateEnterpriseStorageAppVirtualDirectory(string siteId, WebAppVirtualDirectory directory, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateEnterpriseStorageAppVirtualDirectory", new object[] {
                    siteId,
                    directory}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCreateEnterpriseStorageAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CreateEnterpriseStorageAppVirtualDirectoryAsync(string siteId, WebAppVirtualDirectory directory)
        {
            this.CreateEnterpriseStorageAppVirtualDirectoryAsync(siteId, directory, null);
        }

        /// <remarks/>
        public void CreateEnterpriseStorageAppVirtualDirectoryAsync(string siteId, WebAppVirtualDirectory directory, object userState)
        {
            if ((this.CreateEnterpriseStorageAppVirtualDirectoryOperationCompleted == null))
            {
                this.CreateEnterpriseStorageAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEnterpriseStorageAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("CreateEnterpriseStorageAppVirtualDirectory", new object[] {
                    siteId,
                    directory}, this.CreateEnterpriseStorageAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnCreateEnterpriseStorageAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.CreateEnterpriseStorageAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEnterpriseStorageAppVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAppVirtualDirectory(string siteId, WebAppVirtualDirectory directory)
        {
            this.Invoke("UpdateAppVirtualDirectory", new object[] {
                        siteId,
                        directory});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateAppVirtualDirectory(string siteId, WebAppVirtualDirectory directory, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateAppVirtualDirectory", new object[] {
                        siteId,
                        directory}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateAppVirtualDirectoryAsync(string siteId, WebAppVirtualDirectory directory)
        {
            this.UpdateAppVirtualDirectoryAsync(siteId, directory, null);
        }

        /// <remarks/>
        public void UpdateAppVirtualDirectoryAsync(string siteId, WebAppVirtualDirectory directory, object userState)
        {
            if ((this.UpdateAppVirtualDirectoryOperationCompleted == null))
            {
                this.UpdateAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("UpdateAppVirtualDirectory", new object[] {
                        siteId,
                        directory}, this.UpdateAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnUpdateAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.UpdateAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAppVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAppVirtualDirectory(string siteId, string directoryName)
        {
            this.Invoke("DeleteAppVirtualDirectory", new object[] {
                        siteId,
                        directoryName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteAppVirtualDirectory(string siteId, string directoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteAppVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteAppVirtualDirectoryAsync(string siteId, string directoryName)
        {
            this.DeleteAppVirtualDirectoryAsync(siteId, directoryName, null);
        }

        /// <remarks/>
        public void DeleteAppVirtualDirectoryAsync(string siteId, string directoryName, object userState)
        {
            if ((this.DeleteAppVirtualDirectoryOperationCompleted == null))
            {
                this.DeleteAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("DeleteAppVirtualDirectory", new object[] {
                        siteId,
                        directoryName}, this.DeleteAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnDeleteAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.DeleteAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAppVirtualDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/IsFrontPageSystemInstalled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFrontPageSystemInstalled()
        {
            object[] results = this.Invoke("IsFrontPageSystemInstalled", new object[0]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginIsFrontPageSystemInstalled(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("IsFrontPageSystemInstalled", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public bool EndIsFrontPageSystemInstalled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void IsFrontPageSystemInstalledAsync()
        {
            this.IsFrontPageSystemInstalledAsync(null);
        }

        /// <remarks/>
        public void IsFrontPageSystemInstalledAsync(object userState)
        {
            if ((this.IsFrontPageSystemInstalledOperationCompleted == null))
            {
                this.IsFrontPageSystemInstalledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFrontPageSystemInstalledOperationCompleted);
            }
            this.InvokeAsync("IsFrontPageSystemInstalled", new object[0], this.IsFrontPageSystemInstalledOperationCompleted, userState);
        }

        private void OnIsFrontPageSystemInstalledOperationCompleted(object arg)
        {
            if ((this.IsFrontPageSystemInstalledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFrontPageSystemInstalledCompleted(this, new IsFrontPageSystemInstalledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/IsFrontPageInstalled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFrontPageInstalled(string siteId)
        {
            object[] results = this.Invoke("IsFrontPageInstalled", new object[] {
                        siteId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginIsFrontPageInstalled(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("IsFrontPageInstalled", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndIsFrontPageInstalled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void IsFrontPageInstalledAsync(string siteId)
        {
            this.IsFrontPageInstalledAsync(siteId, null);
        }

        /// <remarks/>
        public void IsFrontPageInstalledAsync(string siteId, object userState)
        {
            if ((this.IsFrontPageInstalledOperationCompleted == null))
            {
                this.IsFrontPageInstalledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFrontPageInstalledOperationCompleted);
            }
            this.InvokeAsync("IsFrontPageInstalled", new object[] {
                        siteId}, this.IsFrontPageInstalledOperationCompleted, userState);
        }

        private void OnIsFrontPageInstalledOperationCompleted(object arg)
        {
            if ((this.IsFrontPageInstalledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFrontPageInstalledCompleted(this, new IsFrontPageInstalledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InstallFrontPage", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InstallFrontPage(string siteId, string username, string password)
        {
            object[] results = this.Invoke("InstallFrontPage", new object[] {
                        siteId,
                        username,
                        password});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallFrontPage(string siteId, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallFrontPage", new object[] {
                        siteId,
                        username,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndInstallFrontPage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void InstallFrontPageAsync(string siteId, string username, string password)
        {
            this.InstallFrontPageAsync(siteId, username, password, null);
        }

        /// <remarks/>
        public void InstallFrontPageAsync(string siteId, string username, string password, object userState)
        {
            if ((this.InstallFrontPageOperationCompleted == null))
            {
                this.InstallFrontPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallFrontPageOperationCompleted);
            }
            this.InvokeAsync("InstallFrontPage", new object[] {
                        siteId,
                        username,
                        password}, this.InstallFrontPageOperationCompleted, userState);
        }

        private void OnInstallFrontPageOperationCompleted(object arg)
        {
            if ((this.InstallFrontPageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallFrontPageCompleted(this, new InstallFrontPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UninstallFrontPage", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UninstallFrontPage(string siteId, string username)
        {
            this.Invoke("UninstallFrontPage", new object[] {
                        siteId,
                        username});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUninstallFrontPage(string siteId, string username, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UninstallFrontPage", new object[] {
                        siteId,
                        username}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUninstallFrontPage(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UninstallFrontPageAsync(string siteId, string username)
        {
            this.UninstallFrontPageAsync(siteId, username, null);
        }

        /// <remarks/>
        public void UninstallFrontPageAsync(string siteId, string username, object userState)
        {
            if ((this.UninstallFrontPageOperationCompleted == null))
            {
                this.UninstallFrontPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallFrontPageOperationCompleted);
            }
            this.InvokeAsync("UninstallFrontPage", new object[] {
                        siteId,
                        username}, this.UninstallFrontPageOperationCompleted, userState);
        }

        private void OnUninstallFrontPageOperationCompleted(object arg)
        {
            if ((this.UninstallFrontPageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallFrontPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ChangeFrontPagePassword", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeFrontPagePassword(string username, string password)
        {
            this.Invoke("ChangeFrontPagePassword", new object[] {
                        username,
                        password});
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeFrontPagePassword(string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeFrontPagePassword", new object[] {
                        username,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public void EndChangeFrontPagePassword(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ChangeFrontPagePasswordAsync(string username, string password)
        {
            this.ChangeFrontPagePasswordAsync(username, password, null);
        }

        /// <remarks/>
        public void ChangeFrontPagePasswordAsync(string username, string password, object userState)
        {
            if ((this.ChangeFrontPagePasswordOperationCompleted == null))
            {
                this.ChangeFrontPagePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeFrontPagePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeFrontPagePassword", new object[] {
                        username,
                        password}, this.ChangeFrontPagePasswordOperationCompleted, userState);
        }

        private void OnChangeFrontPagePasswordOperationCompleted(object arg)
        {
            if ((this.ChangeFrontPagePasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeFrontPagePasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/IsColdFusionSystemInstalled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsColdFusionSystemInstalled()
        {
            object[] results = this.Invoke("IsColdFusionSystemInstalled", new object[0]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginIsColdFusionSystemInstalled(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("IsColdFusionSystemInstalled", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public bool EndIsColdFusionSystemInstalled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void IsColdFusionSystemInstalledAsync()
        {
            this.IsColdFusionSystemInstalledAsync(null);
        }

        /// <remarks/>
        public void IsColdFusionSystemInstalledAsync(object userState)
        {
            if ((this.IsColdFusionSystemInstalledOperationCompleted == null))
            {
                this.IsColdFusionSystemInstalledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsColdFusionSystemInstalledOperationCompleted);
            }
            this.InvokeAsync("IsColdFusionSystemInstalled", new object[0], this.IsColdFusionSystemInstalledOperationCompleted, userState);
        }

        private void OnIsColdFusionSystemInstalledOperationCompleted(object arg)
        {
            if ((this.IsColdFusionSystemInstalledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsColdFusionSystemInstalledCompleted(this, new IsColdFusionSystemInstalledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GrantWebSiteAccess", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GrantWebSiteAccess(string path, string siteId, NTFSPermission permission)
        {
            this.Invoke("GrantWebSiteAccess", new object[] {
                        path,
                        siteId,
                        permission});
        }

        /// <remarks/>
        public System.IAsyncResult BeginGrantWebSiteAccess(string path, string siteId, NTFSPermission permission, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GrantWebSiteAccess", new object[] {
                        path,
                        siteId,
                        permission}, callback, asyncState);
        }

        /// <remarks/>
        public void EndGrantWebSiteAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void GrantWebSiteAccessAsync(string path, string siteId, NTFSPermission permission)
        {
            this.GrantWebSiteAccessAsync(path, siteId, permission, null);
        }

        /// <remarks/>
        public void GrantWebSiteAccessAsync(string path, string siteId, NTFSPermission permission, object userState)
        {
            if ((this.GrantWebSiteAccessOperationCompleted == null))
            {
                this.GrantWebSiteAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantWebSiteAccessOperationCompleted);
            }
            this.InvokeAsync("GrantWebSiteAccess", new object[] {
                        path,
                        siteId,
                        permission}, this.GrantWebSiteAccessOperationCompleted, userState);
        }

        private void OnGrantWebSiteAccessOperationCompleted(object arg)
        {
            if ((this.GrantWebSiteAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantWebSiteAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InstallSecuredFolders", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InstallSecuredFolders(string siteId)
        {
            this.Invoke("InstallSecuredFolders", new object[] {
                        siteId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallSecuredFolders(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallSecuredFolders", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndInstallSecuredFolders(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void InstallSecuredFoldersAsync(string siteId)
        {
            this.InstallSecuredFoldersAsync(siteId, null);
        }

        /// <remarks/>
        public void InstallSecuredFoldersAsync(string siteId, object userState)
        {
            if ((this.InstallSecuredFoldersOperationCompleted == null))
            {
                this.InstallSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("InstallSecuredFolders", new object[] {
                        siteId}, this.InstallSecuredFoldersOperationCompleted, userState);
        }

        private void OnInstallSecuredFoldersOperationCompleted(object arg)
        {
            if ((this.InstallSecuredFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallSecuredFoldersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UninstallSecuredFolders", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UninstallSecuredFolders(string siteId)
        {
            this.Invoke("UninstallSecuredFolders", new object[] {
                        siteId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUninstallSecuredFolders(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UninstallSecuredFolders", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUninstallSecuredFolders(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UninstallSecuredFoldersAsync(string siteId)
        {
            this.UninstallSecuredFoldersAsync(siteId, null);
        }

        /// <remarks/>
        public void UninstallSecuredFoldersAsync(string siteId, object userState)
        {
            if ((this.UninstallSecuredFoldersOperationCompleted == null))
            {
                this.UninstallSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("UninstallSecuredFolders", new object[] {
                        siteId}, this.UninstallSecuredFoldersOperationCompleted, userState);
        }

        private void OnUninstallSecuredFoldersOperationCompleted(object arg)
        {
            if ((this.UninstallSecuredFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallSecuredFoldersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetFolders", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebFolder[] GetFolders(string siteId)
        {
            object[] results = this.Invoke("GetFolders", new object[] {
                        siteId});
            return ((WebFolder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFolders(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFolders", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebFolder[] EndGetFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebFolder[])(results[0]));
        }

        /// <remarks/>
        public void GetFoldersAsync(string siteId)
        {
            this.GetFoldersAsync(siteId, null);
        }

        /// <remarks/>
        public void GetFoldersAsync(string siteId, object userState)
        {
            if ((this.GetFoldersOperationCompleted == null))
            {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        siteId}, this.GetFoldersOperationCompleted, userState);
        }

        private void OnGetFoldersOperationCompleted(object arg)
        {
            if ((this.GetFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebFolder GetFolder(string siteId, string folderPath)
        {
            object[] results = this.Invoke("GetFolder", new object[] {
                        siteId,
                        folderPath});
            return ((WebFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFolder(string siteId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFolder", new object[] {
                        siteId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public WebFolder EndGetFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebFolder)(results[0]));
        }

        /// <remarks/>
        public void GetFolderAsync(string siteId, string folderPath)
        {
            this.GetFolderAsync(siteId, folderPath, null);
        }

        /// <remarks/>
        public void GetFolderAsync(string siteId, string folderPath, object userState)
        {
            if ((this.GetFolderOperationCompleted == null))
            {
                this.GetFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderOperationCompleted);
            }
            this.InvokeAsync("GetFolder", new object[] {
                        siteId,
                        folderPath}, this.GetFolderOperationCompleted, userState);
        }

        private void OnGetFolderOperationCompleted(object arg)
        {
            if ((this.GetFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderCompleted(this, new GetFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFolder(string siteId, WebFolder folder)
        {
            this.Invoke("UpdateFolder", new object[] {
                        siteId,
                        folder});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateFolder(string siteId, WebFolder folder, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateFolder", new object[] {
                        siteId,
                        folder}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateFolder(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateFolderAsync(string siteId, WebFolder folder)
        {
            this.UpdateFolderAsync(siteId, folder, null);
        }

        /// <remarks/>
        public void UpdateFolderAsync(string siteId, WebFolder folder, object userState)
        {
            if ((this.UpdateFolderOperationCompleted == null))
            {
                this.UpdateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateFolder", new object[] {
                        siteId,
                        folder}, this.UpdateFolderOperationCompleted, userState);
        }

        private void OnUpdateFolderOperationCompleted(object arg)
        {
            if ((this.UpdateFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFolder(string siteId, string folderPath)
        {
            this.Invoke("DeleteFolder", new object[] {
                        siteId,
                        folderPath});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteFolder(string siteId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteFolder", new object[] {
                        siteId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteFolder(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteFolderAsync(string siteId, string folderPath)
        {
            this.DeleteFolderAsync(siteId, folderPath, null);
        }

        /// <remarks/>
        public void DeleteFolderAsync(string siteId, string folderPath, object userState)
        {
            if ((this.DeleteFolderOperationCompleted == null))
            {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        siteId,
                        folderPath}, this.DeleteFolderOperationCompleted, userState);
        }

        private void OnDeleteFolderOperationCompleted(object arg)
        {
            if ((this.DeleteFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetUsers", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebUser[] GetUsers(string siteId)
        {
            object[] results = this.Invoke("GetUsers", new object[] {
                        siteId});
            return ((WebUser[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetUsers(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetUsers", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebUser[] EndGetUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebUser[])(results[0]));
        }

        /// <remarks/>
        public void GetUsersAsync(string siteId)
        {
            this.GetUsersAsync(siteId, null);
        }

        /// <remarks/>
        public void GetUsersAsync(string siteId, object userState)
        {
            if ((this.GetUsersOperationCompleted == null))
            {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        siteId}, this.GetUsersOperationCompleted, userState);
        }

        private void OnGetUsersOperationCompleted(object arg)
        {
            if ((this.GetUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetUser", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebUser GetUser(string siteId, string userName)
        {
            object[] results = this.Invoke("GetUser", new object[] {
                        siteId,
                        userName});
            return ((WebUser)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetUser(string siteId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetUser", new object[] {
                        siteId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public WebUser EndGetUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebUser)(results[0]));
        }

        /// <remarks/>
        public void GetUserAsync(string siteId, string userName)
        {
            this.GetUserAsync(siteId, userName, null);
        }

        /// <remarks/>
        public void GetUserAsync(string siteId, string userName, object userState)
        {
            if ((this.GetUserOperationCompleted == null))
            {
                this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
            }
            this.InvokeAsync("GetUser", new object[] {
                        siteId,
                        userName}, this.GetUserOperationCompleted, userState);
        }

        private void OnGetUserOperationCompleted(object arg)
        {
            if ((this.GetUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateUser", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUser(string siteId, WebUser user)
        {
            this.Invoke("UpdateUser", new object[] {
                        siteId,
                        user});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateUser(string siteId, WebUser user, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateUser", new object[] {
                        siteId,
                        user}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateUser(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateUserAsync(string siteId, WebUser user)
        {
            this.UpdateUserAsync(siteId, user, null);
        }

        /// <remarks/>
        public void UpdateUserAsync(string siteId, WebUser user, object userState)
        {
            if ((this.UpdateUserOperationCompleted == null))
            {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        siteId,
                        user}, this.UpdateUserOperationCompleted, userState);
        }

        private void OnUpdateUserOperationCompleted(object arg)
        {
            if ((this.UpdateUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteUser", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser(string siteId, string userName)
        {
            this.Invoke("DeleteUser", new object[] {
                        siteId,
                        userName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteUser(string siteId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteUser", new object[] {
                        siteId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteUser(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteUserAsync(string siteId, string userName)
        {
            this.DeleteUserAsync(siteId, userName, null);
        }

        /// <remarks/>
        public void DeleteUserAsync(string siteId, string userName, object userState)
        {
            if ((this.DeleteUserOperationCompleted == null))
            {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        siteId,
                        userName}, this.DeleteUserOperationCompleted, userState);
        }

        private void OnDeleteUserOperationCompleted(object arg)
        {
            if ((this.DeleteUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGroups", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup[] GetGroups(string siteId)
        {
            object[] results = this.Invoke("GetGroups", new object[] {
                        siteId});
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGroups(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGroups", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup[] EndGetGroups(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public void GetGroupsAsync(string siteId)
        {
            this.GetGroupsAsync(siteId, null);
        }

        /// <remarks/>
        public void GetGroupsAsync(string siteId, object userState)
        {
            if ((this.GetGroupsOperationCompleted == null))
            {
                this.GetGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsOperationCompleted);
            }
            this.InvokeAsync("GetGroups", new object[] {
                        siteId}, this.GetGroupsOperationCompleted, userState);
        }

        private void OnGetGroupsOperationCompleted(object arg)
        {
            if ((this.GetGroupsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupsCompleted(this, new GetGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGroup", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup GetGroup(string siteId, string groupName)
        {
            object[] results = this.Invoke("GetGroup", new object[] {
                        siteId,
                        groupName});
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGroup(string siteId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGroup", new object[] {
                        siteId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup EndGetGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public void GetGroupAsync(string siteId, string groupName)
        {
            this.GetGroupAsync(siteId, groupName, null);
        }

        /// <remarks/>
        public void GetGroupAsync(string siteId, string groupName, object userState)
        {
            if ((this.GetGroupOperationCompleted == null))
            {
                this.GetGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupOperationCompleted);
            }
            this.InvokeAsync("GetGroup", new object[] {
                        siteId,
                        groupName}, this.GetGroupOperationCompleted, userState);
        }

        private void OnGetGroupOperationCompleted(object arg)
        {
            if ((this.GetGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupCompleted(this, new GetGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateGroup", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateGroup(string siteId, WebGroup group)
        {
            this.Invoke("UpdateGroup", new object[] {
                        siteId,
                        group});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateGroup(string siteId, WebGroup group, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateGroup", new object[] {
                        siteId,
                        group}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateGroupAsync(string siteId, WebGroup group)
        {
            this.UpdateGroupAsync(siteId, group, null);
        }

        /// <remarks/>
        public void UpdateGroupAsync(string siteId, WebGroup group, object userState)
        {
            if ((this.UpdateGroupOperationCompleted == null))
            {
                this.UpdateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateGroup", new object[] {
                        siteId,
                        group}, this.UpdateGroupOperationCompleted, userState);
        }

        private void OnUpdateGroupOperationCompleted(object arg)
        {
            if ((this.UpdateGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteGroup", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteGroup(string siteId, string groupName)
        {
            this.Invoke("DeleteGroup", new object[] {
                        siteId,
                        groupName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteGroup(string siteId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteGroup", new object[] {
                        siteId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteGroupAsync(string siteId, string groupName)
        {
            this.DeleteGroupAsync(siteId, groupName, null);
        }

        /// <remarks/>
        public void DeleteGroupAsync(string siteId, string groupName, object userState)
        {
            if ((this.DeleteGroupOperationCompleted == null))
            {
                this.DeleteGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteGroup", new object[] {
                        siteId,
                        groupName}, this.DeleteGroupOperationCompleted, userState);
        }

        private void OnDeleteGroupOperationCompleted(object arg)
        {
            if ((this.DeleteGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeStatus", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HeliconApeStatus GetHeliconApeStatus(string siteId)
        {
            object[] results = this.Invoke("GetHeliconApeStatus", new object[] {
                        siteId});
            return ((HeliconApeStatus)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeStatus(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeStatus", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public HeliconApeStatus EndGetHeliconApeStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HeliconApeStatus)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeStatusAsync(string siteId)
        {
            this.GetHeliconApeStatusAsync(siteId, null);
        }

        /// <remarks/>
        public void GetHeliconApeStatusAsync(string siteId, object userState)
        {
            if ((this.GetHeliconApeStatusOperationCompleted == null))
            {
                this.GetHeliconApeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeStatusOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeStatus", new object[] {
                        siteId}, this.GetHeliconApeStatusOperationCompleted, userState);
        }

        private void OnGetHeliconApeStatusOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeStatusCompleted(this, new GetHeliconApeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InstallHeliconApe", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InstallHeliconApe(string ServiceId)
        {
            this.Invoke("InstallHeliconApe", new object[] {
                        ServiceId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallHeliconApe(string ServiceId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallHeliconApe", new object[] {
                        ServiceId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndInstallHeliconApe(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void InstallHeliconApeAsync(string ServiceId)
        {
            this.InstallHeliconApeAsync(ServiceId, null);
        }

        /// <remarks/>
        public void InstallHeliconApeAsync(string ServiceId, object userState)
        {
            if ((this.InstallHeliconApeOperationCompleted == null))
            {
                this.InstallHeliconApeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallHeliconApeOperationCompleted);
            }
            this.InvokeAsync("InstallHeliconApe", new object[] {
                        ServiceId}, this.InstallHeliconApeOperationCompleted, userState);
        }

        private void OnInstallHeliconApeOperationCompleted(object arg)
        {
            if ((this.InstallHeliconApeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallHeliconApeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/EnableHeliconApe", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableHeliconApe(string siteId)
        {
            this.Invoke("EnableHeliconApe", new object[] {
                        siteId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginEnableHeliconApe(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EnableHeliconApe", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndEnableHeliconApe(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void EnableHeliconApeAsync(string siteId)
        {
            this.EnableHeliconApeAsync(siteId, null);
        }

        /// <remarks/>
        public void EnableHeliconApeAsync(string siteId, object userState)
        {
            if ((this.EnableHeliconApeOperationCompleted == null))
            {
                this.EnableHeliconApeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableHeliconApeOperationCompleted);
            }
            this.InvokeAsync("EnableHeliconApe", new object[] {
                        siteId}, this.EnableHeliconApeOperationCompleted, userState);
        }

        private void OnEnableHeliconApeOperationCompleted(object arg)
        {
            if ((this.EnableHeliconApeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableHeliconApeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DisableHeliconApe", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisableHeliconApe(string siteId)
        {
            this.Invoke("DisableHeliconApe", new object[] {
                        siteId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDisableHeliconApe(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DisableHeliconApe", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDisableHeliconApe(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DisableHeliconApeAsync(string siteId)
        {
            this.DisableHeliconApeAsync(siteId, null);
        }

        /// <remarks/>
        public void DisableHeliconApeAsync(string siteId, object userState)
        {
            if ((this.DisableHeliconApeOperationCompleted == null))
            {
                this.DisableHeliconApeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableHeliconApeOperationCompleted);
            }
            this.InvokeAsync("DisableHeliconApe", new object[] {
                        siteId}, this.DisableHeliconApeOperationCompleted, userState);
        }

        private void OnDisableHeliconApeOperationCompleted(object arg)
        {
            if ((this.DisableHeliconApeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableHeliconApeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeFolders", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessFolder[] GetHeliconApeFolders(string siteId)
        {
            object[] results = this.Invoke("GetHeliconApeFolders", new object[] {
                        siteId});
            return ((HtaccessFolder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeFolders(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeFolders", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessFolder[] EndGetHeliconApeFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessFolder[])(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeFoldersAsync(string siteId)
        {
            this.GetHeliconApeFoldersAsync(siteId, null);
        }

        /// <remarks/>
        public void GetHeliconApeFoldersAsync(string siteId, object userState)
        {
            if ((this.GetHeliconApeFoldersOperationCompleted == null))
            {
                this.GetHeliconApeFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeFoldersOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeFolders", new object[] {
                        siteId}, this.GetHeliconApeFoldersOperationCompleted, userState);
        }

        private void OnGetHeliconApeFoldersOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeFoldersCompleted(this, new GetHeliconApeFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeHttpdFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessFolder GetHeliconApeHttpdFolder()
        {
            object[] results = this.Invoke("GetHeliconApeHttpdFolder", new object[0]);
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeHttpdFolder(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeHttpdFolder", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public HtaccessFolder EndGetHeliconApeHttpdFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeHttpdFolderAsync()
        {
            this.GetHeliconApeHttpdFolderAsync(null);
        }

        /// <remarks/>
        public void GetHeliconApeHttpdFolderAsync(object userState)
        {
            if ((this.GetHeliconApeHttpdFolderOperationCompleted == null))
            {
                this.GetHeliconApeHttpdFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeHttpdFolderOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeHttpdFolder", new object[0], this.GetHeliconApeHttpdFolderOperationCompleted, userState);
        }

        private void OnGetHeliconApeHttpdFolderOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeHttpdFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeHttpdFolderCompleted(this, new GetHeliconApeHttpdFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessFolder GetHeliconApeFolder(string siteId, string folderPath)
        {
            object[] results = this.Invoke("GetHeliconApeFolder", new object[] {
                        siteId,
                        folderPath});
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeFolder(string siteId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeFolder", new object[] {
                        siteId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessFolder EndGetHeliconApeFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeFolderAsync(string siteId, string folderPath)
        {
            this.GetHeliconApeFolderAsync(siteId, folderPath, null);
        }

        /// <remarks/>
        public void GetHeliconApeFolderAsync(string siteId, string folderPath, object userState)
        {
            if ((this.GetHeliconApeFolderOperationCompleted == null))
            {
                this.GetHeliconApeFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeFolderOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeFolder", new object[] {
                        siteId,
                        folderPath}, this.GetHeliconApeFolderOperationCompleted, userState);
        }

        private void OnGetHeliconApeFolderOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeFolderCompleted(this, new GetHeliconApeFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateHeliconApeFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateHeliconApeFolder(string siteId, HtaccessFolder folder)
        {
            this.Invoke("UpdateHeliconApeFolder", new object[] {
                        siteId,
                        folder});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeFolder(string siteId, HtaccessFolder folder, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeFolder", new object[] {
                        siteId,
                        folder}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateHeliconApeFolder(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateHeliconApeFolderAsync(string siteId, HtaccessFolder folder)
        {
            this.UpdateHeliconApeFolderAsync(siteId, folder, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeFolderAsync(string siteId, HtaccessFolder folder, object userState)
        {
            if ((this.UpdateHeliconApeFolderOperationCompleted == null))
            {
                this.UpdateHeliconApeFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeFolder", new object[] {
                        siteId,
                        folder}, this.UpdateHeliconApeFolderOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeFolderOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateHeliconApeHttpdFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateHeliconApeHttpdFolder(HtaccessFolder folder)
        {
            this.Invoke("UpdateHeliconApeHttpdFolder", new object[] {
                        folder});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeHttpdFolder(HtaccessFolder folder, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeHttpdFolder", new object[] {
                        folder}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateHeliconApeHttpdFolder(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateHeliconApeHttpdFolderAsync(HtaccessFolder folder)
        {
            this.UpdateHeliconApeHttpdFolderAsync(folder, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeHttpdFolderAsync(HtaccessFolder folder, object userState)
        {
            if ((this.UpdateHeliconApeHttpdFolderOperationCompleted == null))
            {
                this.UpdateHeliconApeHttpdFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeHttpdFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeHttpdFolder", new object[] {
                        folder}, this.UpdateHeliconApeHttpdFolderOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeHttpdFolderOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeHttpdFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeHttpdFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteHeliconApeFolder", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteHeliconApeFolder(string siteId, string folderPath)
        {
            this.Invoke("DeleteHeliconApeFolder", new object[] {
                        siteId,
                        folderPath});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteHeliconApeFolder(string siteId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteHeliconApeFolder", new object[] {
                        siteId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteHeliconApeFolder(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteHeliconApeFolderAsync(string siteId, string folderPath)
        {
            this.DeleteHeliconApeFolderAsync(siteId, folderPath, null);
        }

        /// <remarks/>
        public void DeleteHeliconApeFolderAsync(string siteId, string folderPath, object userState)
        {
            if ((this.DeleteHeliconApeFolderOperationCompleted == null))
            {
                this.DeleteHeliconApeFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHeliconApeFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteHeliconApeFolder", new object[] {
                        siteId,
                        folderPath}, this.DeleteHeliconApeFolderOperationCompleted, userState);
        }

        private void OnDeleteHeliconApeFolderOperationCompleted(object arg)
        {
            if ((this.DeleteHeliconApeFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHeliconApeFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeUsers", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessUser[] GetHeliconApeUsers(string siteId)
        {
            object[] results = this.Invoke("GetHeliconApeUsers", new object[] {
                        siteId});
            return ((HtaccessUser[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeUsers(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeUsers", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessUser[] EndGetHeliconApeUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessUser[])(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeUsersAsync(string siteId)
        {
            this.GetHeliconApeUsersAsync(siteId, null);
        }

        /// <remarks/>
        public void GetHeliconApeUsersAsync(string siteId, object userState)
        {
            if ((this.GetHeliconApeUsersOperationCompleted == null))
            {
                this.GetHeliconApeUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeUsersOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeUsers", new object[] {
                        siteId}, this.GetHeliconApeUsersOperationCompleted, userState);
        }

        private void OnGetHeliconApeUsersOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeUsersCompleted(this, new GetHeliconApeUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeUser", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessUser GetHeliconApeUser(string siteId, string userName)
        {
            object[] results = this.Invoke("GetHeliconApeUser", new object[] {
                        siteId,
                        userName});
            return ((HtaccessUser)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeUser(string siteId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeUser", new object[] {
                        siteId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessUser EndGetHeliconApeUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessUser)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeUserAsync(string siteId, string userName)
        {
            this.GetHeliconApeUserAsync(siteId, userName, null);
        }

        /// <remarks/>
        public void GetHeliconApeUserAsync(string siteId, string userName, object userState)
        {
            if ((this.GetHeliconApeUserOperationCompleted == null))
            {
                this.GetHeliconApeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeUserOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeUser", new object[] {
                        siteId,
                        userName}, this.GetHeliconApeUserOperationCompleted, userState);
        }

        private void OnGetHeliconApeUserOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeUserCompleted(this, new GetHeliconApeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateHeliconApeUser", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateHeliconApeUser(string siteId, HtaccessUser user)
        {
            this.Invoke("UpdateHeliconApeUser", new object[] {
                        siteId,
                        user});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeUser(string siteId, HtaccessUser user, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeUser", new object[] {
                        siteId,
                        user}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateHeliconApeUser(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateHeliconApeUserAsync(string siteId, HtaccessUser user)
        {
            this.UpdateHeliconApeUserAsync(siteId, user, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeUserAsync(string siteId, HtaccessUser user, object userState)
        {
            if ((this.UpdateHeliconApeUserOperationCompleted == null))
            {
                this.UpdateHeliconApeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeUserOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeUser", new object[] {
                        siteId,
                        user}, this.UpdateHeliconApeUserOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeUserOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteHeliconApeUser", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteHeliconApeUser(string siteId, string userName)
        {
            this.Invoke("DeleteHeliconApeUser", new object[] {
                        siteId,
                        userName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteHeliconApeUser(string siteId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteHeliconApeUser", new object[] {
                        siteId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteHeliconApeUser(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteHeliconApeUserAsync(string siteId, string userName)
        {
            this.DeleteHeliconApeUserAsync(siteId, userName, null);
        }

        /// <remarks/>
        public void DeleteHeliconApeUserAsync(string siteId, string userName, object userState)
        {
            if ((this.DeleteHeliconApeUserOperationCompleted == null))
            {
                this.DeleteHeliconApeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHeliconApeUserOperationCompleted);
            }
            this.InvokeAsync("DeleteHeliconApeUser", new object[] {
                        siteId,
                        userName}, this.DeleteHeliconApeUserOperationCompleted, userState);
        }

        private void OnDeleteHeliconApeUserOperationCompleted(object arg)
        {
            if ((this.DeleteHeliconApeUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHeliconApeUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeGroups", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup[] GetHeliconApeGroups(string siteId)
        {
            object[] results = this.Invoke("GetHeliconApeGroups", new object[] {
                        siteId});
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeGroups(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeGroups", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup[] EndGetHeliconApeGroups(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeGroupsAsync(string siteId)
        {
            this.GetHeliconApeGroupsAsync(siteId, null);
        }

        /// <remarks/>
        public void GetHeliconApeGroupsAsync(string siteId, object userState)
        {
            if ((this.GetHeliconApeGroupsOperationCompleted == null))
            {
                this.GetHeliconApeGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeGroupsOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeGroups", new object[] {
                        siteId}, this.GetHeliconApeGroupsOperationCompleted, userState);
        }

        private void OnGetHeliconApeGroupsOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeGroupsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeGroupsCompleted(this, new GetHeliconApeGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetHeliconApeGroup", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup GetHeliconApeGroup(string siteId, string groupName)
        {
            object[] results = this.Invoke("GetHeliconApeGroup", new object[] {
                        siteId,
                        groupName});
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeGroup(string siteId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeGroup", new object[] {
                        siteId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup EndGetHeliconApeGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeGroupAsync(string siteId, string groupName)
        {
            this.GetHeliconApeGroupAsync(siteId, groupName, null);
        }

        /// <remarks/>
        public void GetHeliconApeGroupAsync(string siteId, string groupName, object userState)
        {
            if ((this.GetHeliconApeGroupOperationCompleted == null))
            {
                this.GetHeliconApeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeGroupOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeGroup", new object[] {
                        siteId,
                        groupName}, this.GetHeliconApeGroupOperationCompleted, userState);
        }

        private void OnGetHeliconApeGroupOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeGroupCompleted(this, new GetHeliconApeGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/UpdateHeliconApeGroup", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateHeliconApeGroup(string siteId, WebGroup group)
        {
            this.Invoke("UpdateHeliconApeGroup", new object[] {
                        siteId,
                        group});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeGroup(string siteId, WebGroup group, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeGroup", new object[] {
                        siteId,
                        group}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateHeliconApeGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateHeliconApeGroupAsync(string siteId, WebGroup group)
        {
            this.UpdateHeliconApeGroupAsync(siteId, group, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeGroupAsync(string siteId, WebGroup group, object userState)
        {
            if ((this.UpdateHeliconApeGroupOperationCompleted == null))
            {
                this.UpdateHeliconApeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeGroup", new object[] {
                        siteId,
                        group}, this.UpdateHeliconApeGroupOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeGroupOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GrantWebDeployPublishingAccess", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GrantWebDeployPublishingAccess(string siteId, string accountName, string accountPassword)
        {
            this.Invoke("GrantWebDeployPublishingAccess", new object[] {
                        siteId,
                        accountName,
                        accountPassword});
        }

        /// <remarks/>
        public System.IAsyncResult BeginGrantWebDeployPublishingAccess(string siteId, string accountName, string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GrantWebDeployPublishingAccess", new object[] {
                        siteId,
                        accountName,
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public void EndGrantWebDeployPublishingAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void GrantWebDeployPublishingAccessAsync(string siteId, string accountName, string accountPassword)
        {
            this.GrantWebDeployPublishingAccessAsync(siteId, accountName, accountPassword, null);
        }

        /// <remarks/>
        public void GrantWebDeployPublishingAccessAsync(string siteId, string accountName, string accountPassword, object userState)
        {
            if ((this.GrantWebDeployPublishingAccessOperationCompleted == null))
            {
                this.GrantWebDeployPublishingAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantWebDeployPublishingAccessOperationCompleted);
            }
            this.InvokeAsync("GrantWebDeployPublishingAccess", new object[] {
                        siteId,
                        accountName,
                        accountPassword}, this.GrantWebDeployPublishingAccessOperationCompleted, userState);
        }

        private void OnGrantWebDeployPublishingAccessOperationCompleted(object arg)
        {
            if ((this.GrantWebDeployPublishingAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantWebDeployPublishingAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RevokeWebDeployPublishingAccess", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeWebDeployPublishingAccess(string siteId, string accountName)
        {
            this.Invoke("RevokeWebDeployPublishingAccess", new object[] {
                        siteId,
                        accountName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRevokeWebDeployPublishingAccess(string siteId, string accountName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RevokeWebDeployPublishingAccess", new object[] {
                        siteId,
                        accountName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRevokeWebDeployPublishingAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RevokeWebDeployPublishingAccessAsync(string siteId, string accountName)
        {
            this.RevokeWebDeployPublishingAccessAsync(siteId, accountName, null);
        }

        /// <remarks/>
        public void RevokeWebDeployPublishingAccessAsync(string siteId, string accountName, object userState)
        {
            if ((this.RevokeWebDeployPublishingAccessOperationCompleted == null))
            {
                this.RevokeWebDeployPublishingAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeWebDeployPublishingAccessOperationCompleted);
            }
            this.InvokeAsync("RevokeWebDeployPublishingAccess", new object[] {
                        siteId,
                        accountName}, this.RevokeWebDeployPublishingAccessOperationCompleted, userState);
        }

        private void OnRevokeWebDeployPublishingAccessOperationCompleted(object arg)
        {
            if ((this.RevokeWebDeployPublishingAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeWebDeployPublishingAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DeleteHeliconApeGroup", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteHeliconApeGroup(string siteId, string groupName)
        {
            this.Invoke("DeleteHeliconApeGroup", new object[] {
                        siteId,
                        groupName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteHeliconApeGroup(string siteId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteHeliconApeGroup", new object[] {
                        siteId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteHeliconApeGroup(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteHeliconApeGroupAsync(string siteId, string groupName)
        {
            this.DeleteHeliconApeGroupAsync(siteId, groupName, null);
        }

        /// <remarks/>
        public void DeleteHeliconApeGroupAsync(string siteId, string groupName, object userState)
        {
            if ((this.DeleteHeliconApeGroupOperationCompleted == null))
            {
                this.DeleteHeliconApeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHeliconApeGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteHeliconApeGroup", new object[] {
                        siteId,
                        groupName}, this.DeleteHeliconApeGroupOperationCompleted, userState);
        }

        private void OnDeleteHeliconApeGroupOperationCompleted(object arg)
        {
            if ((this.DeleteHeliconApeGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHeliconApeGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetZooApplications", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebAppVirtualDirectory[] GetZooApplications(string siteId)
        {
            object[] results = this.Invoke("GetZooApplications", new object[] {
                        siteId});
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetZooApplications(string siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetZooApplications", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] EndGetZooApplications(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public void GetZooApplicationsAsync(string siteId)
        {
            this.GetZooApplicationsAsync(siteId, null);
        }

        /// <remarks/>
        public void GetZooApplicationsAsync(string siteId, object userState)
        {
            if ((this.GetZooApplicationsOperationCompleted == null))
            {
                this.GetZooApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZooApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetZooApplications", new object[] {
                        siteId}, this.GetZooApplicationsOperationCompleted, userState);
        }

        private void OnGetZooApplicationsOperationCompleted(object arg)
        {
            if ((this.GetZooApplicationsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZooApplicationsCompleted(this, new GetZooApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetZooEnvironmentVariable", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject SetZooEnvironmentVariable(string siteId, string appName, string envName, string envValue)
        {
            object[] results = this.Invoke("SetZooEnvironmentVariable", new object[] {
                        siteId,
                        appName,
                        envName,
                        envValue});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetZooEnvironmentVariable(string siteId, string appName, string envName, string envValue, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetZooEnvironmentVariable", new object[] {
                        siteId,
                        appName,
                        envName,
                        envValue}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndSetZooEnvironmentVariable(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetZooEnvironmentVariableAsync(string siteId, string appName, string envName, string envValue)
        {
            this.SetZooEnvironmentVariableAsync(siteId, appName, envName, envValue, null);
        }

        /// <remarks/>
        public void SetZooEnvironmentVariableAsync(string siteId, string appName, string envName, string envValue, object userState)
        {
            if ((this.SetZooEnvironmentVariableOperationCompleted == null))
            {
                this.SetZooEnvironmentVariableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZooEnvironmentVariableOperationCompleted);
            }
            this.InvokeAsync("SetZooEnvironmentVariable", new object[] {
                        siteId,
                        appName,
                        envName,
                        envValue}, this.SetZooEnvironmentVariableOperationCompleted, userState);
        }

        private void OnSetZooEnvironmentVariableOperationCompleted(object arg)
        {
            if ((this.SetZooEnvironmentVariableCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZooEnvironmentVariableCompleted(this, new SetZooEnvironmentVariableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetZooConsoleEnabled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject SetZooConsoleEnabled(string siteId, string appName)
        {
            object[] results = this.Invoke("SetZooConsoleEnabled", new object[] {
                        siteId,
                        appName});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetZooConsoleEnabled(string siteId, string appName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetZooConsoleEnabled", new object[] {
                        siteId,
                        appName}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndSetZooConsoleEnabled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetZooConsoleEnabledAsync(string siteId, string appName)
        {
            this.SetZooConsoleEnabledAsync(siteId, appName, null);
        }

        /// <remarks/>
        public void SetZooConsoleEnabledAsync(string siteId, string appName, object userState)
        {
            if ((this.SetZooConsoleEnabledOperationCompleted == null))
            {
                this.SetZooConsoleEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZooConsoleEnabledOperationCompleted);
            }
            this.InvokeAsync("SetZooConsoleEnabled", new object[] {
                        siteId,
                        appName}, this.SetZooConsoleEnabledOperationCompleted, userState);
        }

        private void OnSetZooConsoleEnabledOperationCompleted(object arg)
        {
            if ((this.SetZooConsoleEnabledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZooConsoleEnabledCompleted(this, new SetZooConsoleEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetZooConsoleDisabled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject SetZooConsoleDisabled(string siteId, string appName)
        {
            object[] results = this.Invoke("SetZooConsoleDisabled", new object[] {
                        siteId,
                        appName});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetZooConsoleDisabled(string siteId, string appName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetZooConsoleDisabled", new object[] {
                        siteId,
                        appName}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndSetZooConsoleDisabled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetZooConsoleDisabledAsync(string siteId, string appName)
        {
            this.SetZooConsoleDisabledAsync(siteId, appName, null);
        }

        /// <remarks/>
        public void SetZooConsoleDisabledAsync(string siteId, string appName, object userState)
        {
            if ((this.SetZooConsoleDisabledOperationCompleted == null))
            {
                this.SetZooConsoleDisabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZooConsoleDisabledOperationCompleted);
            }
            this.InvokeAsync("SetZooConsoleDisabled", new object[] {
                        siteId,
                        appName}, this.SetZooConsoleDisabledOperationCompleted, userState);
        }

        private void OnSetZooConsoleDisabledOperationCompleted(object arg)
        {
            if ((this.SetZooConsoleDisabledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZooConsoleDisabledCompleted(this, new SetZooConsoleDisabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckLoadUserProfile", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckLoadUserProfile()
        {
            object[] results = this.Invoke("CheckLoadUserProfile", new object[0]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckLoadUserProfile(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckLoadUserProfile", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public bool EndCheckLoadUserProfile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CheckLoadUserProfileAsync()
        {
            this.CheckLoadUserProfileAsync(null);
        }

        /// <remarks/>
        public void CheckLoadUserProfileAsync(object userState)
        {
            if ((this.CheckLoadUserProfileOperationCompleted == null))
            {
                this.CheckLoadUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoadUserProfileOperationCompleted);
            }
            this.InvokeAsync("CheckLoadUserProfile", new object[0], this.CheckLoadUserProfileOperationCompleted, userState);
        }

        private void OnCheckLoadUserProfileOperationCompleted(object arg)
        {
            if ((this.CheckLoadUserProfileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoadUserProfileCompleted(this, new CheckLoadUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/EnableLoadUserProfile", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableLoadUserProfile()
        {
            this.Invoke("EnableLoadUserProfile", new object[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginEnableLoadUserProfile(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EnableLoadUserProfile", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public void EndEnableLoadUserProfile(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void EnableLoadUserProfileAsync()
        {
            this.EnableLoadUserProfileAsync(null);
        }

        /// <remarks/>
        public void EnableLoadUserProfileAsync(object userState)
        {
            if ((this.EnableLoadUserProfileOperationCompleted == null))
            {
                this.EnableLoadUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableLoadUserProfileOperationCompleted);
            }
            this.InvokeAsync("EnableLoadUserProfile", new object[0], this.EnableLoadUserProfileOperationCompleted, userState);
        }

        private void OnEnableLoadUserProfileOperationCompleted(object arg)
        {
            if ((this.EnableLoadUserProfileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableLoadUserProfileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InitFeeds", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InitFeeds(int UserId, string[] feeds)
        {
            this.Invoke("InitFeeds", new object[] {
                        UserId,
                        feeds});
        }

        /// <remarks/>
        public System.IAsyncResult BeginInitFeeds(int UserId, string[] feeds, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InitFeeds", new object[] {
                        UserId,
                        feeds}, callback, asyncState);
        }

        /// <remarks/>
        public void EndInitFeeds(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void InitFeedsAsync(int UserId, string[] feeds)
        {
            this.InitFeedsAsync(UserId, feeds, null);
        }

        /// <remarks/>
        public void InitFeedsAsync(int UserId, string[] feeds, object userState)
        {
            if ((this.InitFeedsOperationCompleted == null))
            {
                this.InitFeedsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitFeedsOperationCompleted);
            }
            this.InvokeAsync("InitFeeds", new object[] {
                        UserId,
                        feeds}, this.InitFeedsOperationCompleted, userState);
        }

        private void OnInitFeedsOperationCompleted(object arg)
        {
            if ((this.InitFeedsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitFeedsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/SetResourceLanguage", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetResourceLanguage(int UserId, string resourceLanguage)
        {
            this.Invoke("SetResourceLanguage", new object[] {
                        UserId,
                        resourceLanguage});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetResourceLanguage(int UserId, string resourceLanguage, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetResourceLanguage", new object[] {
                        UserId,
                        resourceLanguage}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSetResourceLanguage(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SetResourceLanguageAsync(int UserId, string resourceLanguage)
        {
            this.SetResourceLanguageAsync(UserId, resourceLanguage, null);
        }

        /// <remarks/>
        public void SetResourceLanguageAsync(int UserId, string resourceLanguage, object userState)
        {
            if ((this.SetResourceLanguageOperationCompleted == null))
            {
                this.SetResourceLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetResourceLanguageOperationCompleted);
            }
            this.InvokeAsync("SetResourceLanguage", new object[] {
                        UserId,
                        resourceLanguage}, this.SetResourceLanguageOperationCompleted, userState);
        }

        private void OnSetResourceLanguageOperationCompleted(object arg)
        {
            if ((this.SetResourceLanguageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetResourceLanguageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryLanguages", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryLanguagesResult GetGalleryLanguages(int UserId)
        {
            object[] results = this.Invoke("GetGalleryLanguages", new object[] {
                        UserId});
            return ((GalleryLanguagesResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryLanguages(int UserId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryLanguages", new object[] {
                        UserId}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryLanguagesResult EndGetGalleryLanguages(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryLanguagesResult)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryLanguagesAsync(int UserId)
        {
            this.GetGalleryLanguagesAsync(UserId, null);
        }

        /// <remarks/>
        public void GetGalleryLanguagesAsync(int UserId, object userState)
        {
            if ((this.GetGalleryLanguagesOperationCompleted == null))
            {
                this.GetGalleryLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetGalleryLanguages", new object[] {
                        UserId}, this.GetGalleryLanguagesOperationCompleted, userState);
        }

        private void OnGetGalleryLanguagesOperationCompleted(object arg)
        {
            if ((this.GetGalleryLanguagesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryLanguagesCompleted(this, new GetGalleryLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryCategories", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryCategoriesResult GetGalleryCategories(int UserId)
        {
            object[] results = this.Invoke("GetGalleryCategories", new object[] {
                        UserId});
            return ((GalleryCategoriesResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryCategories(int UserId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryCategories", new object[] {
                        UserId}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryCategoriesResult EndGetGalleryCategories(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryCategoriesResult)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryCategoriesAsync(int UserId)
        {
            this.GetGalleryCategoriesAsync(UserId, null);
        }

        /// <remarks/>
        public void GetGalleryCategoriesAsync(int UserId, object userState)
        {
            if ((this.GetGalleryCategoriesOperationCompleted == null))
            {
                this.GetGalleryCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetGalleryCategories", new object[] {
                        UserId}, this.GetGalleryCategoriesOperationCompleted, userState);
        }

        private void OnGetGalleryCategoriesOperationCompleted(object arg)
        {
            if ((this.GetGalleryCategoriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryCategoriesCompleted(this, new GetGalleryCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryApplications", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryApplicationsResult GetGalleryApplications(int UserId, string categoryId)
        {
            object[] results = this.Invoke("GetGalleryApplications", new object[] {
                        UserId,
                        categoryId});
            return ((GalleryApplicationsResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryApplications(int UserId, string categoryId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryApplications", new object[] {
                        UserId,
                        categoryId}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryApplicationsResult EndGetGalleryApplications(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryApplicationsResult)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryApplicationsAsync(int UserId, string categoryId)
        {
            this.GetGalleryApplicationsAsync(UserId, categoryId, null);
        }

        /// <remarks/>
        public void GetGalleryApplicationsAsync(int UserId, string categoryId, object userState)
        {
            if ((this.GetGalleryApplicationsOperationCompleted == null))
            {
                this.GetGalleryApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetGalleryApplications", new object[] {
                        UserId,
                        categoryId}, this.GetGalleryApplicationsOperationCompleted, userState);
        }

        private void OnGetGalleryApplicationsOperationCompleted(object arg)
        {
            if ((this.GetGalleryApplicationsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryApplicationsCompleted(this, new GetGalleryApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryApplicationsFiltered", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryApplicationsResult GetGalleryApplicationsFiltered(int UserId, string pattern)
        {
            object[] results = this.Invoke("GetGalleryApplicationsFiltered", new object[] {
                        UserId,
                        pattern});
            return ((GalleryApplicationsResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryApplicationsFiltered(int UserId, string pattern, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryApplicationsFiltered", new object[] {
                        UserId,
                        pattern}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryApplicationsResult EndGetGalleryApplicationsFiltered(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryApplicationsResult)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryApplicationsFilteredAsync(int UserId, string pattern)
        {
            this.GetGalleryApplicationsFilteredAsync(UserId, pattern, null);
        }

        /// <remarks/>
        public void GetGalleryApplicationsFilteredAsync(int UserId, string pattern, object userState)
        {
            if ((this.GetGalleryApplicationsFilteredOperationCompleted == null))
            {
                this.GetGalleryApplicationsFilteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryApplicationsFilteredOperationCompleted);
            }
            this.InvokeAsync("GetGalleryApplicationsFiltered", new object[] {
                        UserId,
                        pattern}, this.GetGalleryApplicationsFilteredOperationCompleted, userState);
        }

        private void OnGetGalleryApplicationsFilteredOperationCompleted(object arg)
        {
            if ((this.GetGalleryApplicationsFilteredCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryApplicationsFilteredCompleted(this, new GetGalleryApplicationsFilteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/IsMsDeployInstalled", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsMsDeployInstalled()
        {
            object[] results = this.Invoke("IsMsDeployInstalled", new object[0]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginIsMsDeployInstalled(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("IsMsDeployInstalled", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public bool EndIsMsDeployInstalled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void IsMsDeployInstalledAsync()
        {
            this.IsMsDeployInstalledAsync(null);
        }

        /// <remarks/>
        public void IsMsDeployInstalledAsync(object userState)
        {
            if ((this.IsMsDeployInstalledOperationCompleted == null))
            {
                this.IsMsDeployInstalledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMsDeployInstalledOperationCompleted);
            }
            this.InvokeAsync("IsMsDeployInstalled", new object[0], this.IsMsDeployInstalledOperationCompleted, userState);
        }

        private void OnIsMsDeployInstalledOperationCompleted(object arg)
        {
            if ((this.IsMsDeployInstalledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMsDeployInstalledCompleted(this, new IsMsDeployInstalledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryApplication", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryApplicationResult GetGalleryApplication(int UserId, string id)
        {
            object[] results = this.Invoke("GetGalleryApplication", new object[] {
                        UserId,
                        id});
            return ((GalleryApplicationResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryApplication(int UserId, string id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryApplication", new object[] {
                        UserId,
                        id}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryApplicationResult EndGetGalleryApplication(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryApplicationResult)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryApplicationAsync(int UserId, string id)
        {
            this.GetGalleryApplicationAsync(UserId, id, null);
        }

        /// <remarks/>
        public void GetGalleryApplicationAsync(int UserId, string id, object userState)
        {
            if ((this.GetGalleryApplicationOperationCompleted == null))
            {
                this.GetGalleryApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryApplicationOperationCompleted);
            }
            this.InvokeAsync("GetGalleryApplication", new object[] {
                        UserId,
                        id}, this.GetGalleryApplicationOperationCompleted, userState);
        }

        private void OnGetGalleryApplicationOperationCompleted(object arg)
        {
            if ((this.GetGalleryApplicationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryApplicationCompleted(this, new GetGalleryApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryApplicationStatus", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryWebAppStatus GetGalleryApplicationStatus(int UserId, string id)
        {
            object[] results = this.Invoke("GetGalleryApplicationStatus", new object[] {
                        UserId,
                        id});
            return ((GalleryWebAppStatus)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryApplicationStatus(int UserId, string id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryApplicationStatus", new object[] {
                        UserId,
                        id}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryWebAppStatus EndGetGalleryApplicationStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryWebAppStatus)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryApplicationStatusAsync(int UserId, string id)
        {
            this.GetGalleryApplicationStatusAsync(UserId, id, null);
        }

        /// <remarks/>
        public void GetGalleryApplicationStatusAsync(int UserId, string id, object userState)
        {
            if ((this.GetGalleryApplicationStatusOperationCompleted == null))
            {
                this.GetGalleryApplicationStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryApplicationStatusOperationCompleted);
            }
            this.InvokeAsync("GetGalleryApplicationStatus", new object[] {
                        UserId,
                        id}, this.GetGalleryApplicationStatusOperationCompleted, userState);
        }

        private void OnGetGalleryApplicationStatusOperationCompleted(object arg)
        {
            if ((this.GetGalleryApplicationStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryApplicationStatusCompleted(this, new GetGalleryApplicationStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/DownloadGalleryApplication", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GalleryWebAppStatus DownloadGalleryApplication(int UserId, string id)
        {
            object[] results = this.Invoke("DownloadGalleryApplication", new object[] {
                        UserId,
                        id});
            return ((GalleryWebAppStatus)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDownloadGalleryApplication(int UserId, string id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DownloadGalleryApplication", new object[] {
                        UserId,
                        id}, callback, asyncState);
        }

        /// <remarks/>
        public GalleryWebAppStatus EndDownloadGalleryApplication(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GalleryWebAppStatus)(results[0]));
        }

        /// <remarks/>
        public void DownloadGalleryApplicationAsync(int UserId, string id)
        {
            this.DownloadGalleryApplicationAsync(UserId, id, null);
        }

        /// <remarks/>
        public void DownloadGalleryApplicationAsync(int UserId, string id, object userState)
        {
            if ((this.DownloadGalleryApplicationOperationCompleted == null))
            {
                this.DownloadGalleryApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadGalleryApplicationOperationCompleted);
            }
            this.InvokeAsync("DownloadGalleryApplication", new object[] {
                        UserId,
                        id}, this.DownloadGalleryApplicationOperationCompleted, userState);
        }

        private void OnDownloadGalleryApplicationOperationCompleted(object arg)
        {
            if ((this.DownloadGalleryApplicationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadGalleryApplicationCompleted(this, new DownloadGalleryApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GetGalleryApplicationParameters", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeploymentParametersResult GetGalleryApplicationParameters(int UserId, string id)
        {
            object[] results = this.Invoke("GetGalleryApplicationParameters", new object[] {
                        UserId,
                        id});
            return ((DeploymentParametersResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetGalleryApplicationParameters(int UserId, string id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetGalleryApplicationParameters", new object[] {
                        UserId,
                        id}, callback, asyncState);
        }

        /// <remarks/>
        public DeploymentParametersResult EndGetGalleryApplicationParameters(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeploymentParametersResult)(results[0]));
        }

        /// <remarks/>
        public void GetGalleryApplicationParametersAsync(int UserId, string id)
        {
            this.GetGalleryApplicationParametersAsync(UserId, id, null);
        }

        /// <remarks/>
        public void GetGalleryApplicationParametersAsync(int UserId, string id, object userState)
        {
            if ((this.GetGalleryApplicationParametersOperationCompleted == null))
            {
                this.GetGalleryApplicationParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGalleryApplicationParametersOperationCompleted);
            }
            this.InvokeAsync("GetGalleryApplicationParameters", new object[] {
                        UserId,
                        id}, this.GetGalleryApplicationParametersOperationCompleted, userState);
        }

        private void OnGetGalleryApplicationParametersOperationCompleted(object arg)
        {
            if ((this.GetGalleryApplicationParametersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGalleryApplicationParametersCompleted(this, new GetGalleryApplicationParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/InstallGalleryApplication", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject InstallGalleryApplication(int UserId, string id, DeploymentParameter[] updatedValues, string languageId)
        {
            object[] results = this.Invoke("InstallGalleryApplication", new object[] {
                        UserId,
                        id,
                        updatedValues,
                        languageId});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallGalleryApplication(int UserId, string id, DeploymentParameter[] updatedValues, string languageId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallGalleryApplication", new object[] {
                        UserId,
                        id,
                        updatedValues,
                        languageId}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndInstallGalleryApplication(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void InstallGalleryApplicationAsync(int UserId, string id, DeploymentParameter[] updatedValues, string languageId)
        {
            this.InstallGalleryApplicationAsync(UserId, id, updatedValues, languageId, null);
        }

        /// <remarks/>
        public void InstallGalleryApplicationAsync(int UserId, string id, DeploymentParameter[] updatedValues, string languageId, object userState)
        {
            if ((this.InstallGalleryApplicationOperationCompleted == null))
            {
                this.InstallGalleryApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallGalleryApplicationOperationCompleted);
            }
            this.InvokeAsync("InstallGalleryApplication", new object[] {
                        UserId,
                        id,
                        updatedValues,
                        languageId}, this.InstallGalleryApplicationOperationCompleted, userState);
        }

        private void OnInstallGalleryApplicationOperationCompleted(object arg)
        {
            if ((this.InstallGalleryApplicationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallGalleryApplicationCompleted(this, new InstallGalleryApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckWebManagementAccountExists", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckWebManagementAccountExists(string accountName)
        {
            object[] results = this.Invoke("CheckWebManagementAccountExists", new object[] {
                        accountName});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckWebManagementAccountExists(string accountName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckWebManagementAccountExists", new object[] {
                        accountName}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCheckWebManagementAccountExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CheckWebManagementAccountExistsAsync(string accountName)
        {
            this.CheckWebManagementAccountExistsAsync(accountName, null);
        }

        /// <remarks/>
        public void CheckWebManagementAccountExistsAsync(string accountName, object userState)
        {
            if ((this.CheckWebManagementAccountExistsOperationCompleted == null))
            {
                this.CheckWebManagementAccountExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckWebManagementAccountExistsOperationCompleted);
            }
            this.InvokeAsync("CheckWebManagementAccountExists", new object[] {
                        accountName}, this.CheckWebManagementAccountExistsOperationCompleted, userState);
        }

        private void OnCheckWebManagementAccountExistsOperationCompleted(object arg)
        {
            if ((this.CheckWebManagementAccountExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckWebManagementAccountExistsCompleted(this, new CheckWebManagementAccountExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/CheckWebManagementPasswordComplexity", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CheckWebManagementPasswordComplexity(string accountPassword)
        {
            object[] results = this.Invoke("CheckWebManagementPasswordComplexity", new object[] {
                        accountPassword});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckWebManagementPasswordComplexity(string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckWebManagementPasswordComplexity", new object[] {
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndCheckWebManagementPasswordComplexity(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void CheckWebManagementPasswordComplexityAsync(string accountPassword)
        {
            this.CheckWebManagementPasswordComplexityAsync(accountPassword, null);
        }

        /// <remarks/>
        public void CheckWebManagementPasswordComplexityAsync(string accountPassword, object userState)
        {
            if ((this.CheckWebManagementPasswordComplexityOperationCompleted == null))
            {
                this.CheckWebManagementPasswordComplexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckWebManagementPasswordComplexityOperationCompleted);
            }
            this.InvokeAsync("CheckWebManagementPasswordComplexity", new object[] {
                        accountPassword}, this.CheckWebManagementPasswordComplexityOperationCompleted, userState);
        }

        private void OnCheckWebManagementPasswordComplexityOperationCompleted(object arg)
        {
            if ((this.CheckWebManagementPasswordComplexityCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckWebManagementPasswordComplexityCompleted(this, new CheckWebManagementPasswordComplexityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/GrantWebManagementAccess", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GrantWebManagementAccess(string siteId, string accountName, string accountPassword)
        {
            this.Invoke("GrantWebManagementAccess", new object[] {
                        siteId,
                        accountName,
                        accountPassword});
        }

        /// <remarks/>
        public System.IAsyncResult BeginGrantWebManagementAccess(string siteId, string accountName, string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GrantWebManagementAccess", new object[] {
                        siteId,
                        accountName,
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public void EndGrantWebManagementAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void GrantWebManagementAccessAsync(string siteId, string accountName, string accountPassword)
        {
            this.GrantWebManagementAccessAsync(siteId, accountName, accountPassword, null);
        }

        /// <remarks/>
        public void GrantWebManagementAccessAsync(string siteId, string accountName, string accountPassword, object userState)
        {
            if ((this.GrantWebManagementAccessOperationCompleted == null))
            {
                this.GrantWebManagementAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantWebManagementAccessOperationCompleted);
            }
            this.InvokeAsync("GrantWebManagementAccess", new object[] {
                        siteId,
                        accountName,
                        accountPassword}, this.GrantWebManagementAccessOperationCompleted, userState);
        }

        private void OnGrantWebManagementAccessOperationCompleted(object arg)
        {
            if ((this.GrantWebManagementAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantWebManagementAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/RevokeWebManagementAccess", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeWebManagementAccess(string siteId, string accountName)
        {
            this.Invoke("RevokeWebManagementAccess", new object[] {
                        siteId,
                        accountName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRevokeWebManagementAccess(string siteId, string accountName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RevokeWebManagementAccess", new object[] {
                        siteId,
                        accountName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRevokeWebManagementAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RevokeWebManagementAccessAsync(string siteId, string accountName)
        {
            this.RevokeWebManagementAccessAsync(siteId, accountName, null);
        }

        /// <remarks/>
        public void RevokeWebManagementAccessAsync(string siteId, string accountName, object userState)
        {
            if ((this.RevokeWebManagementAccessOperationCompleted == null))
            {
                this.RevokeWebManagementAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeWebManagementAccessOperationCompleted);
            }
            this.InvokeAsync("RevokeWebManagementAccess", new object[] {
                        siteId,
                        accountName}, this.RevokeWebManagementAccessOperationCompleted, userState);
        }

        private void OnRevokeWebManagementAccessOperationCompleted(object arg)
        {
            if ((this.RevokeWebManagementAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeWebManagementAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/server/ChangeWebManagementAccessPassword", RequestNamespace = "http://smbsaas/solidcp/server/", ResponseNamespace = "http://smbsaas/solidcp/server/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeWebManagementAccessPassword(string accountName, string accountPassword)
        {
            this.Invoke("ChangeWebManagementAccessPassword", new object[] {
                        accountName,
                        accountPassword});
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeWebManagementAccessPassword(string accountName, string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeWebManagementAccessPassword", new object[] {
                        accountName,
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public void EndChangeWebManagementAccessPassword(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ChangeWebManagementAccessPasswordAsync(string accountName, string accountPassword)
        {
            this.ChangeWebManagementAccessPasswordAsync(accountName, accountPassword, null);
        }

        /// <remarks/>
        public void ChangeWebManagementAccessPasswordAsync(string accountName, string accountPassword, object userState)
        {
            if ((this.ChangeWebManagementAccessPasswordOperationCompleted == null))
            {
                this.ChangeWebManagementAccessPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeWebManagementAccessPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeWebManagementAccessPassword", new object[] {
                        accountName,
                        accountPassword}, this.ChangeWebManagementAccessPasswordOperationCompleted, userState);
        }

        private void OnChangeWebManagementAccessPasswordOperationCompleted(object arg)
        {
            if ((this.ChangeWebManagementAccessPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeWebManagementAccessPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void generateCSRCompletedEventHandler(object sender, generateCSRCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateCSRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal generateCSRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void generateRenewalCSRCompletedEventHandler(object sender, generateRenewalCSRCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateRenewalCSRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal generateRenewalCSRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void getCertificateCompletedEventHandler(object sender, getCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void installCertificateCompletedEventHandler(object sender, installCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class installCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal installCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void installPFXCompletedEventHandler(object sender, installPFXCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class installPFXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal installPFXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void exportCertificateCompletedEventHandler(object sender, exportCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class exportCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal exportCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void getServerCertificatesCompletedEventHandler(object sender, getServerCertificatesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getServerCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCertificateCompletedEventHandler(object sender, DeleteCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ImportCertificateCompletedEventHandler(object sender, ImportCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckCertificateCompletedEventHandler(object sender, CheckCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDirectoryBrowseEnabledCompletedEventHandler(object sender, GetDirectoryBrowseEnabledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirectoryBrowseEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDirectoryBrowseEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetDirectoryBrowseEnabledCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeSiteStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteStateCompletedEventHandler(object sender, GetSiteStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ServerState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ServerState)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteIdCompletedEventHandler(object sender, GetSiteIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSitesAccountsCompletedEventHandler(object sender, GetSitesAccountsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSitesAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSitesAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SiteExistsCompletedEventHandler(object sender, SiteExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiteExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SiteExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSitesCompletedEventHandler(object sender, GetSitesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteCompletedEventHandler(object sender, GetSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebSite Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebSite)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteBindingsCompletedEventHandler(object sender, GetSiteBindingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteBindingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteBindingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ServerBinding[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ServerBinding[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateSiteCompletedEventHandler(object sender, CreateSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSiteBindingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSiteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeAppPoolStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAppPoolStateCompletedEventHandler(object sender, GetAppPoolStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppPoolStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAppPoolStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public AppPoolState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((AppPoolState)(this.results[0]));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateEnterpriseStorageAppVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);





    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void VirtualDirectoryExistsCompletedEventHandler(object sender, VirtualDirectoryExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VirtualDirectoryExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal VirtualDirectoryExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVirtualDirectoriesCompletedEventHandler(object sender, GetVirtualDirectoriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVirtualDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebVirtualDirectory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebVirtualDirectory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVirtualDirectoryCompletedEventHandler(object sender, GetVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebVirtualDirectory Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebVirtualDirectory)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);








    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AppVirtualDirectoryExistsCompletedEventHandler(object sender, AppVirtualDirectoryExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppVirtualDirectoryExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AppVirtualDirectoryExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAppVirtualDirectoriesCompletedEventHandler(object sender, GetAppVirtualDirectoriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppVirtualDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAppVirtualDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebAppVirtualDirectory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAppVirtualDirectoryCompletedEventHandler(object sender, GetAppVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAppVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebAppVirtualDirectory Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebAppVirtualDirectory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateAppVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateAppVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteAppVirtualDirectoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);



    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsFrontPageSystemInstalledCompletedEventHandler(object sender, IsFrontPageSystemInstalledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFrontPageSystemInstalledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IsFrontPageSystemInstalledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsFrontPageInstalledCompletedEventHandler(object sender, IsFrontPageInstalledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFrontPageInstalledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IsFrontPageInstalledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallFrontPageCompletedEventHandler(object sender, InstallFrontPageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallFrontPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallFrontPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UninstallFrontPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeFrontPagePasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsColdFusionSystemInstalledCompletedEventHandler(object sender, IsColdFusionSystemInstalledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsColdFusionSystemInstalledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IsColdFusionSystemInstalledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GrantWebSiteAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallSecuredFoldersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UninstallSecuredFoldersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebFolder[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebFolder[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFolderCompletedEventHandler(object sender, GetFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebUser[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebUser[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebUser Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebUser)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGroupsCompletedEventHandler(object sender, GetGroupsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGroupCompletedEventHandler(object sender, GetGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeStatusCompletedEventHandler(object sender, GetHeliconApeStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HeliconApeStatus Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HeliconApeStatus)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallHeliconApeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableHeliconApeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DisableHeliconApeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeFoldersCompletedEventHandler(object sender, GetHeliconApeFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessFolder[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessFolder[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeHttpdFolderCompletedEventHandler(object sender, GetHeliconApeHttpdFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeHttpdFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeHttpdFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeFolderCompletedEventHandler(object sender, GetHeliconApeFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeHttpdFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHeliconApeFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeUsersCompletedEventHandler(object sender, GetHeliconApeUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessUser[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessUser[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeUserCompletedEventHandler(object sender, GetHeliconApeUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessUser Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessUser)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHeliconApeUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeGroupsCompletedEventHandler(object sender, GetHeliconApeGroupsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeGroupCompletedEventHandler(object sender, GetHeliconApeGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GrantWebDeployPublishingAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeWebDeployPublishingAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHeliconApeGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetZooApplicationsCompletedEventHandler(object sender, GetZooApplicationsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZooApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetZooApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebAppVirtualDirectory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetZooEnvironmentVariableCompletedEventHandler(object sender, SetZooEnvironmentVariableCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetZooEnvironmentVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetZooEnvironmentVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetZooConsoleEnabledCompletedEventHandler(object sender, SetZooConsoleEnabledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetZooConsoleEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetZooConsoleEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetZooConsoleDisabledCompletedEventHandler(object sender, SetZooConsoleDisabledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetZooConsoleDisabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetZooConsoleDisabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckLoadUserProfileCompletedEventHandler(object sender, CheckLoadUserProfileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoadUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckLoadUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableLoadUserProfileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InitFeedsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetResourceLanguageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryLanguagesCompletedEventHandler(object sender, GetGalleryLanguagesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryLanguagesResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryLanguagesResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryCategoriesCompletedEventHandler(object sender, GetGalleryCategoriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryCategoriesResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryCategoriesResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryApplicationsCompletedEventHandler(object sender, GetGalleryApplicationsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryApplicationsResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryApplicationsResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryApplicationsFilteredCompletedEventHandler(object sender, GetGalleryApplicationsFilteredCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryApplicationsFilteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryApplicationsFilteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryApplicationsResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryApplicationsResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsMsDeployInstalledCompletedEventHandler(object sender, IsMsDeployInstalledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMsDeployInstalledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IsMsDeployInstalledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryApplicationCompletedEventHandler(object sender, GetGalleryApplicationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryApplicationResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryApplicationResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryApplicationStatusCompletedEventHandler(object sender, GetGalleryApplicationStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryApplicationStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryApplicationStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryWebAppStatus Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryWebAppStatus)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DownloadGalleryApplicationCompletedEventHandler(object sender, DownloadGalleryApplicationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadGalleryApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadGalleryApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GalleryWebAppStatus Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GalleryWebAppStatus)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGalleryApplicationParametersCompletedEventHandler(object sender, GetGalleryApplicationParametersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGalleryApplicationParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetGalleryApplicationParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DeploymentParametersResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DeploymentParametersResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallGalleryApplicationCompletedEventHandler(object sender, InstallGalleryApplicationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallGalleryApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallGalleryApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckWebManagementAccountExistsCompletedEventHandler(object sender, CheckWebManagementAccountExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckWebManagementAccountExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckWebManagementAccountExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckWebManagementPasswordComplexityCompletedEventHandler(object sender, CheckWebManagementPasswordComplexityCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckWebManagementPasswordComplexityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckWebManagementPasswordComplexityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GrantWebManagementAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeWebManagementAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeWebManagementAccessPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
