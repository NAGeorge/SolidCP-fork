// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 
namespace SolidCP.Mail.SM10
{
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.ComponentModel;
	using System.Web.Services.Protocols;
	using System.Web.Services;

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "svcDomainAdminSoap", Namespace = "http://tempuri.org/")]
	public partial class svcDomainAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback AddDomainOperationCompleted;

		private System.Threading.SendOrPostCallback AddDomainExOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateDomainNameAndPathOperationCompleted;

		private System.Threading.SendOrPostCallback GenerateDomainKeysCertOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainKeysCertOperationCompleted;

		private System.Threading.SendOrPostCallback RenameDomainOperationCompleted;

		private System.Threading.SendOrPostCallback ReloadDomainOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateDomainOperationCompleted;

		private System.Threading.SendOrPostCallback GetRequestedDomainDefaultsOperationCompleted;

		private System.Threading.SendOrPostCallback GetRequestedDomainSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback SetRequestedDomainDefaultsOperationCompleted;

		private System.Threading.SendOrPostCallback SetRequestedDomainSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteDomainOperationCompleted;

		private System.Threading.SendOrPostCallback GetAllDomainsOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainCountsOperationCompleted;

		private System.Threading.SendOrPostCallback GetAllDomainAliasesOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainUsersOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainStatisticsOperationCompleted;

		private System.Threading.SendOrPostCallback GetAllDomainStatisticsOperationCompleted;

		private System.Threading.SendOrPostCallback GetPrimaryDomainAdminOperationCompleted;

		private System.Threading.SendOrPostCallback SetPrimaryDomainAdminOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainDefaultsOperationCompleted;

		private System.Threading.SendOrPostCallback DisableDomainOperationCompleted;

		private System.Threading.SendOrPostCallback EnableDomainOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainInfoOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainForwardingOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainForwardingBlockOperationCompleted;

		private System.Threading.SendOrPostCallback GetDomainForwardingBlockByTargetAddressOperationCompleted;

		private System.Threading.SendOrPostCallback SetDomainForwardingBlockOperationCompleted;

		private System.Threading.SendOrPostCallback SetDomainForwardingBlockByTargetAddressOperationCompleted;

		private System.Threading.SendOrPostCallback AddDomainForwardingBlockOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteDomainForwardingBlockOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteDomainForwardBlockByTargetAddressOperationCompleted;

		private System.Threading.SendOrPostCallback SetDomainArchiveRuleOperationCompleted;

		/// <remarks/>
		public svcDomainAdmin()
		{
			this.Url = "http://127.0.0.1:9998/Services/svcDomainAdmin.asmx";
		}

		/// <remarks/>
		public event AddDomainCompletedEventHandler AddDomainCompleted;

		/// <remarks/>
		public event AddDomainExCompletedEventHandler AddDomainExCompleted;

		/// <remarks/>
		public event UpdateDomainNameAndPathCompletedEventHandler UpdateDomainNameAndPathCompleted;

		/// <remarks/>
		public event GenerateDomainKeysCertCompletedEventHandler GenerateDomainKeysCertCompleted;

		/// <remarks/>
		public event GetDomainKeysCertCompletedEventHandler GetDomainKeysCertCompleted;

		/// <remarks/>
		public event RenameDomainCompletedEventHandler RenameDomainCompleted;

		/// <remarks/>
		public event ReloadDomainCompletedEventHandler ReloadDomainCompleted;

		/// <remarks/>
		public event UpdateDomainCompletedEventHandler UpdateDomainCompleted;

		/// <remarks/>
		public event GetRequestedDomainDefaultsCompletedEventHandler GetRequestedDomainDefaultsCompleted;

		/// <remarks/>
		public event GetRequestedDomainSettingsCompletedEventHandler GetRequestedDomainSettingsCompleted;

		/// <remarks/>
		public event SetRequestedDomainDefaultsCompletedEventHandler SetRequestedDomainDefaultsCompleted;

		/// <remarks/>
		public event SetRequestedDomainSettingsCompletedEventHandler SetRequestedDomainSettingsCompleted;

		/// <remarks/>
		public event DeleteDomainCompletedEventHandler DeleteDomainCompleted;

		/// <remarks/>
		public event GetAllDomainsCompletedEventHandler GetAllDomainsCompleted;

		/// <remarks/>
		public event GetDomainCountsCompletedEventHandler GetDomainCountsCompleted;

		/// <remarks/>
		public event GetAllDomainAliasesCompletedEventHandler GetAllDomainAliasesCompleted;

		/// <remarks/>
		public event GetDomainUsersCompletedEventHandler GetDomainUsersCompleted;

		/// <remarks/>
		public event GetDomainStatisticsCompletedEventHandler GetDomainStatisticsCompleted;

		/// <remarks/>
		public event GetAllDomainStatisticsCompletedEventHandler GetAllDomainStatisticsCompleted;

		/// <remarks/>
		public event GetPrimaryDomainAdminCompletedEventHandler GetPrimaryDomainAdminCompleted;

		/// <remarks/>
		public event SetPrimaryDomainAdminCompletedEventHandler SetPrimaryDomainAdminCompleted;

		/// <remarks/>
		public event GetDomainDefaultsCompletedEventHandler GetDomainDefaultsCompleted;

		/// <remarks/>
		public event DisableDomainCompletedEventHandler DisableDomainCompleted;

		/// <remarks/>
		public event EnableDomainCompletedEventHandler EnableDomainCompleted;

		/// <remarks/>
		public event GetDomainInfoCompletedEventHandler GetDomainInfoCompleted;

		/// <remarks/>
		public event GetDomainSettingsCompletedEventHandler GetDomainSettingsCompleted;

		/// <remarks/>
		public event GetDomainForwardingCompletedEventHandler GetDomainForwardingCompleted;

		/// <remarks/>
		public event GetDomainForwardingBlockCompletedEventHandler GetDomainForwardingBlockCompleted;

		/// <remarks/>
		public event GetDomainForwardingBlockByTargetAddressCompletedEventHandler GetDomainForwardingBlockByTargetAddressCompleted;

		/// <remarks/>
		public event SetDomainForwardingBlockCompletedEventHandler SetDomainForwardingBlockCompleted;

		/// <remarks/>
		public event SetDomainForwardingBlockByTargetAddressCompletedEventHandler SetDomainForwardingBlockByTargetAddressCompleted;

		/// <remarks/>
		public event AddDomainForwardingBlockCompletedEventHandler AddDomainForwardingBlockCompleted;

		/// <remarks/>
		public event DeleteDomainForwardingBlockCompletedEventHandler DeleteDomainForwardingBlockCompleted;

		/// <remarks/>
		public event DeleteDomainForwardBlockByTargetAddressCompletedEventHandler DeleteDomainForwardBlockByTargetAddressCompleted;

		/// <remarks/>
		public event SetDomainArchiveRuleCompletedEventHandler SetDomainArchiveRuleCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDomain(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string Path,
					string PrimaryDomainAdminUserName,
					string PrimaryDomainAdminPassword,
					string PrimaryDomainAdminFirstName,
					string PrimaryDomainAdminLastName,
					string IP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress)
		{
			object[] results = this.Invoke("AddDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    Path,
                    PrimaryDomainAdminUserName,
                    PrimaryDomainAdminPassword,
                    PrimaryDomainAdminFirstName,
                    PrimaryDomainAdminLastName,
                    IP,
                    ImapPort,
                    PopPort,
                    SmtpPort,
                    MaxAliases,
                    MaxDomainSizeInMB,
                    MaxDomainUsers,
                    MaxMailboxSizeInMB,
                    MaxMessageSize,
                    MaxRecipients,
                    MaxDomainAliases,
                    MaxLists,
                    ShowDomainAliasMenu,
                    ShowContentFilteringMenu,
                    ShowSpamMenu,
                    ShowStatsMenu,
                    RequireSmtpAuthentication,
                    ShowListMenu,
                    ListCommandAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDomain(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string Path,
					string PrimaryDomainAdminUserName,
					string PrimaryDomainAdminPassword,
					string PrimaryDomainAdminFirstName,
					string PrimaryDomainAdminLastName,
					string IP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress,
					System.AsyncCallback callback,
					object asyncState)
		{
			return this.BeginInvoke("AddDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    Path,
                    PrimaryDomainAdminUserName,
                    PrimaryDomainAdminPassword,
                    PrimaryDomainAdminFirstName,
                    PrimaryDomainAdminLastName,
                    IP,
                    ImapPort,
                    PopPort,
                    SmtpPort,
                    MaxAliases,
                    MaxDomainSizeInMB,
                    MaxDomainUsers,
                    MaxMailboxSizeInMB,
                    MaxMessageSize,
                    MaxRecipients,
                    MaxDomainAliases,
                    MaxLists,
                    ShowDomainAliasMenu,
                    ShowContentFilteringMenu,
                    ShowSpamMenu,
                    ShowStatsMenu,
                    RequireSmtpAuthentication,
                    ShowListMenu,
                    ListCommandAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDomainAsync(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string Path,
					string PrimaryDomainAdminUserName,
					string PrimaryDomainAdminPassword,
					string PrimaryDomainAdminFirstName,
					string PrimaryDomainAdminLastName,
					string IP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress)
		{
			this.AddDomainAsync(AuthUserName, AuthPassword, DomainName, Path, PrimaryDomainAdminUserName, PrimaryDomainAdminPassword, PrimaryDomainAdminFirstName, PrimaryDomainAdminLastName, IP, ImapPort, PopPort, SmtpPort, MaxAliases, MaxDomainSizeInMB, MaxDomainUsers, MaxMailboxSizeInMB, MaxMessageSize, MaxRecipients, MaxDomainAliases, MaxLists, ShowDomainAliasMenu, ShowContentFilteringMenu, ShowSpamMenu, ShowStatsMenu, RequireSmtpAuthentication, ShowListMenu, ListCommandAddress, null);
		}

		/// <remarks/>
		public void AddDomainAsync(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string Path,
					string PrimaryDomainAdminUserName,
					string PrimaryDomainAdminPassword,
					string PrimaryDomainAdminFirstName,
					string PrimaryDomainAdminLastName,
					string IP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress,
					object userState)
		{
			if ((this.AddDomainOperationCompleted == null))
			{
				this.AddDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainOperationCompleted);
			}
			this.InvokeAsync("AddDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    Path,
                    PrimaryDomainAdminUserName,
                    PrimaryDomainAdminPassword,
                    PrimaryDomainAdminFirstName,
                    PrimaryDomainAdminLastName,
                    IP,
                    ImapPort,
                    PopPort,
                    SmtpPort,
                    MaxAliases,
                    MaxDomainSizeInMB,
                    MaxDomainUsers,
                    MaxMailboxSizeInMB,
                    MaxMessageSize,
                    MaxRecipients,
                    MaxDomainAliases,
                    MaxLists,
                    ShowDomainAliasMenu,
                    ShowContentFilteringMenu,
                    ShowSpamMenu,
                    ShowStatsMenu,
                    RequireSmtpAuthentication,
                    ShowListMenu,
                    ListCommandAddress}, this.AddDomainOperationCompleted, userState);
		}

		private void OnAddDomainOperationCompleted(object arg)
		{
			if ((this.AddDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDomainCompleted(this, new AddDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomainEx", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDomainEx(string AuthUserName, string AuthPassword, string DomainName, string Path, string PrimaryDomainAdminUserName, string PrimaryDomainAdminPassword, string PrimaryDomainAdminFirstName, string PrimaryDomainAdminLastName, string IP)
		{
			object[] results = this.Invoke("AddDomainEx", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    Path,
                    PrimaryDomainAdminUserName,
                    PrimaryDomainAdminPassword,
                    PrimaryDomainAdminFirstName,
                    PrimaryDomainAdminLastName,
                    IP});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDomainEx(string AuthUserName, string AuthPassword, string DomainName, string Path, string PrimaryDomainAdminUserName, string PrimaryDomainAdminPassword, string PrimaryDomainAdminFirstName, string PrimaryDomainAdminLastName, string IP, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddDomainEx", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    Path,
                    PrimaryDomainAdminUserName,
                    PrimaryDomainAdminPassword,
                    PrimaryDomainAdminFirstName,
                    PrimaryDomainAdminLastName,
                    IP}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDomainEx(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDomainExAsync(string AuthUserName, string AuthPassword, string DomainName, string Path, string PrimaryDomainAdminUserName, string PrimaryDomainAdminPassword, string PrimaryDomainAdminFirstName, string PrimaryDomainAdminLastName, string IP)
		{
			this.AddDomainExAsync(AuthUserName, AuthPassword, DomainName, Path, PrimaryDomainAdminUserName, PrimaryDomainAdminPassword, PrimaryDomainAdminFirstName, PrimaryDomainAdminLastName, IP, null);
		}

		/// <remarks/>
		public void AddDomainExAsync(string AuthUserName, string AuthPassword, string DomainName, string Path, string PrimaryDomainAdminUserName, string PrimaryDomainAdminPassword, string PrimaryDomainAdminFirstName, string PrimaryDomainAdminLastName, string IP, object userState)
		{
			if ((this.AddDomainExOperationCompleted == null))
			{
				this.AddDomainExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainExOperationCompleted);
			}
			this.InvokeAsync("AddDomainEx", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    Path,
                    PrimaryDomainAdminUserName,
                    PrimaryDomainAdminPassword,
                    PrimaryDomainAdminFirstName,
                    PrimaryDomainAdminLastName,
                    IP}, this.AddDomainExOperationCompleted, userState);
		}

		private void OnAddDomainExOperationCompleted(object arg)
		{
			if ((this.AddDomainExCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDomainExCompleted(this, new AddDomainExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDomainNameAndPath", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateDomainNameAndPath(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, string NewDomainPath)
		{
			object[] results = this.Invoke("UpdateDomainNameAndPath", new object[] {
                    AuthUserName,
                    AuthPassword,
                    OldDomainName,
                    NewDomainName,
                    NewDomainPath});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateDomainNameAndPath(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, string NewDomainPath, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateDomainNameAndPath", new object[] {
                    AuthUserName,
                    AuthPassword,
                    OldDomainName,
                    NewDomainName,
                    NewDomainPath}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateDomainNameAndPath(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateDomainNameAndPathAsync(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, string NewDomainPath)
		{
			this.UpdateDomainNameAndPathAsync(AuthUserName, AuthPassword, OldDomainName, NewDomainName, NewDomainPath, null);
		}

		/// <remarks/>
		public void UpdateDomainNameAndPathAsync(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, string NewDomainPath, object userState)
		{
			if ((this.UpdateDomainNameAndPathOperationCompleted == null))
			{
				this.UpdateDomainNameAndPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDomainNameAndPathOperationCompleted);
			}
			this.InvokeAsync("UpdateDomainNameAndPath", new object[] {
                    AuthUserName,
                    AuthPassword,
                    OldDomainName,
                    NewDomainName,
                    NewDomainPath}, this.UpdateDomainNameAndPathOperationCompleted, userState);
		}

		private void OnUpdateDomainNameAndPathOperationCompleted(object arg)
		{
			if ((this.UpdateDomainNameAndPathCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateDomainNameAndPathCompleted(this, new UpdateDomainNameAndPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateDomainKeysCert", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainKeyResult GenerateDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName, int KeySize, string selector)
		{
			object[] results = this.Invoke("GenerateDomainKeysCert", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    KeySize,
                    selector});
			return ((DomainKeyResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGenerateDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName, int KeySize, string selector, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GenerateDomainKeysCert", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    KeySize,
                    selector}, callback, asyncState);
		}

		/// <remarks/>
		public DomainKeyResult EndGenerateDomainKeysCert(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainKeyResult)(results[0]));
		}

		/// <remarks/>
		public void GenerateDomainKeysCertAsync(string AuthUserName, string AuthPassword, string DomainName, int KeySize, string selector)
		{
			this.GenerateDomainKeysCertAsync(AuthUserName, AuthPassword, DomainName, KeySize, selector, null);
		}

		/// <remarks/>
		public void GenerateDomainKeysCertAsync(string AuthUserName, string AuthPassword, string DomainName, int KeySize, string selector, object userState)
		{
			if ((this.GenerateDomainKeysCertOperationCompleted == null))
			{
				this.GenerateDomainKeysCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateDomainKeysCertOperationCompleted);
			}
			this.InvokeAsync("GenerateDomainKeysCert", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    KeySize,
                    selector}, this.GenerateDomainKeysCertOperationCompleted, userState);
		}

		private void OnGenerateDomainKeysCertOperationCompleted(object arg)
		{
			if ((this.GenerateDomainKeysCertCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GenerateDomainKeysCertCompleted(this, new GenerateDomainKeysCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainKeysCert", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainKeyResult GetDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetDomainKeysCert", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((DomainKeyResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainKeysCert(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainKeysCert", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public DomainKeyResult EndGetDomainKeysCert(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainKeyResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainKeysCertAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetDomainKeysCertAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetDomainKeysCertAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetDomainKeysCertOperationCompleted == null))
			{
				this.GetDomainKeysCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainKeysCertOperationCompleted);
			}
			this.InvokeAsync("GetDomainKeysCert", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetDomainKeysCertOperationCompleted, userState);
		}

		private void OnGetDomainKeysCertOperationCompleted(object arg)
		{
			if ((this.GetDomainKeysCertCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainKeysCertCompleted(this, new GetDomainKeysCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RenameDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RenameDomain(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName)
		{
			object[] results = this.Invoke("RenameDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    OldDomainName,
                    NewDomainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRenameDomain(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RenameDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    OldDomainName,
                    NewDomainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRenameDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RenameDomainAsync(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName)
		{
			this.RenameDomainAsync(AuthUserName, AuthPassword, OldDomainName, NewDomainName, null);
		}

		/// <remarks/>
		public void RenameDomainAsync(string AuthUserName, string AuthPassword, string OldDomainName, string NewDomainName, object userState)
		{
			if ((this.RenameDomainOperationCompleted == null))
			{
				this.RenameDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameDomainOperationCompleted);
			}
			this.InvokeAsync("RenameDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    OldDomainName,
                    NewDomainName}, this.RenameDomainOperationCompleted, userState);
		}

		private void OnRenameDomainOperationCompleted(object arg)
		{
			if ((this.RenameDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RenameDomainCompleted(this, new RenameDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReloadDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult ReloadDomain(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("ReloadDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginReloadDomain(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ReloadDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndReloadDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void ReloadDomainAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.ReloadDomainAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void ReloadDomainAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.ReloadDomainOperationCompleted == null))
			{
				this.ReloadDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadDomainOperationCompleted);
			}
			this.InvokeAsync("ReloadDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.ReloadDomainOperationCompleted, userState);
		}

		private void OnReloadDomainOperationCompleted(object arg)
		{
			if ((this.ReloadDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ReloadDomainCompleted(this, new ReloadDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateDomain(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string ServerIP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress)
		{
			object[] results = this.Invoke("UpdateDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ServerIP,
                    ImapPort,
                    PopPort,
                    SmtpPort,
                    MaxAliases,
                    MaxDomainSizeInMB,
                    MaxDomainUsers,
                    MaxMailboxSizeInMB,
                    MaxMessageSize,
                    MaxRecipients,
                    MaxDomainAliases,
                    MaxLists,
                    ShowDomainAliasMenu,
                    ShowContentFilteringMenu,
                    ShowSpamMenu,
                    ShowStatsMenu,
                    RequireSmtpAuthentication,
                    ShowListMenu,
                    ListCommandAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateDomain(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string ServerIP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress,
					System.AsyncCallback callback,
					object asyncState)
		{
			return this.BeginInvoke("UpdateDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ServerIP,
                    ImapPort,
                    PopPort,
                    SmtpPort,
                    MaxAliases,
                    MaxDomainSizeInMB,
                    MaxDomainUsers,
                    MaxMailboxSizeInMB,
                    MaxMessageSize,
                    MaxRecipients,
                    MaxDomainAliases,
                    MaxLists,
                    ShowDomainAliasMenu,
                    ShowContentFilteringMenu,
                    ShowSpamMenu,
                    ShowStatsMenu,
                    RequireSmtpAuthentication,
                    ShowListMenu,
                    ListCommandAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateDomainAsync(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string ServerIP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress)
		{
			this.UpdateDomainAsync(AuthUserName, AuthPassword, DomainName, ServerIP, ImapPort, PopPort, SmtpPort, MaxAliases, MaxDomainSizeInMB, MaxDomainUsers, MaxMailboxSizeInMB, MaxMessageSize, MaxRecipients, MaxDomainAliases, MaxLists, ShowDomainAliasMenu, ShowContentFilteringMenu, ShowSpamMenu, ShowStatsMenu, RequireSmtpAuthentication, ShowListMenu, ListCommandAddress, null);
		}

		/// <remarks/>
		public void UpdateDomainAsync(
					string AuthUserName,
					string AuthPassword,
					string DomainName,
					string ServerIP,
					int ImapPort,
					int PopPort,
					int SmtpPort,
					int MaxAliases,
					int MaxDomainSizeInMB,
					int MaxDomainUsers,
					int MaxMailboxSizeInMB,
					int MaxMessageSize,
					int MaxRecipients,
					int MaxDomainAliases,
					int MaxLists,
					bool ShowDomainAliasMenu,
					bool ShowContentFilteringMenu,
					bool ShowSpamMenu,
					bool ShowStatsMenu,
					bool RequireSmtpAuthentication,
					bool ShowListMenu,
					string ListCommandAddress,
					object userState)
		{
			if ((this.UpdateDomainOperationCompleted == null))
			{
				this.UpdateDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDomainOperationCompleted);
			}
			this.InvokeAsync("UpdateDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ServerIP,
                    ImapPort,
                    PopPort,
                    SmtpPort,
                    MaxAliases,
                    MaxDomainSizeInMB,
                    MaxDomainUsers,
                    MaxMailboxSizeInMB,
                    MaxMessageSize,
                    MaxRecipients,
                    MaxDomainAliases,
                    MaxLists,
                    ShowDomainAliasMenu,
                    ShowContentFilteringMenu,
                    ShowSpamMenu,
                    ShowStatsMenu,
                    RequireSmtpAuthentication,
                    ShowListMenu,
                    ListCommandAddress}, this.UpdateDomainOperationCompleted, userState);
		}

		private void OnUpdateDomainOperationCompleted(object arg)
		{
			if ((this.UpdateDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateDomainCompleted(this, new UpdateDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedDomainDefaults", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SettingsRequestResult GetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] requestedSettings)
		{
			object[] results = this.Invoke("GetRequestedDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword,
                    requestedSettings});
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] requestedSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRequestedDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword,
                    requestedSettings}, callback, asyncState);
		}

		/// <remarks/>
		public SettingsRequestResult EndGetRequestedDomainDefaults(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public void GetRequestedDomainDefaultsAsync(string AuthUserName, string AuthPassword, string[] requestedSettings)
		{
			this.GetRequestedDomainDefaultsAsync(AuthUserName, AuthPassword, requestedSettings, null);
		}

		/// <remarks/>
		public void GetRequestedDomainDefaultsAsync(string AuthUserName, string AuthPassword, string[] requestedSettings, object userState)
		{
			if ((this.GetRequestedDomainDefaultsOperationCompleted == null))
			{
				this.GetRequestedDomainDefaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestedDomainDefaultsOperationCompleted);
			}
			this.InvokeAsync("GetRequestedDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword,
                    requestedSettings}, this.GetRequestedDomainDefaultsOperationCompleted, userState);
		}

		private void OnGetRequestedDomainDefaultsOperationCompleted(object arg)
		{
			if ((this.GetRequestedDomainDefaultsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRequestedDomainDefaultsCompleted(this, new GetRequestedDomainDefaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedDomainSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SettingsRequestResult GetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] requestedSettings)
		{
			object[] results = this.Invoke("GetRequestedDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    requestedSettings});
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] requestedSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRequestedDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    requestedSettings}, callback, asyncState);
		}

		/// <remarks/>
		public SettingsRequestResult EndGetRequestedDomainSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public void GetRequestedDomainSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string[] requestedSettings)
		{
			this.GetRequestedDomainSettingsAsync(AuthUserName, AuthPassword, DomainName, requestedSettings, null);
		}

		/// <remarks/>
		public void GetRequestedDomainSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string[] requestedSettings, object userState)
		{
			if ((this.GetRequestedDomainSettingsOperationCompleted == null))
			{
				this.GetRequestedDomainSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestedDomainSettingsOperationCompleted);
			}
			this.InvokeAsync("GetRequestedDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    requestedSettings}, this.GetRequestedDomainSettingsOperationCompleted, userState);
		}

		private void OnGetRequestedDomainSettingsOperationCompleted(object arg)
		{
			if ((this.GetRequestedDomainSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRequestedDomainSettingsCompleted(this, new GetRequestedDomainSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedDomainDefaults", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] newSettings)
		{
			object[] results = this.Invoke("SetRequestedDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newSettings});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetRequestedDomainDefaults(string AuthUserName, string AuthPassword, string[] newSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetRequestedDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newSettings}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetRequestedDomainDefaults(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetRequestedDomainDefaultsAsync(string AuthUserName, string AuthPassword, string[] newSettings)
		{
			this.SetRequestedDomainDefaultsAsync(AuthUserName, AuthPassword, newSettings, null);
		}

		/// <remarks/>
		public void SetRequestedDomainDefaultsAsync(string AuthUserName, string AuthPassword, string[] newSettings, object userState)
		{
			if ((this.SetRequestedDomainDefaultsOperationCompleted == null))
			{
				this.SetRequestedDomainDefaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRequestedDomainDefaultsOperationCompleted);
			}
			this.InvokeAsync("SetRequestedDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newSettings}, this.SetRequestedDomainDefaultsOperationCompleted, userState);
		}

		private void OnSetRequestedDomainDefaultsOperationCompleted(object arg)
		{
			if ((this.SetRequestedDomainDefaultsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetRequestedDomainDefaultsCompleted(this, new SetRequestedDomainDefaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedDomainSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] newSettings)
		{
			object[] results = this.Invoke("SetRequestedDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    newSettings});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetRequestedDomainSettings(string AuthUserName, string AuthPassword, string DomainName, string[] newSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetRequestedDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    newSettings}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetRequestedDomainSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetRequestedDomainSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string[] newSettings)
		{
			this.SetRequestedDomainSettingsAsync(AuthUserName, AuthPassword, DomainName, newSettings, null);
		}

		/// <remarks/>
		public void SetRequestedDomainSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string[] newSettings, object userState)
		{
			if ((this.SetRequestedDomainSettingsOperationCompleted == null))
			{
				this.SetRequestedDomainSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRequestedDomainSettingsOperationCompleted);
			}
			this.InvokeAsync("SetRequestedDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    newSettings}, this.SetRequestedDomainSettingsOperationCompleted, userState);
		}

		private void OnSetRequestedDomainSettingsOperationCompleted(object arg)
		{
			if ((this.SetRequestedDomainSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetRequestedDomainSettingsCompleted(this, new SetRequestedDomainSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteDomain(string AuthUserName, string AuthPassword, string DomainName, bool DeleteFiles)
		{
			object[] results = this.Invoke("DeleteDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DeleteFiles});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteDomain(string AuthUserName, string AuthPassword, string DomainName, bool DeleteFiles, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DeleteFiles}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteDomainAsync(string AuthUserName, string AuthPassword, string DomainName, bool DeleteFiles)
		{
			this.DeleteDomainAsync(AuthUserName, AuthPassword, DomainName, DeleteFiles, null);
		}

		/// <remarks/>
		public void DeleteDomainAsync(string AuthUserName, string AuthPassword, string DomainName, bool DeleteFiles, object userState)
		{
			if ((this.DeleteDomainOperationCompleted == null))
			{
				this.DeleteDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainOperationCompleted);
			}
			this.InvokeAsync("DeleteDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DeleteFiles}, this.DeleteDomainOperationCompleted, userState);
		}

		private void OnDeleteDomainOperationCompleted(object arg)
		{
			if ((this.DeleteDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteDomainCompleted(this, new DeleteDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomains", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainListResult GetAllDomains(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("GetAllDomains", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((DomainListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAllDomains(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAllDomains", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public DomainListResult EndGetAllDomains(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainListResult)(results[0]));
		}

		/// <remarks/>
		public void GetAllDomainsAsync(string AuthUserName, string AuthPassword)
		{
			this.GetAllDomainsAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void GetAllDomainsAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.GetAllDomainsOperationCompleted == null))
			{
				this.GetAllDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDomainsOperationCompleted);
			}
			this.InvokeAsync("GetAllDomains", new object[] {
                    AuthUserName,
                    AuthPassword}, this.GetAllDomainsOperationCompleted, userState);
		}

		private void OnGetAllDomainsOperationCompleted(object arg)
		{
			if ((this.GetAllDomainsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAllDomainsCompleted(this, new GetAllDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainCounts", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainCountInfoResult GetDomainCounts(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetDomainCounts", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((DomainCountInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainCounts(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainCounts", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public DomainCountInfoResult EndGetDomainCounts(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainCountInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainCountsAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetDomainCountsAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetDomainCountsAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetDomainCountsOperationCompleted == null))
			{
				this.GetDomainCountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainCountsOperationCompleted);
			}
			this.InvokeAsync("GetDomainCounts", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetDomainCountsOperationCompleted, userState);
		}

		private void OnGetDomainCountsOperationCompleted(object arg)
		{
			if ((this.GetDomainCountsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainCountsCompleted(this, new GetDomainCountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainAliases", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainAliasInfoResult GetAllDomainAliases(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("GetAllDomainAliases", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((DomainAliasInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAllDomainAliases(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAllDomainAliases", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public DomainAliasInfoResult EndGetAllDomainAliases(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainAliasInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetAllDomainAliasesAsync(string AuthUserName, string AuthPassword)
		{
			this.GetAllDomainAliasesAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void GetAllDomainAliasesAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.GetAllDomainAliasesOperationCompleted == null))
			{
				this.GetAllDomainAliasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDomainAliasesOperationCompleted);
			}
			this.InvokeAsync("GetAllDomainAliases", new object[] {
                    AuthUserName,
                    AuthPassword}, this.GetAllDomainAliasesOperationCompleted, userState);
		}

		private void OnGetAllDomainAliasesOperationCompleted(object arg)
		{
			if ((this.GetAllDomainAliasesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAllDomainAliasesCompleted(this, new GetAllDomainAliasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainUsers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainUserInfoResult GetDomainUsers(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetDomainUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((DomainUserInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainUsers(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public DomainUserInfoResult EndGetDomainUsers(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainUserInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainUsersAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetDomainUsersAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetDomainUsersAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetDomainUsersOperationCompleted == null))
			{
				this.GetDomainUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainUsersOperationCompleted);
			}
			this.InvokeAsync("GetDomainUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetDomainUsersOperationCompleted, userState);
		}

		private void OnGetDomainUsersOperationCompleted(object arg)
		{
			if ((this.GetDomainUsersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainUsersCompleted(this, new GetDomainUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainStatistics", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public StatInfoResult GetDomainStatistics(string AuthUserName, string AuthPassword, string DomainName, System.DateTime StartDate, System.DateTime EndDate)
		{
			object[] results = this.Invoke("GetDomainStatistics", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    StartDate,
                    EndDate});
			return ((StatInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainStatistics(string AuthUserName, string AuthPassword, string DomainName, System.DateTime StartDate, System.DateTime EndDate, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainStatistics", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    StartDate,
                    EndDate}, callback, asyncState);
		}

		/// <remarks/>
		public StatInfoResult EndGetDomainStatistics(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((StatInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainStatisticsAsync(string AuthUserName, string AuthPassword, string DomainName, System.DateTime StartDate, System.DateTime EndDate)
		{
			this.GetDomainStatisticsAsync(AuthUserName, AuthPassword, DomainName, StartDate, EndDate, null);
		}

		/// <remarks/>
		public void GetDomainStatisticsAsync(string AuthUserName, string AuthPassword, string DomainName, System.DateTime StartDate, System.DateTime EndDate, object userState)
		{
			if ((this.GetDomainStatisticsOperationCompleted == null))
			{
				this.GetDomainStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainStatisticsOperationCompleted);
			}
			this.InvokeAsync("GetDomainStatistics", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    StartDate,
                    EndDate}, this.GetDomainStatisticsOperationCompleted, userState);
		}

		private void OnGetDomainStatisticsOperationCompleted(object arg)
		{
			if ((this.GetDomainStatisticsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainStatisticsCompleted(this, new GetDomainStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDomainStatistics", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public AllDomainStatResult GetAllDomainStatistics(string AuthUserName, string AuthPassword, System.DateTime StartDate, System.DateTime EndDate)
		{
			object[] results = this.Invoke("GetAllDomainStatistics", new object[] {
                    AuthUserName,
                    AuthPassword,
                    StartDate,
                    EndDate});
			return ((AllDomainStatResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAllDomainStatistics(string AuthUserName, string AuthPassword, System.DateTime StartDate, System.DateTime EndDate, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAllDomainStatistics", new object[] {
                    AuthUserName,
                    AuthPassword,
                    StartDate,
                    EndDate}, callback, asyncState);
		}

		/// <remarks/>
		public AllDomainStatResult EndGetAllDomainStatistics(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((AllDomainStatResult)(results[0]));
		}

		/// <remarks/>
		public void GetAllDomainStatisticsAsync(string AuthUserName, string AuthPassword, System.DateTime StartDate, System.DateTime EndDate)
		{
			this.GetAllDomainStatisticsAsync(AuthUserName, AuthPassword, StartDate, EndDate, null);
		}

		/// <remarks/>
		public void GetAllDomainStatisticsAsync(string AuthUserName, string AuthPassword, System.DateTime StartDate, System.DateTime EndDate, object userState)
		{
			if ((this.GetAllDomainStatisticsOperationCompleted == null))
			{
				this.GetAllDomainStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDomainStatisticsOperationCompleted);
			}
			this.InvokeAsync("GetAllDomainStatistics", new object[] {
                    AuthUserName,
                    AuthPassword,
                    StartDate,
                    EndDate}, this.GetAllDomainStatisticsOperationCompleted, userState);
		}

		private void OnGetAllDomainStatisticsOperationCompleted(object arg)
		{
			if ((this.GetAllDomainStatisticsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAllDomainStatisticsCompleted(this, new GetAllDomainStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrimaryDomainAdmin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public PrimaryDomainAdminResult GetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetPrimaryDomainAdmin", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((PrimaryDomainAdminResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetPrimaryDomainAdmin", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public PrimaryDomainAdminResult EndGetPrimaryDomainAdmin(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((PrimaryDomainAdminResult)(results[0]));
		}

		/// <remarks/>
		public void GetPrimaryDomainAdminAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetPrimaryDomainAdminAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetPrimaryDomainAdminAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetPrimaryDomainAdminOperationCompleted == null))
			{
				this.GetPrimaryDomainAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrimaryDomainAdminOperationCompleted);
			}
			this.InvokeAsync("GetPrimaryDomainAdmin", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetPrimaryDomainAdminOperationCompleted, userState);
		}

		private void OnGetPrimaryDomainAdminOperationCompleted(object arg)
		{
			if ((this.GetPrimaryDomainAdminCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetPrimaryDomainAdminCompleted(this, new GetPrimaryDomainAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPrimaryDomainAdmin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName, string AdminUserName)
		{
			object[] results = this.Invoke("SetPrimaryDomainAdmin", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AdminUserName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetPrimaryDomainAdmin(string AuthUserName, string AuthPassword, string DomainName, string AdminUserName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetPrimaryDomainAdmin", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AdminUserName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetPrimaryDomainAdmin(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetPrimaryDomainAdminAsync(string AuthUserName, string AuthPassword, string DomainName, string AdminUserName)
		{
			this.SetPrimaryDomainAdminAsync(AuthUserName, AuthPassword, DomainName, AdminUserName, null);
		}

		/// <remarks/>
		public void SetPrimaryDomainAdminAsync(string AuthUserName, string AuthPassword, string DomainName, string AdminUserName, object userState)
		{
			if ((this.SetPrimaryDomainAdminOperationCompleted == null))
			{
				this.SetPrimaryDomainAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPrimaryDomainAdminOperationCompleted);
			}
			this.InvokeAsync("SetPrimaryDomainAdmin", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AdminUserName}, this.SetPrimaryDomainAdminOperationCompleted, userState);
		}

		private void OnSetPrimaryDomainAdminOperationCompleted(object arg)
		{
			if ((this.SetPrimaryDomainAdminCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetPrimaryDomainAdminCompleted(this, new SetPrimaryDomainAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainDefaults", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainSettingsResult GetDomainDefaults(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("GetDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((DomainSettingsResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainDefaults(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public DomainSettingsResult EndGetDomainDefaults(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainSettingsResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainDefaultsAsync(string AuthUserName, string AuthPassword)
		{
			this.GetDomainDefaultsAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void GetDomainDefaultsAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.GetDomainDefaultsOperationCompleted == null))
			{
				this.GetDomainDefaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainDefaultsOperationCompleted);
			}
			this.InvokeAsync("GetDomainDefaults", new object[] {
                    AuthUserName,
                    AuthPassword}, this.GetDomainDefaultsOperationCompleted, userState);
		}

		private void OnGetDomainDefaultsOperationCompleted(object arg)
		{
			if ((this.GetDomainDefaultsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainDefaultsCompleted(this, new GetDomainDefaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisableDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DisableDomain(string AuthUserName, string AuthPassword, string domainName)
		{
			object[] results = this.Invoke("DisableDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDisableDomain(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DisableDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDisableDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DisableDomainAsync(string AuthUserName, string AuthPassword, string domainName)
		{
			this.DisableDomainAsync(AuthUserName, AuthPassword, domainName, null);
		}

		/// <remarks/>
		public void DisableDomainAsync(string AuthUserName, string AuthPassword, string domainName, object userState)
		{
			if ((this.DisableDomainOperationCompleted == null))
			{
				this.DisableDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableDomainOperationCompleted);
			}
			this.InvokeAsync("DisableDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, this.DisableDomainOperationCompleted, userState);
		}

		private void OnDisableDomainOperationCompleted(object arg)
		{
			if ((this.DisableDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DisableDomainCompleted(this, new DisableDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnableDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult EnableDomain(string AuthUserName, string AuthPassword, string domainName)
		{
			object[] results = this.Invoke("EnableDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginEnableDomain(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("EnableDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndEnableDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void EnableDomainAsync(string AuthUserName, string AuthPassword, string domainName)
		{
			this.EnableDomainAsync(AuthUserName, AuthPassword, domainName, null);
		}

		/// <remarks/>
		public void EnableDomainAsync(string AuthUserName, string AuthPassword, string domainName, object userState)
		{
			if ((this.EnableDomainOperationCompleted == null))
			{
				this.EnableDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableDomainOperationCompleted);
			}
			this.InvokeAsync("EnableDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, this.EnableDomainOperationCompleted, userState);
		}

		private void OnEnableDomainOperationCompleted(object arg)
		{
			if ((this.EnableDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.EnableDomainCompleted(this, new EnableDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainInfoResult GetDomainInfo(string AuthUserName, string AuthPassword, string domainName)
		{
			object[] results = this.Invoke("GetDomainInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName});
			return ((DomainInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainInfo(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, callback, asyncState);
		}

		/// <remarks/>
		public DomainInfoResult EndGetDomainInfo(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainInfoAsync(string AuthUserName, string AuthPassword, string domainName)
		{
			this.GetDomainInfoAsync(AuthUserName, AuthPassword, domainName, null);
		}

		/// <remarks/>
		public void GetDomainInfoAsync(string AuthUserName, string AuthPassword, string domainName, object userState)
		{
			if ((this.GetDomainInfoOperationCompleted == null))
			{
				this.GetDomainInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInfoOperationCompleted);
			}
			this.InvokeAsync("GetDomainInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, this.GetDomainInfoOperationCompleted, userState);
		}

		private void OnGetDomainInfoOperationCompleted(object arg)
		{
			if ((this.GetDomainInfoCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainInfoCompleted(this, new GetDomainInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainSettingsResult GetDomainSettings(string AuthUserName, string AuthPassword, string domainName)
		{
			object[] results = this.Invoke("GetDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName});
			return ((DomainSettingsResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainSettings(string AuthUserName, string AuthPassword, string domainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, callback, asyncState);
		}

		/// <remarks/>
		public DomainSettingsResult EndGetDomainSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainSettingsResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainSettingsAsync(string AuthUserName, string AuthPassword, string domainName)
		{
			this.GetDomainSettingsAsync(AuthUserName, AuthPassword, domainName, null);
		}

		/// <remarks/>
		public void GetDomainSettingsAsync(string AuthUserName, string AuthPassword, string domainName, object userState)
		{
			if ((this.GetDomainSettingsOperationCompleted == null))
			{
				this.GetDomainSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainSettingsOperationCompleted);
			}
			this.InvokeAsync("GetDomainSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    domainName}, this.GetDomainSettingsOperationCompleted, userState);
		}

		private void OnGetDomainSettingsOperationCompleted(object arg)
		{
			if ((this.GetDomainSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainSettingsCompleted(this, new GetDomainSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainForwarding", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainForwardInfoResult GetDomainForwarding(string AuthUserName, string AuthPassword, bool includeDomains)
		{
			object[] results = this.Invoke("GetDomainForwarding", new object[] {
                    AuthUserName,
                    AuthPassword,
                    includeDomains});
			return ((DomainForwardInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainForwarding(string AuthUserName, string AuthPassword, bool includeDomains, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainForwarding", new object[] {
                    AuthUserName,
                    AuthPassword,
                    includeDomains}, callback, asyncState);
		}

		/// <remarks/>
		public DomainForwardInfoResult EndGetDomainForwarding(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainForwardInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainForwardingAsync(string AuthUserName, string AuthPassword, bool includeDomains)
		{
			this.GetDomainForwardingAsync(AuthUserName, AuthPassword, includeDomains, null);
		}

		/// <remarks/>
		public void GetDomainForwardingAsync(string AuthUserName, string AuthPassword, bool includeDomains, object userState)
		{
			if ((this.GetDomainForwardingOperationCompleted == null))
			{
				this.GetDomainForwardingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainForwardingOperationCompleted);
			}
			this.InvokeAsync("GetDomainForwarding", new object[] {
                    AuthUserName,
                    AuthPassword,
                    includeDomains}, this.GetDomainForwardingOperationCompleted, userState);
		}

		private void OnGetDomainForwardingOperationCompleted(object arg)
		{
			if ((this.GetDomainForwardingCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainForwardingCompleted(this, new GetDomainForwardingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainForwardingBlock", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainForwardBlockInfoResult GetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID)
		{
			object[] results = this.Invoke("GetDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID});
			return ((DomainForwardBlockInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID}, callback, asyncState);
		}

		/// <remarks/>
		public DomainForwardBlockInfoResult EndGetDomainForwardingBlock(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainForwardBlockInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, int blockID)
		{
			this.GetDomainForwardingBlockAsync(AuthUserName, AuthPassword, blockID, null);
		}

		/// <remarks/>
		public void GetDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, int blockID, object userState)
		{
			if ((this.GetDomainForwardingBlockOperationCompleted == null))
			{
				this.GetDomainForwardingBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainForwardingBlockOperationCompleted);
			}
			this.InvokeAsync("GetDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID}, this.GetDomainForwardingBlockOperationCompleted, userState);
		}

		private void OnGetDomainForwardingBlockOperationCompleted(object arg)
		{
			if ((this.GetDomainForwardingBlockCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainForwardingBlockCompleted(this, new GetDomainForwardingBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainForwardingBlockByTargetAddress", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainForwardBlockInfoResult GetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress)
		{
			object[] results = this.Invoke("GetDomainForwardingBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress});
			return ((DomainForwardBlockInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDomainForwardingBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress}, callback, asyncState);
		}

		/// <remarks/>
		public DomainForwardBlockInfoResult EndGetDomainForwardingBlockByTargetAddress(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainForwardBlockInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetDomainForwardingBlockByTargetAddressAsync(string AuthUserName, string AuthPassword, string targetAddress)
		{
			this.GetDomainForwardingBlockByTargetAddressAsync(AuthUserName, AuthPassword, targetAddress, null);
		}

		/// <remarks/>
		public void GetDomainForwardingBlockByTargetAddressAsync(string AuthUserName, string AuthPassword, string targetAddress, object userState)
		{
			if ((this.GetDomainForwardingBlockByTargetAddressOperationCompleted == null))
			{
				this.GetDomainForwardingBlockByTargetAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainForwardingBlockByTargetAddressOperationCompleted);
			}
			this.InvokeAsync("GetDomainForwardingBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress}, this.GetDomainForwardingBlockByTargetAddressOperationCompleted, userState);
		}

		private void OnGetDomainForwardingBlockByTargetAddressOperationCompleted(object arg)
		{
			if ((this.GetDomainForwardingBlockByTargetAddressCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDomainForwardingBlockByTargetAddressCompleted(this, new GetDomainForwardingBlockByTargetAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDomainForwardingBlock", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, string targetAddress, string[] domains)
		{
			object[] results = this.Invoke("SetDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID,
                    targetAddress,
                    domains});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, string targetAddress, string[] domains, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID,
                    targetAddress,
                    domains}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetDomainForwardingBlock(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, int blockID, string targetAddress, string[] domains)
		{
			this.SetDomainForwardingBlockAsync(AuthUserName, AuthPassword, blockID, targetAddress, domains, null);
		}

		/// <remarks/>
		public void SetDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, int blockID, string targetAddress, string[] domains, object userState)
		{
			if ((this.SetDomainForwardingBlockOperationCompleted == null))
			{
				this.SetDomainForwardingBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainForwardingBlockOperationCompleted);
			}
			this.InvokeAsync("SetDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID,
                    targetAddress,
                    domains}, this.SetDomainForwardingBlockOperationCompleted, userState);
		}

		private void OnSetDomainForwardingBlockOperationCompleted(object arg)
		{
			if ((this.SetDomainForwardingBlockCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetDomainForwardingBlockCompleted(this, new SetDomainForwardingBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDomainForwardingBlockByTargetAddress", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, string[] domains)
		{
			object[] results = this.Invoke("SetDomainForwardingBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress,
                    domains});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetDomainForwardingBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, string[] domains, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetDomainForwardingBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress,
                    domains}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetDomainForwardingBlockByTargetAddress(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetDomainForwardingBlockByTargetAddressAsync(string AuthUserName, string AuthPassword, string targetAddress, string[] domains)
		{
			this.SetDomainForwardingBlockByTargetAddressAsync(AuthUserName, AuthPassword, targetAddress, domains, null);
		}

		/// <remarks/>
		public void SetDomainForwardingBlockByTargetAddressAsync(string AuthUserName, string AuthPassword, string targetAddress, string[] domains, object userState)
		{
			if ((this.SetDomainForwardingBlockByTargetAddressOperationCompleted == null))
			{
				this.SetDomainForwardingBlockByTargetAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainForwardingBlockByTargetAddressOperationCompleted);
			}
			this.InvokeAsync("SetDomainForwardingBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress,
                    domains}, this.SetDomainForwardingBlockByTargetAddressOperationCompleted, userState);
		}

		private void OnSetDomainForwardingBlockByTargetAddressOperationCompleted(object arg)
		{
			if ((this.SetDomainForwardingBlockByTargetAddressCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetDomainForwardingBlockByTargetAddressCompleted(this, new SetDomainForwardingBlockByTargetAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomainForwardingBlock", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDomainForwardingBlock(string AuthUserName, string AuthPassword, string targetAddress, string[] domains)
		{
			object[] results = this.Invoke("AddDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress,
                    domains});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDomainForwardingBlock(string AuthUserName, string AuthPassword, string targetAddress, string[] domains, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress,
                    domains}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDomainForwardingBlock(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, string targetAddress, string[] domains)
		{
			this.AddDomainForwardingBlockAsync(AuthUserName, AuthPassword, targetAddress, domains, null);
		}

		/// <remarks/>
		public void AddDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, string targetAddress, string[] domains, object userState)
		{
			if ((this.AddDomainForwardingBlockOperationCompleted == null))
			{
				this.AddDomainForwardingBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainForwardingBlockOperationCompleted);
			}
			this.InvokeAsync("AddDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress,
                    domains}, this.AddDomainForwardingBlockOperationCompleted, userState);
		}

		private void OnAddDomainForwardingBlockOperationCompleted(object arg)
		{
			if ((this.AddDomainForwardingBlockCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDomainForwardingBlockCompleted(this, new AddDomainForwardingBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomainForwardingBlock", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID)
		{
			object[] results = this.Invoke("DeleteDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteDomainForwardingBlock(string AuthUserName, string AuthPassword, int blockID, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteDomainForwardingBlock(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, int blockID)
		{
			this.DeleteDomainForwardingBlockAsync(AuthUserName, AuthPassword, blockID, null);
		}

		/// <remarks/>
		public void DeleteDomainForwardingBlockAsync(string AuthUserName, string AuthPassword, int blockID, object userState)
		{
			if ((this.DeleteDomainForwardingBlockOperationCompleted == null))
			{
				this.DeleteDomainForwardingBlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainForwardingBlockOperationCompleted);
			}
			this.InvokeAsync("DeleteDomainForwardingBlock", new object[] {
                    AuthUserName,
                    AuthPassword,
                    blockID}, this.DeleteDomainForwardingBlockOperationCompleted, userState);
		}

		private void OnDeleteDomainForwardingBlockOperationCompleted(object arg)
		{
			if ((this.DeleteDomainForwardingBlockCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteDomainForwardingBlockCompleted(this, new DeleteDomainForwardingBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomainForwardBlockByTargetAddress", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteDomainForwardBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress)
		{
			object[] results = this.Invoke("DeleteDomainForwardBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteDomainForwardBlockByTargetAddress(string AuthUserName, string AuthPassword, string targetAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteDomainForwardBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteDomainForwardBlockByTargetAddress(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteDomainForwardBlockByTargetAddressAsync(string AuthUserName, string AuthPassword, string targetAddress)
		{
			this.DeleteDomainForwardBlockByTargetAddressAsync(AuthUserName, AuthPassword, targetAddress, null);
		}

		/// <remarks/>
		public void DeleteDomainForwardBlockByTargetAddressAsync(string AuthUserName, string AuthPassword, string targetAddress, object userState)
		{
			if ((this.DeleteDomainForwardBlockByTargetAddressOperationCompleted == null))
			{
				this.DeleteDomainForwardBlockByTargetAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainForwardBlockByTargetAddressOperationCompleted);
			}
			this.InvokeAsync("DeleteDomainForwardBlockByTargetAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    targetAddress}, this.DeleteDomainForwardBlockByTargetAddressOperationCompleted, userState);
		}

		private void OnDeleteDomainForwardBlockByTargetAddressOperationCompleted(object arg)
		{
			if ((this.DeleteDomainForwardBlockByTargetAddressCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteDomainForwardBlockByTargetAddressCompleted(this, new DeleteDomainForwardBlockByTargetAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDomainArchiveRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SettingsRequestResult SetDomainArchiveRule(string AuthUserName, string AuthPassword, string[] parameters)
		{
			object[] results = this.Invoke("SetDomainArchiveRule", new object[] {
                    AuthUserName,
                    AuthPassword,
                    parameters});
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetDomainArchiveRule(string AuthUserName, string AuthPassword, string[] parameters, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetDomainArchiveRule", new object[] {
                    AuthUserName,
                    AuthPassword,
                    parameters}, callback, asyncState);
		}

		/// <remarks/>
		public SettingsRequestResult EndSetDomainArchiveRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public void SetDomainArchiveRuleAsync(string AuthUserName, string AuthPassword, string[] parameters)
		{
			this.SetDomainArchiveRuleAsync(AuthUserName, AuthPassword, parameters, null);
		}

		/// <remarks/>
		public void SetDomainArchiveRuleAsync(string AuthUserName, string AuthPassword, string[] parameters, object userState)
		{
			if ((this.SetDomainArchiveRuleOperationCompleted == null))
			{
				this.SetDomainArchiveRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDomainArchiveRuleOperationCompleted);
			}
			this.InvokeAsync("SetDomainArchiveRule", new object[] {
                    AuthUserName,
                    AuthPassword,
                    parameters}, this.SetDomainArchiveRuleOperationCompleted, userState);
		}

		private void OnSetDomainArchiveRuleOperationCompleted(object arg)
		{
			if ((this.SetDomainArchiveRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetDomainArchiveRuleCompleted(this, new SetDomainArchiveRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class GenericResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainForwardBlockInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private DomainForwardBlockInfo domainForwardBlockField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public DomainForwardBlockInfo domainForwardBlock
		{
			get
			{
				return this.domainForwardBlockField;
			}
			set
			{
				this.domainForwardBlockField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainForwardBlockInfo
	{

		private int blockIDField;

		private string targetAddressField;

		private string[] domainsField;

		/// <remarks/>
		public int blockID
		{
			get
			{
				return this.blockIDField;
			}
			set
			{
				this.blockIDField = value;
			}
		}

		/// <remarks/>
		public string targetAddress
		{
			get
			{
				return this.targetAddressField;
			}
			set
			{
				this.targetAddressField = value;
			}
		}

		/// <remarks/>
		public string[] domains
		{
			get
			{
				return this.domainsField;
			}
			set
			{
				this.domainsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainForwardInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private DomainForwardBlockInfo[] blocksField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public DomainForwardBlockInfo[] blocks
		{
			get
			{
				return this.blocksField;
			}
			set
			{
				this.blocksField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string pathField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string Path
		{
			get
			{
				return this.pathField;
			}
			set
			{
				this.pathField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainSettingsResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string serverIPField;

		private string pathField;

		private int imapPortField;

		private int popPortField;

		private int smtpPortField;

		private int maxAliasesField;

		private int maxDomainAliasesField;

		private int maxListsField;

		private int maxDomainSizeInMBField;

		private int maxDomainUsersField;

		private int maxMailboxSizeInMBField;

		private int maxMessageSizeField;

		private int maxRecipientsField;

		private bool showDomainAliasMenuField;

		private bool showContentFilteringMenuField;

		private bool showSpamMenuField;

		private bool showStatsMenuField;

		private bool showListMenuField;

		private bool requireSmtpAuthenticationField;

		private string listCommandAddressField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string ServerIP
		{
			get
			{
				return this.serverIPField;
			}
			set
			{
				this.serverIPField = value;
			}
		}

		/// <remarks/>
		public string Path
		{
			get
			{
				return this.pathField;
			}
			set
			{
				this.pathField = value;
			}
		}

		/// <remarks/>
		public int ImapPort
		{
			get
			{
				return this.imapPortField;
			}
			set
			{
				this.imapPortField = value;
			}
		}

		/// <remarks/>
		public int PopPort
		{
			get
			{
				return this.popPortField;
			}
			set
			{
				this.popPortField = value;
			}
		}

		/// <remarks/>
		public int SmtpPort
		{
			get
			{
				return this.smtpPortField;
			}
			set
			{
				this.smtpPortField = value;
			}
		}

		/// <remarks/>
		public int MaxAliases
		{
			get
			{
				return this.maxAliasesField;
			}
			set
			{
				this.maxAliasesField = value;
			}
		}

		/// <remarks/>
		public int MaxDomainAliases
		{
			get
			{
				return this.maxDomainAliasesField;
			}
			set
			{
				this.maxDomainAliasesField = value;
			}
		}

		/// <remarks/>
		public int MaxLists
		{
			get
			{
				return this.maxListsField;
			}
			set
			{
				this.maxListsField = value;
			}
		}

		/// <remarks/>
		public int MaxDomainSizeInMB
		{
			get
			{
				return this.maxDomainSizeInMBField;
			}
			set
			{
				this.maxDomainSizeInMBField = value;
			}
		}

		/// <remarks/>
		public int MaxDomainUsers
		{
			get
			{
				return this.maxDomainUsersField;
			}
			set
			{
				this.maxDomainUsersField = value;
			}
		}

		/// <remarks/>
		public int MaxMailboxSizeInMB
		{
			get
			{
				return this.maxMailboxSizeInMBField;
			}
			set
			{
				this.maxMailboxSizeInMBField = value;
			}
		}

		/// <remarks/>
		public int MaxMessageSize
		{
			get
			{
				return this.maxMessageSizeField;
			}
			set
			{
				this.maxMessageSizeField = value;
			}
		}

		/// <remarks/>
		public int MaxRecipients
		{
			get
			{
				return this.maxRecipientsField;
			}
			set
			{
				this.maxRecipientsField = value;
			}
		}

		/// <remarks/>
		public bool ShowDomainAliasMenu
		{
			get
			{
				return this.showDomainAliasMenuField;
			}
			set
			{
				this.showDomainAliasMenuField = value;
			}
		}

		/// <remarks/>
		public bool ShowContentFilteringMenu
		{
			get
			{
				return this.showContentFilteringMenuField;
			}
			set
			{
				this.showContentFilteringMenuField = value;
			}
		}

		/// <remarks/>
		public bool ShowSpamMenu
		{
			get
			{
				return this.showSpamMenuField;
			}
			set
			{
				this.showSpamMenuField = value;
			}
		}

		/// <remarks/>
		public bool ShowStatsMenu
		{
			get
			{
				return this.showStatsMenuField;
			}
			set
			{
				this.showStatsMenuField = value;
			}
		}

		/// <remarks/>
		public bool ShowListMenu
		{
			get
			{
				return this.showListMenuField;
			}
			set
			{
				this.showListMenuField = value;
			}
		}

		/// <remarks/>
		public bool RequireSmtpAuthentication
		{
			get
			{
				return this.requireSmtpAuthenticationField;
			}
			set
			{
				this.requireSmtpAuthenticationField = value;
			}
		}

		/// <remarks/>
		public string ListCommandAddress
		{
			get
			{
				return this.listCommandAddressField;
			}
			set
			{
				this.listCommandAddressField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class PrimaryDomainAdminResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string primaryAdminField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string PrimaryAdmin
		{
			get
			{
				return this.primaryAdminField;
			}
			set
			{
				this.primaryAdminField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainStatInfo
	{

		private string domainNameField;

		private long messagesReceivedField;

		private long messagesSentField;

		private long bytesReceivedField;

		private long bytesSentField;

		private long bytesSizeField;

		/// <remarks/>
		public string DomainName
		{
			get
			{
				return this.domainNameField;
			}
			set
			{
				this.domainNameField = value;
			}
		}

		/// <remarks/>
		public long MessagesReceived
		{
			get
			{
				return this.messagesReceivedField;
			}
			set
			{
				this.messagesReceivedField = value;
			}
		}

		/// <remarks/>
		public long MessagesSent
		{
			get
			{
				return this.messagesSentField;
			}
			set
			{
				this.messagesSentField = value;
			}
		}

		/// <remarks/>
		public long BytesReceived
		{
			get
			{
				return this.bytesReceivedField;
			}
			set
			{
				this.bytesReceivedField = value;
			}
		}

		/// <remarks/>
		public long BytesSent
		{
			get
			{
				return this.bytesSentField;
			}
			set
			{
				this.bytesSentField = value;
			}
		}

		/// <remarks/>
		public long BytesSize
		{
			get
			{
				return this.bytesSizeField;
			}
			set
			{
				this.bytesSizeField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class AllDomainStatResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private DomainStatInfo[] statsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public DomainStatInfo[] Stats
		{
			get
			{
				return this.statsField;
			}
			set
			{
				this.statsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class StatInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private long messagesReceivedField;

		private long messagesSentField;

		private long bytesReceivedField;

		private long bytesSentField;

		private long bytesSizeField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public long MessagesReceived
		{
			get
			{
				return this.messagesReceivedField;
			}
			set
			{
				this.messagesReceivedField = value;
			}
		}

		/// <remarks/>
		public long MessagesSent
		{
			get
			{
				return this.messagesSentField;
			}
			set
			{
				this.messagesSentField = value;
			}
		}

		/// <remarks/>
		public long BytesReceived
		{
			get
			{
				return this.bytesReceivedField;
			}
			set
			{
				this.bytesReceivedField = value;
			}
		}

		/// <remarks/>
		public long BytesSent
		{
			get
			{
				return this.bytesSentField;
			}
			set
			{
				this.bytesSentField = value;
			}
		}

		/// <remarks/>
		public long BytesSize
		{
			get
			{
				return this.bytesSizeField;
			}
			set
			{
				this.bytesSizeField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainUserInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] usersField;

		private string[] domainAliasesField;

		private bool catchAllField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] Users
		{
			get
			{
				return this.usersField;
			}
			set
			{
				this.usersField = value;
			}
		}

		/// <remarks/>
		public string[] DomainAliases
		{
			get
			{
				return this.domainAliasesField;
			}
			set
			{
				this.domainAliasesField = value;
			}
		}

		/// <remarks/>
		public bool CatchAll
		{
			get
			{
				return this.catchAllField;
			}
			set
			{
				this.catchAllField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainAliasInfo
	{

		private string nameField;

		private string domainNameField;

		/// <remarks/>
		public string Name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public string DomainName
		{
			get
			{
				return this.domainNameField;
			}
			set
			{
				this.domainNameField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainAliasInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private DomainAliasInfo[] domainAliasesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public DomainAliasInfo[] DomainAliases
		{
			get
			{
				return this.domainAliasesField;
			}
			set
			{
				this.domainAliasesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainCountInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private int usersField;

		private int mailingListsField;

		private int aliasesField;

		private long sizeField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public int Users
		{
			get
			{
				return this.usersField;
			}
			set
			{
				this.usersField = value;
			}
		}

		/// <remarks/>
		public int MailingLists
		{
			get
			{
				return this.mailingListsField;
			}
			set
			{
				this.mailingListsField = value;
			}
		}

		/// <remarks/>
		public int Aliases
		{
			get
			{
				return this.aliasesField;
			}
			set
			{
				this.aliasesField = value;
			}
		}

		/// <remarks/>
		public long Size
		{
			get
			{
				return this.sizeField;
			}
			set
			{
				this.sizeField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] domainNamesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] DomainNames
		{
			get
			{
				return this.domainNamesField;
			}
			set
			{
				this.domainNamesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SettingsRequestResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] settingValuesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] settingValues
		{
			get
			{
				return this.settingValuesField;
			}
			set
			{
				this.settingValuesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainKeyResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string privateKeyField;

		private string publicKeyField;

		private string selectorField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string privateKey
		{
			get
			{
				return this.privateKeyField;
			}
			set
			{
				this.privateKeyField = value;
			}
		}

		/// <remarks/>
		public string publicKey
		{
			get
			{
				return this.publicKeyField;
			}
			set
			{
				this.publicKeyField = value;
			}
		}

		/// <remarks/>
		public string selector
		{
			get
			{
				return this.selectorField;
			}
			set
			{
				this.selectorField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDomainCompletedEventHandler(object sender, AddDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDomainExCompletedEventHandler(object sender, AddDomainExCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDomainExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDomainExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateDomainNameAndPathCompletedEventHandler(object sender, UpdateDomainNameAndPathCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateDomainNameAndPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateDomainNameAndPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GenerateDomainKeysCertCompletedEventHandler(object sender, GenerateDomainKeysCertCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GenerateDomainKeysCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GenerateDomainKeysCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainKeyResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainKeyResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainKeysCertCompletedEventHandler(object sender, GetDomainKeysCertCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainKeysCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainKeysCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainKeyResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainKeyResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RenameDomainCompletedEventHandler(object sender, RenameDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RenameDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RenameDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ReloadDomainCompletedEventHandler(object sender, ReloadDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ReloadDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ReloadDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateDomainCompletedEventHandler(object sender, UpdateDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetRequestedDomainDefaultsCompletedEventHandler(object sender, GetRequestedDomainDefaultsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRequestedDomainDefaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRequestedDomainDefaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SettingsRequestResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SettingsRequestResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetRequestedDomainSettingsCompletedEventHandler(object sender, GetRequestedDomainSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRequestedDomainSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRequestedDomainSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SettingsRequestResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SettingsRequestResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetRequestedDomainDefaultsCompletedEventHandler(object sender, SetRequestedDomainDefaultsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetRequestedDomainDefaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetRequestedDomainDefaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetRequestedDomainSettingsCompletedEventHandler(object sender, SetRequestedDomainSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetRequestedDomainSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetRequestedDomainSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteDomainCompletedEventHandler(object sender, DeleteDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetAllDomainsCompletedEventHandler(object sender, GetAllDomainsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAllDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAllDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainCountsCompletedEventHandler(object sender, GetDomainCountsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainCountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainCountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainCountInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainCountInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetAllDomainAliasesCompletedEventHandler(object sender, GetAllDomainAliasesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAllDomainAliasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAllDomainAliasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainAliasInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainAliasInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainUsersCompletedEventHandler(object sender, GetDomainUsersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainUserInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainUserInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainStatisticsCompletedEventHandler(object sender, GetDomainStatisticsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public StatInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((StatInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetAllDomainStatisticsCompletedEventHandler(object sender, GetAllDomainStatisticsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAllDomainStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAllDomainStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public AllDomainStatResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((AllDomainStatResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetPrimaryDomainAdminCompletedEventHandler(object sender, GetPrimaryDomainAdminCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetPrimaryDomainAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetPrimaryDomainAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public PrimaryDomainAdminResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((PrimaryDomainAdminResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetPrimaryDomainAdminCompletedEventHandler(object sender, SetPrimaryDomainAdminCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetPrimaryDomainAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetPrimaryDomainAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainDefaultsCompletedEventHandler(object sender, GetDomainDefaultsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainDefaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainDefaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainSettingsResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainSettingsResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DisableDomainCompletedEventHandler(object sender, DisableDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DisableDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DisableDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void EnableDomainCompletedEventHandler(object sender, EnableDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class EnableDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal EnableDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainInfoCompletedEventHandler(object sender, GetDomainInfoCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainSettingsCompletedEventHandler(object sender, GetDomainSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainSettingsResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainSettingsResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainForwardingCompletedEventHandler(object sender, GetDomainForwardingCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainForwardingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainForwardingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainForwardInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainForwardInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainForwardingBlockCompletedEventHandler(object sender, GetDomainForwardingBlockCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainForwardingBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainForwardingBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainForwardBlockInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainForwardBlockInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDomainForwardingBlockByTargetAddressCompletedEventHandler(object sender, GetDomainForwardingBlockByTargetAddressCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDomainForwardingBlockByTargetAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDomainForwardingBlockByTargetAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DomainForwardBlockInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DomainForwardBlockInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetDomainForwardingBlockCompletedEventHandler(object sender, SetDomainForwardingBlockCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetDomainForwardingBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetDomainForwardingBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetDomainForwardingBlockByTargetAddressCompletedEventHandler(object sender, SetDomainForwardingBlockByTargetAddressCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetDomainForwardingBlockByTargetAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetDomainForwardingBlockByTargetAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDomainForwardingBlockCompletedEventHandler(object sender, AddDomainForwardingBlockCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDomainForwardingBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDomainForwardingBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteDomainForwardingBlockCompletedEventHandler(object sender, DeleteDomainForwardingBlockCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteDomainForwardingBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteDomainForwardingBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteDomainForwardBlockByTargetAddressCompletedEventHandler(object sender, DeleteDomainForwardBlockByTargetAddressCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteDomainForwardBlockByTargetAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteDomainForwardBlockByTargetAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetDomainArchiveRuleCompletedEventHandler(object sender, SetDomainArchiveRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetDomainArchiveRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetDomainArchiveRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SettingsRequestResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SettingsRequestResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "svcUserAdminSoap", Namespace = "http://tempuri.org/")]
	public partial class svcUserAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback QueueMailBoxMigrationOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveFromMigrationQueueOperationCompleted;

		private System.Threading.SendOrPostCallback GetMigrationStatusOperationCompleted;

		private System.Threading.SendOrPostCallback AddUserOperationCompleted;

		private System.Threading.SendOrPostCallback AddUser2OperationCompleted;

		private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateUser2OperationCompleted;

		private System.Threading.SendOrPostCallback UpdateUserForwardingInfoOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateUserForwardingInfo2OperationCompleted;

		private System.Threading.SendOrPostCallback UpdateUserAutoResponseInfoOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserOperationCompleted;

		private System.Threading.SendOrPostCallback GetLastLoginTimesOperationCompleted;

		private System.Threading.SendOrPostCallback GetRequestedUserSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback SetRequestedUserSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback GetInactiveUsersOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserForwardingInfo2OperationCompleted;

		private System.Threading.SendOrPostCallback GetUserForwardingInfoOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserAutoResponseInfoOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserQuotasOperationCompleted;

		private System.Threading.SendOrPostCallback GetUsersOperationCompleted;

		private System.Threading.SendOrPostCallback LoginValidatedOperationCompleted;

		private System.Threading.SendOrPostCallback AddRSSFeedOperationCompleted;

		private System.Threading.SendOrPostCallback ToggleActiveSyncOperationCompleted;

		private System.Threading.SendOrPostCallback IsUserEnabledForActiveSyncOperationCompleted;

		private System.Threading.SendOrPostCallback ListRSSFeedsOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteRSSFeedOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserStatsOperationCompleted;

		private System.Threading.SendOrPostCallback AddUserGroupOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveUserGroupOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateUserGroupOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserGroupOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserGroupsByUserOperationCompleted;

		private System.Threading.SendOrPostCallback GetUserGroupsByDomainOperationCompleted;

		/// <remarks/>
		public svcUserAdmin()
		{
			this.Url = "http://127.0.0.1:9998/Services/svcUserAdmin.asmx";
		}

		/// <remarks/>
		public event QueueMailBoxMigrationCompletedEventHandler QueueMailBoxMigrationCompleted;

		/// <remarks/>
		public event RemoveFromMigrationQueueCompletedEventHandler RemoveFromMigrationQueueCompleted;

		/// <remarks/>
		public event GetMigrationStatusCompletedEventHandler GetMigrationStatusCompleted;

		/// <remarks/>
		public event AddUserCompletedEventHandler AddUserCompleted;

		/// <remarks/>
		public event AddUser2CompletedEventHandler AddUser2Completed;

		/// <remarks/>
		public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;

		/// <remarks/>
		public event UpdateUserCompletedEventHandler UpdateUserCompleted;

		/// <remarks/>
		public event UpdateUser2CompletedEventHandler UpdateUser2Completed;

		/// <remarks/>
		public event UpdateUserForwardingInfoCompletedEventHandler UpdateUserForwardingInfoCompleted;

		/// <remarks/>
		public event UpdateUserForwardingInfo2CompletedEventHandler UpdateUserForwardingInfo2Completed;

		/// <remarks/>
		public event UpdateUserAutoResponseInfoCompletedEventHandler UpdateUserAutoResponseInfoCompleted;

		/// <remarks/>
		public event DeleteUserCompletedEventHandler DeleteUserCompleted;

		/// <remarks/>
		public event GetUserCompletedEventHandler GetUserCompleted;

		/// <remarks/>
		public event GetLastLoginTimesCompletedEventHandler GetLastLoginTimesCompleted;

		/// <remarks/>
		public event GetRequestedUserSettingsCompletedEventHandler GetRequestedUserSettingsCompleted;

		/// <remarks/>
		public event SetRequestedUserSettingsCompletedEventHandler SetRequestedUserSettingsCompleted;

		/// <remarks/>
		public event GetInactiveUsersCompletedEventHandler GetInactiveUsersCompleted;

		/// <remarks/>
		public event GetUserForwardingInfo2CompletedEventHandler GetUserForwardingInfo2Completed;

		/// <remarks/>
		public event GetUserForwardingInfoCompletedEventHandler GetUserForwardingInfoCompleted;

		/// <remarks/>
		public event GetUserAutoResponseInfoCompletedEventHandler GetUserAutoResponseInfoCompleted;

		/// <remarks/>
		public event GetUserQuotasCompletedEventHandler GetUserQuotasCompleted;

		/// <remarks/>
		public event GetUsersCompletedEventHandler GetUsersCompleted;

		/// <remarks/>
		public event LoginValidatedCompletedEventHandler LoginValidatedCompleted;

		/// <remarks/>
		public event AddRSSFeedCompletedEventHandler AddRSSFeedCompleted;

		/// <remarks/>
		public event ToggleActiveSyncCompletedEventHandler ToggleActiveSyncCompleted;

		/// <remarks/>
		public event IsUserEnabledForActiveSyncCompletedEventHandler IsUserEnabledForActiveSyncCompleted;

		/// <remarks/>
		public event ListRSSFeedsCompletedEventHandler ListRSSFeedsCompleted;

		/// <remarks/>
		public event DeleteRSSFeedCompletedEventHandler DeleteRSSFeedCompleted;

		/// <remarks/>
		public event GetUserStatsCompletedEventHandler GetUserStatsCompleted;

		/// <remarks/>
		public event AddUserGroupCompletedEventHandler AddUserGroupCompleted;

		/// <remarks/>
		public event RemoveUserGroupCompletedEventHandler RemoveUserGroupCompleted;

		/// <remarks/>
		public event UpdateUserGroupCompletedEventHandler UpdateUserGroupCompleted;

		/// <remarks/>
		public event GetUserGroupCompletedEventHandler GetUserGroupCompleted;

		/// <remarks/>
		public event GetUserGroupsByUserCompletedEventHandler GetUserGroupsByUserCompleted;

		/// <remarks/>
		public event GetUserGroupsByDomainCompletedEventHandler GetUserGroupsByDomainCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueueMailBoxMigration", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public RequestStatusResult QueueMailBoxMigration(string AuthUserName, string AuthPassword, string[] parameters)
		{
			object[] results = this.Invoke("QueueMailBoxMigration", new object[] {
                    AuthUserName,
                    AuthPassword,
                    parameters});
			return ((RequestStatusResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginQueueMailBoxMigration(string AuthUserName, string AuthPassword, string[] parameters, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("QueueMailBoxMigration", new object[] {
                    AuthUserName,
                    AuthPassword,
                    parameters}, callback, asyncState);
		}

		/// <remarks/>
		public RequestStatusResult EndQueueMailBoxMigration(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((RequestStatusResult)(results[0]));
		}

		/// <remarks/>
		public void QueueMailBoxMigrationAsync(string AuthUserName, string AuthPassword, string[] parameters)
		{
			this.QueueMailBoxMigrationAsync(AuthUserName, AuthPassword, parameters, null);
		}

		/// <remarks/>
		public void QueueMailBoxMigrationAsync(string AuthUserName, string AuthPassword, string[] parameters, object userState)
		{
			if ((this.QueueMailBoxMigrationOperationCompleted == null))
			{
				this.QueueMailBoxMigrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueueMailBoxMigrationOperationCompleted);
			}
			this.InvokeAsync("QueueMailBoxMigration", new object[] {
                    AuthUserName,
                    AuthPassword,
                    parameters}, this.QueueMailBoxMigrationOperationCompleted, userState);
		}

		private void OnQueueMailBoxMigrationOperationCompleted(object arg)
		{
			if ((this.QueueMailBoxMigrationCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.QueueMailBoxMigrationCompleted(this, new QueueMailBoxMigrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveFromMigrationQueue", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void RemoveFromMigrationQueue(string AuthUserName, string AuthPassword, System.Guid itemID)
		{
			this.Invoke("RemoveFromMigrationQueue", new object[] {
                    AuthUserName,
                    AuthPassword,
                    itemID});
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveFromMigrationQueue(string AuthUserName, string AuthPassword, System.Guid itemID, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveFromMigrationQueue", new object[] {
                    AuthUserName,
                    AuthPassword,
                    itemID}, callback, asyncState);
		}

		/// <remarks/>
		public void EndRemoveFromMigrationQueue(System.IAsyncResult asyncResult)
		{
			this.EndInvoke(asyncResult);
		}

		/// <remarks/>
		public void RemoveFromMigrationQueueAsync(string AuthUserName, string AuthPassword, System.Guid itemID)
		{
			this.RemoveFromMigrationQueueAsync(AuthUserName, AuthPassword, itemID, null);
		}

		/// <remarks/>
		public void RemoveFromMigrationQueueAsync(string AuthUserName, string AuthPassword, System.Guid itemID, object userState)
		{
			if ((this.RemoveFromMigrationQueueOperationCompleted == null))
			{
				this.RemoveFromMigrationQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFromMigrationQueueOperationCompleted);
			}
			this.InvokeAsync("RemoveFromMigrationQueue", new object[] {
                    AuthUserName,
                    AuthPassword,
                    itemID}, this.RemoveFromMigrationQueueOperationCompleted, userState);
		}

		private void OnRemoveFromMigrationQueueOperationCompleted(object arg)
		{
			if ((this.RemoveFromMigrationQueueCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveFromMigrationQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMigrationStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		[return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public StatusResults[] GetMigrationStatus(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("GetMigrationStatus", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((StatusResults[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetMigrationStatus(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetMigrationStatus", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public StatusResults[] EndGetMigrationStatus(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((StatusResults[])(results[0]));
		}

		/// <remarks/>
		public void GetMigrationStatusAsync(string AuthUserName, string AuthPassword)
		{
			this.GetMigrationStatusAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void GetMigrationStatusAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.GetMigrationStatusOperationCompleted == null))
			{
				this.GetMigrationStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMigrationStatusOperationCompleted);
			}
			this.InvokeAsync("GetMigrationStatus", new object[] {
                    AuthUserName,
                    AuthPassword}, this.GetMigrationStatusOperationCompleted, userState);
		}

		private void OnGetMigrationStatusOperationCompleted(object arg)
		{
			if ((this.GetMigrationStatusCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetMigrationStatusCompleted(this, new GetMigrationStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddUser(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin)
		{
			object[] results = this.Invoke("AddUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    NewUsername,
                    NewPassword,
                    DomainName,
                    FirstName,
                    LastName,
                    IsDomainAdmin});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddUser(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    NewUsername,
                    NewPassword,
                    DomainName,
                    FirstName,
                    LastName,
                    IsDomainAdmin}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddUserAsync(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin)
		{
			this.AddUserAsync(AuthUserName, AuthPassword, NewUsername, NewPassword, DomainName, FirstName, LastName, IsDomainAdmin, null);
		}

		/// <remarks/>
		public void AddUserAsync(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin, object userState)
		{
			if ((this.AddUserOperationCompleted == null))
			{
				this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserOperationCompleted);
			}
			this.InvokeAsync("AddUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    NewUsername,
                    NewPassword,
                    DomainName,
                    FirstName,
                    LastName,
                    IsDomainAdmin}, this.AddUserOperationCompleted, userState);
		}

		private void OnAddUserOperationCompleted(object arg)
		{
			if ((this.AddUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddUser2(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin, int maxMailboxSize)
		{
			object[] results = this.Invoke("AddUser2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    NewUsername,
                    NewPassword,
                    DomainName,
                    FirstName,
                    LastName,
                    IsDomainAdmin,
                    maxMailboxSize});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddUser2(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin, int maxMailboxSize, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddUser2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    NewUsername,
                    NewPassword,
                    DomainName,
                    FirstName,
                    LastName,
                    IsDomainAdmin,
                    maxMailboxSize}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddUser2(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddUser2Async(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin, int maxMailboxSize)
		{
			this.AddUser2Async(AuthUserName, AuthPassword, NewUsername, NewPassword, DomainName, FirstName, LastName, IsDomainAdmin, maxMailboxSize, null);
		}

		/// <remarks/>
		public void AddUser2Async(string AuthUserName, string AuthPassword, string NewUsername, string NewPassword, string DomainName, string FirstName, string LastName, bool IsDomainAdmin, int maxMailboxSize, object userState)
		{
			if ((this.AddUser2OperationCompleted == null))
			{
				this.AddUser2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUser2OperationCompleted);
			}
			this.InvokeAsync("AddUser2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    NewUsername,
                    NewPassword,
                    DomainName,
                    FirstName,
                    LastName,
                    IsDomainAdmin,
                    maxMailboxSize}, this.AddUser2OperationCompleted, userState);
		}

		private void OnAddUser2OperationCompleted(object arg)
		{
			if ((this.AddUser2Completed != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddUser2Completed(this, new AddUser2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AuthenticateUser(string UserName, string DomainName, string Password)
		{
			object[] results = this.Invoke("AuthenticateUser", new object[] {
                    UserName,
                    DomainName,
                    Password});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAuthenticateUser(string UserName, string DomainName, string Password, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AuthenticateUser", new object[] {
                    UserName,
                    DomainName,
                    Password}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAuthenticateUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AuthenticateUserAsync(string UserName, string DomainName, string Password)
		{
			this.AuthenticateUserAsync(UserName, DomainName, Password, null);
		}

		/// <remarks/>
		public void AuthenticateUserAsync(string UserName, string DomainName, string Password, object userState)
		{
			if ((this.AuthenticateUserOperationCompleted == null))
			{
				this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
			}
			this.InvokeAsync("AuthenticateUser", new object[] {
                    UserName,
                    DomainName,
                    Password}, this.AuthenticateUserOperationCompleted, userState);
		}

		private void OnAuthenticateUserOperationCompleted(object arg)
		{
			if ((this.AuthenticateUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateUser(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin)
		{
			object[] results = this.Invoke("UpdateUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    NewPassword,
                    NewFirstName,
                    NewLastName,
                    IsDomainAdmin});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateUser(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    NewPassword,
                    NewFirstName,
                    NewLastName,
                    IsDomainAdmin}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateUserAsync(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin)
		{
			this.UpdateUserAsync(AuthUserName, AuthPassword, EmailAddress, NewPassword, NewFirstName, NewLastName, IsDomainAdmin, null);
		}

		/// <remarks/>
		public void UpdateUserAsync(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin, object userState)
		{
			if ((this.UpdateUserOperationCompleted == null))
			{
				this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
			}
			this.InvokeAsync("UpdateUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    NewPassword,
                    NewFirstName,
                    NewLastName,
                    IsDomainAdmin}, this.UpdateUserOperationCompleted, userState);
		}

		private void OnUpdateUserOperationCompleted(object arg)
		{
			if ((this.UpdateUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUser2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateUser2(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin, int maxMailboxSize)
		{
			object[] results = this.Invoke("UpdateUser2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    NewPassword,
                    NewFirstName,
                    NewLastName,
                    IsDomainAdmin,
                    maxMailboxSize});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateUser2(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin, int maxMailboxSize, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateUser2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    NewPassword,
                    NewFirstName,
                    NewLastName,
                    IsDomainAdmin,
                    maxMailboxSize}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateUser2(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateUser2Async(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin, int maxMailboxSize)
		{
			this.UpdateUser2Async(AuthUserName, AuthPassword, EmailAddress, NewPassword, NewFirstName, NewLastName, IsDomainAdmin, maxMailboxSize, null);
		}

		/// <remarks/>
		public void UpdateUser2Async(string AuthUserName, string AuthPassword, string EmailAddress, string NewPassword, string NewFirstName, string NewLastName, bool IsDomainAdmin, int maxMailboxSize, object userState)
		{
			if ((this.UpdateUser2OperationCompleted == null))
			{
				this.UpdateUser2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUser2OperationCompleted);
			}
			this.InvokeAsync("UpdateUser2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    NewPassword,
                    NewFirstName,
                    NewLastName,
                    IsDomainAdmin,
                    maxMailboxSize}, this.UpdateUser2OperationCompleted, userState);
		}

		private void OnUpdateUser2OperationCompleted(object arg)
		{
			if ((this.UpdateUser2Completed != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateUser2Completed(this, new UpdateUser2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserForwardingInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateUserForwardingInfo(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string ForwardingAddress)
		{
			object[] results = this.Invoke("UpdateUserForwardingInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DeleteOnForward,
                    ForwardingAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateUserForwardingInfo(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string ForwardingAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateUserForwardingInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DeleteOnForward,
                    ForwardingAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateUserForwardingInfo(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateUserForwardingInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string ForwardingAddress)
		{
			this.UpdateUserForwardingInfoAsync(AuthUserName, AuthPassword, EmailAddress, DeleteOnForward, ForwardingAddress, null);
		}

		/// <remarks/>
		public void UpdateUserForwardingInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string ForwardingAddress, object userState)
		{
			if ((this.UpdateUserForwardingInfoOperationCompleted == null))
			{
				this.UpdateUserForwardingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserForwardingInfoOperationCompleted);
			}
			this.InvokeAsync("UpdateUserForwardingInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DeleteOnForward,
                    ForwardingAddress}, this.UpdateUserForwardingInfoOperationCompleted, userState);
		}

		private void OnUpdateUserForwardingInfoOperationCompleted(object arg)
		{
			if ((this.UpdateUserForwardingInfoCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateUserForwardingInfoCompleted(this, new UpdateUserForwardingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserForwardingInfo2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateUserForwardingInfo2(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string[] ForwardingAddresses)
		{
			object[] results = this.Invoke("UpdateUserForwardingInfo2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DeleteOnForward,
                    ForwardingAddresses});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateUserForwardingInfo2(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string[] ForwardingAddresses, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateUserForwardingInfo2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DeleteOnForward,
                    ForwardingAddresses}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateUserForwardingInfo2(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateUserForwardingInfo2Async(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string[] ForwardingAddresses)
		{
			this.UpdateUserForwardingInfo2Async(AuthUserName, AuthPassword, EmailAddress, DeleteOnForward, ForwardingAddresses, null);
		}

		/// <remarks/>
		public void UpdateUserForwardingInfo2Async(string AuthUserName, string AuthPassword, string EmailAddress, bool DeleteOnForward, string[] ForwardingAddresses, object userState)
		{
			if ((this.UpdateUserForwardingInfo2OperationCompleted == null))
			{
				this.UpdateUserForwardingInfo2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserForwardingInfo2OperationCompleted);
			}
			this.InvokeAsync("UpdateUserForwardingInfo2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DeleteOnForward,
                    ForwardingAddresses}, this.UpdateUserForwardingInfo2OperationCompleted, userState);
		}

		private void OnUpdateUserForwardingInfo2OperationCompleted(object arg)
		{
			if ((this.UpdateUserForwardingInfo2Completed != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateUserForwardingInfo2Completed(this, new UpdateUserForwardingInfo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserAutoResponseInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateUserAutoResponseInfo(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, string Subject, string Body)
		{
			object[] results = this.Invoke("UpdateUserAutoResponseInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled,
                    Subject,
                    Body});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateUserAutoResponseInfo(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, string Subject, string Body, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateUserAutoResponseInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled,
                    Subject,
                    Body}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateUserAutoResponseInfo(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateUserAutoResponseInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, string Subject, string Body)
		{
			this.UpdateUserAutoResponseInfoAsync(AuthUserName, AuthPassword, EmailAddress, Enabled, Subject, Body, null);
		}

		/// <remarks/>
		public void UpdateUserAutoResponseInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, string Subject, string Body, object userState)
		{
			if ((this.UpdateUserAutoResponseInfoOperationCompleted == null))
			{
				this.UpdateUserAutoResponseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserAutoResponseInfoOperationCompleted);
			}
			this.InvokeAsync("UpdateUserAutoResponseInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled,
                    Subject,
                    Body}, this.UpdateUserAutoResponseInfoOperationCompleted, userState);
		}

		private void OnUpdateUserAutoResponseInfoOperationCompleted(object arg)
		{
			if ((this.UpdateUserAutoResponseInfoCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateUserAutoResponseInfoCompleted(this, new UpdateUserAutoResponseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteUser(string AuthUserName, string AuthPassword, string Username, string DomainName)
		{
			object[] results = this.Invoke("DeleteUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    Username,
                    DomainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteUser(string AuthUserName, string AuthPassword, string Username, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    Username,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteUserAsync(string AuthUserName, string AuthPassword, string Username, string DomainName)
		{
			this.DeleteUserAsync(AuthUserName, AuthPassword, Username, DomainName, null);
		}

		/// <remarks/>
		public void DeleteUserAsync(string AuthUserName, string AuthPassword, string Username, string DomainName, object userState)
		{
			if ((this.DeleteUserOperationCompleted == null))
			{
				this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
			}
			this.InvokeAsync("DeleteUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    Username,
                    DomainName}, this.DeleteUserOperationCompleted, userState);
		}

		private void OnDeleteUserOperationCompleted(object arg)
		{
			if ((this.DeleteUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserInfoResult GetUser(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			object[] results = this.Invoke("GetUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress});
			return ((UserInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUser(string AuthUserName, string AuthPassword, string EmailAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, callback, asyncState);
		}

		/// <remarks/>
		public UserInfoResult EndGetUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserAsync(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			this.GetUserAsync(AuthUserName, AuthPassword, EmailAddress, null);
		}

		/// <remarks/>
		public void GetUserAsync(string AuthUserName, string AuthPassword, string EmailAddress, object userState)
		{
			if ((this.GetUserOperationCompleted == null))
			{
				this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
			}
			this.InvokeAsync("GetUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, this.GetUserOperationCompleted, userState);
		}

		private void OnGetUserOperationCompleted(object arg)
		{
			if ((this.GetUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLastLoginTimes", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public LastLoginInfoResult GetLastLoginTimes(string AuthUserName, string AuthPassword, string EmailAddress, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> DateStart, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> DateEnd)
		{
			object[] results = this.Invoke("GetLastLoginTimes", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DateStart,
                    DateEnd});
			return ((LastLoginInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetLastLoginTimes(string AuthUserName, string AuthPassword, string EmailAddress, System.Nullable<System.DateTime> DateStart, System.Nullable<System.DateTime> DateEnd, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetLastLoginTimes", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DateStart,
                    DateEnd}, callback, asyncState);
		}

		/// <remarks/>
		public LastLoginInfoResult EndGetLastLoginTimes(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((LastLoginInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetLastLoginTimesAsync(string AuthUserName, string AuthPassword, string EmailAddress, System.Nullable<System.DateTime> DateStart, System.Nullable<System.DateTime> DateEnd)
		{
			this.GetLastLoginTimesAsync(AuthUserName, AuthPassword, EmailAddress, DateStart, DateEnd, null);
		}

		/// <remarks/>
		public void GetLastLoginTimesAsync(string AuthUserName, string AuthPassword, string EmailAddress, System.Nullable<System.DateTime> DateStart, System.Nullable<System.DateTime> DateEnd, object userState)
		{
			if ((this.GetLastLoginTimesOperationCompleted == null))
			{
				this.GetLastLoginTimesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastLoginTimesOperationCompleted);
			}
			this.InvokeAsync("GetLastLoginTimes", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    DateStart,
                    DateEnd}, this.GetLastLoginTimesOperationCompleted, userState);
		}

		private void OnGetLastLoginTimesOperationCompleted(object arg)
		{
			if ((this.GetLastLoginTimesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetLastLoginTimesCompleted(this, new GetLastLoginTimesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedUserSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SettingsRequestResult GetRequestedUserSettings(string AuthUserName, string AuthPassword, string EmailAddress, string[] requestedSettings)
		{
			object[] results = this.Invoke("GetRequestedUserSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    requestedSettings});
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRequestedUserSettings(string AuthUserName, string AuthPassword, string EmailAddress, string[] requestedSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRequestedUserSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    requestedSettings}, callback, asyncState);
		}

		/// <remarks/>
		public SettingsRequestResult EndGetRequestedUserSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public void GetRequestedUserSettingsAsync(string AuthUserName, string AuthPassword, string EmailAddress, string[] requestedSettings)
		{
			this.GetRequestedUserSettingsAsync(AuthUserName, AuthPassword, EmailAddress, requestedSettings, null);
		}

		/// <remarks/>
		public void GetRequestedUserSettingsAsync(string AuthUserName, string AuthPassword, string EmailAddress, string[] requestedSettings, object userState)
		{
			if ((this.GetRequestedUserSettingsOperationCompleted == null))
			{
				this.GetRequestedUserSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestedUserSettingsOperationCompleted);
			}
			this.InvokeAsync("GetRequestedUserSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    requestedSettings}, this.GetRequestedUserSettingsOperationCompleted, userState);
		}

		private void OnGetRequestedUserSettingsOperationCompleted(object arg)
		{
			if ((this.GetRequestedUserSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRequestedUserSettingsCompleted(this, new GetRequestedUserSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedUserSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetRequestedUserSettings(string AuthUserName, string AuthPassword, string EmailAddress, string[] newSettings)
		{
			object[] results = this.Invoke("SetRequestedUserSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    newSettings});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetRequestedUserSettings(string AuthUserName, string AuthPassword, string EmailAddress, string[] newSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetRequestedUserSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    newSettings}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetRequestedUserSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetRequestedUserSettingsAsync(string AuthUserName, string AuthPassword, string EmailAddress, string[] newSettings)
		{
			this.SetRequestedUserSettingsAsync(AuthUserName, AuthPassword, EmailAddress, newSettings, null);
		}

		/// <remarks/>
		public void SetRequestedUserSettingsAsync(string AuthUserName, string AuthPassword, string EmailAddress, string[] newSettings, object userState)
		{
			if ((this.SetRequestedUserSettingsOperationCompleted == null))
			{
				this.SetRequestedUserSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRequestedUserSettingsOperationCompleted);
			}
			this.InvokeAsync("SetRequestedUserSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    newSettings}, this.SetRequestedUserSettingsOperationCompleted, userState);
		}

		private void OnSetRequestedUserSettingsOperationCompleted(object arg)
		{
			if ((this.SetRequestedUserSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetRequestedUserSettingsCompleted(this, new SetRequestedUserSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInactiveUsers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public InactiveUserResult GetInactiveUsers(string AuthUserName, string AuthPassword, System.DateTime date)
		{
			object[] results = this.Invoke("GetInactiveUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    date});
			return ((InactiveUserResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetInactiveUsers(string AuthUserName, string AuthPassword, System.DateTime date, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetInactiveUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    date}, callback, asyncState);
		}

		/// <remarks/>
		public InactiveUserResult EndGetInactiveUsers(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((InactiveUserResult)(results[0]));
		}

		/// <remarks/>
		public void GetInactiveUsersAsync(string AuthUserName, string AuthPassword, System.DateTime date)
		{
			this.GetInactiveUsersAsync(AuthUserName, AuthPassword, date, null);
		}

		/// <remarks/>
		public void GetInactiveUsersAsync(string AuthUserName, string AuthPassword, System.DateTime date, object userState)
		{
			if ((this.GetInactiveUsersOperationCompleted == null))
			{
				this.GetInactiveUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInactiveUsersOperationCompleted);
			}
			this.InvokeAsync("GetInactiveUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    date}, this.GetInactiveUsersOperationCompleted, userState);
		}

		private void OnGetInactiveUsersOperationCompleted(object arg)
		{
			if ((this.GetInactiveUsersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetInactiveUsersCompleted(this, new GetInactiveUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserForwardingInfo2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserForwardingInfoResult2 GetUserForwardingInfo2(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			object[] results = this.Invoke("GetUserForwardingInfo2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress});
			return ((UserForwardingInfoResult2)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserForwardingInfo2(string AuthUserName, string AuthPassword, string EmailAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserForwardingInfo2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, callback, asyncState);
		}

		/// <remarks/>
		public UserForwardingInfoResult2 EndGetUserForwardingInfo2(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserForwardingInfoResult2)(results[0]));
		}

		/// <remarks/>
		public void GetUserForwardingInfo2Async(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			this.GetUserForwardingInfo2Async(AuthUserName, AuthPassword, EmailAddress, null);
		}

		/// <remarks/>
		public void GetUserForwardingInfo2Async(string AuthUserName, string AuthPassword, string EmailAddress, object userState)
		{
			if ((this.GetUserForwardingInfo2OperationCompleted == null))
			{
				this.GetUserForwardingInfo2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserForwardingInfo2OperationCompleted);
			}
			this.InvokeAsync("GetUserForwardingInfo2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, this.GetUserForwardingInfo2OperationCompleted, userState);
		}

		private void OnGetUserForwardingInfo2OperationCompleted(object arg)
		{
			if ((this.GetUserForwardingInfo2Completed != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserForwardingInfo2Completed(this, new GetUserForwardingInfo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserForwardingInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserForwardingInfoResult GetUserForwardingInfo(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			object[] results = this.Invoke("GetUserForwardingInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress});
			return ((UserForwardingInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserForwardingInfo(string AuthUserName, string AuthPassword, string EmailAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserForwardingInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, callback, asyncState);
		}

		/// <remarks/>
		public UserForwardingInfoResult EndGetUserForwardingInfo(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserForwardingInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserForwardingInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			this.GetUserForwardingInfoAsync(AuthUserName, AuthPassword, EmailAddress, null);
		}

		/// <remarks/>
		public void GetUserForwardingInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress, object userState)
		{
			if ((this.GetUserForwardingInfoOperationCompleted == null))
			{
				this.GetUserForwardingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserForwardingInfoOperationCompleted);
			}
			this.InvokeAsync("GetUserForwardingInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, this.GetUserForwardingInfoOperationCompleted, userState);
		}

		private void OnGetUserForwardingInfoOperationCompleted(object arg)
		{
			if ((this.GetUserForwardingInfoCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserForwardingInfoCompleted(this, new GetUserForwardingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserAutoResponseInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserAutoResponseResult GetUserAutoResponseInfo(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			object[] results = this.Invoke("GetUserAutoResponseInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress});
			return ((UserAutoResponseResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserAutoResponseInfo(string AuthUserName, string AuthPassword, string EmailAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserAutoResponseInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, callback, asyncState);
		}

		/// <remarks/>
		public UserAutoResponseResult EndGetUserAutoResponseInfo(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserAutoResponseResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserAutoResponseInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			this.GetUserAutoResponseInfoAsync(AuthUserName, AuthPassword, EmailAddress, null);
		}

		/// <remarks/>
		public void GetUserAutoResponseInfoAsync(string AuthUserName, string AuthPassword, string EmailAddress, object userState)
		{
			if ((this.GetUserAutoResponseInfoOperationCompleted == null))
			{
				this.GetUserAutoResponseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAutoResponseInfoOperationCompleted);
			}
			this.InvokeAsync("GetUserAutoResponseInfo", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, this.GetUserAutoResponseInfoOperationCompleted, userState);
		}

		private void OnGetUserAutoResponseInfoOperationCompleted(object arg)
		{
			if ((this.GetUserAutoResponseInfoCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserAutoResponseInfoCompleted(this, new GetUserAutoResponseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserQuotas", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public QuotaInfoListResult GetUserQuotas(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetUserQuotas", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((QuotaInfoListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserQuotas(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserQuotas", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public QuotaInfoListResult EndGetUserQuotas(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((QuotaInfoListResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserQuotasAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetUserQuotasAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetUserQuotasAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetUserQuotasOperationCompleted == null))
			{
				this.GetUserQuotasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserQuotasOperationCompleted);
			}
			this.InvokeAsync("GetUserQuotas", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetUserQuotasOperationCompleted, userState);
		}

		private void OnGetUserQuotasOperationCompleted(object arg)
		{
			if ((this.GetUserQuotasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserQuotasCompleted(this, new GetUserQuotasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserInfoListResult GetUsers(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((UserInfoListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUsers(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public UserInfoListResult EndGetUsers(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserInfoListResult)(results[0]));
		}

		/// <remarks/>
		public void GetUsersAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetUsersAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetUsersAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetUsersOperationCompleted == null))
			{
				this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
			}
			this.InvokeAsync("GetUsers", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetUsersOperationCompleted, userState);
		}

		private void OnGetUsersOperationCompleted(object arg)
		{
			if ((this.GetUsersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginValidated", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public LoginResult LoginValidated(string Username, string Password)
		{
			object[] results = this.Invoke("LoginValidated", new object[] {
                    Username,
                    Password});
			return ((LoginResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginLoginValidated(string Username, string Password, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("LoginValidated", new object[] {
                    Username,
                    Password}, callback, asyncState);
		}

		/// <remarks/>
		public LoginResult EndLoginValidated(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((LoginResult)(results[0]));
		}

		/// <remarks/>
		public void LoginValidatedAsync(string Username, string Password)
		{
			this.LoginValidatedAsync(Username, Password, null);
		}

		/// <remarks/>
		public void LoginValidatedAsync(string Username, string Password, object userState)
		{
			if ((this.LoginValidatedOperationCompleted == null))
			{
				this.LoginValidatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginValidatedOperationCompleted);
			}
			this.InvokeAsync("LoginValidated", new object[] {
                    Username,
                    Password}, this.LoginValidatedOperationCompleted, userState);
		}

		private void OnLoginValidatedOperationCompleted(object arg)
		{
			if ((this.LoginValidatedCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.LoginValidatedCompleted(this, new LoginValidatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddRSSFeed", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddRSSFeed(string AuthUserName, string AuthPassword, string EmailAddress, string rssUrl, string rssName, string rssFolder)
		{
			object[] results = this.Invoke("AddRSSFeed", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    rssUrl,
                    rssName,
                    rssFolder});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddRSSFeed(string AuthUserName, string AuthPassword, string EmailAddress, string rssUrl, string rssName, string rssFolder, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddRSSFeed", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    rssUrl,
                    rssName,
                    rssFolder}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddRSSFeed(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddRSSFeedAsync(string AuthUserName, string AuthPassword, string EmailAddress, string rssUrl, string rssName, string rssFolder)
		{
			this.AddRSSFeedAsync(AuthUserName, AuthPassword, EmailAddress, rssUrl, rssName, rssFolder, null);
		}

		/// <remarks/>
		public void AddRSSFeedAsync(string AuthUserName, string AuthPassword, string EmailAddress, string rssUrl, string rssName, string rssFolder, object userState)
		{
			if ((this.AddRSSFeedOperationCompleted == null))
			{
				this.AddRSSFeedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRSSFeedOperationCompleted);
			}
			this.InvokeAsync("AddRSSFeed", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    rssUrl,
                    rssName,
                    rssFolder}, this.AddRSSFeedOperationCompleted, userState);
		}

		private void OnAddRSSFeedOperationCompleted(object arg)
		{
			if ((this.AddRSSFeedCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddRSSFeedCompleted(this, new AddRSSFeedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ToggleActiveSync", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult ToggleActiveSync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled)
		{
			object[] results = this.Invoke("ToggleActiveSync", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginToggleActiveSync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ToggleActiveSync", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndToggleActiveSync(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void ToggleActiveSyncAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled)
		{
			this.ToggleActiveSyncAsync(AuthUserName, AuthPassword, EmailAddress, Enabled, null);
		}

		/// <remarks/>
		public void ToggleActiveSyncAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, object userState)
		{
			if ((this.ToggleActiveSyncOperationCompleted == null))
			{
				this.ToggleActiveSyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnToggleActiveSyncOperationCompleted);
			}
			this.InvokeAsync("ToggleActiveSync", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled}, this.ToggleActiveSyncOperationCompleted, userState);
		}

		private void OnToggleActiveSyncOperationCompleted(object arg)
		{
			if ((this.ToggleActiveSyncCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ToggleActiveSyncCompleted(this, new ToggleActiveSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsUserEnabledForActiveSync", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ActiveSyncEnabledResult IsUserEnabledForActiveSync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled)
		{
			object[] results = this.Invoke("IsUserEnabledForActiveSync", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled});
			return ((ActiveSyncEnabledResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginIsUserEnabledForActiveSync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("IsUserEnabledForActiveSync", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled}, callback, asyncState);
		}

		/// <remarks/>
		public ActiveSyncEnabledResult EndIsUserEnabledForActiveSync(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ActiveSyncEnabledResult)(results[0]));
		}

		/// <remarks/>
		public void IsUserEnabledForActiveSyncAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled)
		{
			this.IsUserEnabledForActiveSyncAsync(AuthUserName, AuthPassword, EmailAddress, Enabled, null);
		}

		/// <remarks/>
		public void IsUserEnabledForActiveSyncAsync(string AuthUserName, string AuthPassword, string EmailAddress, bool Enabled, object userState)
		{
			if ((this.IsUserEnabledForActiveSyncOperationCompleted == null))
			{
				this.IsUserEnabledForActiveSyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserEnabledForActiveSyncOperationCompleted);
			}
			this.InvokeAsync("IsUserEnabledForActiveSync", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Enabled}, this.IsUserEnabledForActiveSyncOperationCompleted, userState);
		}

		private void OnIsUserEnabledForActiveSyncOperationCompleted(object arg)
		{
			if ((this.IsUserEnabledForActiveSyncCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.IsUserEnabledForActiveSyncCompleted(this, new IsUserEnabledForActiveSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListRSSFeeds", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public RSSFeedListResult ListRSSFeeds(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			object[] results = this.Invoke("ListRSSFeeds", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress});
			return ((RSSFeedListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListRSSFeeds(string AuthUserName, string AuthPassword, string EmailAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListRSSFeeds", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, callback, asyncState);
		}

		/// <remarks/>
		public RSSFeedListResult EndListRSSFeeds(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((RSSFeedListResult)(results[0]));
		}

		/// <remarks/>
		public void ListRSSFeedsAsync(string AuthUserName, string AuthPassword, string EmailAddress)
		{
			this.ListRSSFeedsAsync(AuthUserName, AuthPassword, EmailAddress, null);
		}

		/// <remarks/>
		public void ListRSSFeedsAsync(string AuthUserName, string AuthPassword, string EmailAddress, object userState)
		{
			if ((this.ListRSSFeedsOperationCompleted == null))
			{
				this.ListRSSFeedsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRSSFeedsOperationCompleted);
			}
			this.InvokeAsync("ListRSSFeeds", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress}, this.ListRSSFeedsOperationCompleted, userState);
		}

		private void OnListRSSFeedsOperationCompleted(object arg)
		{
			if ((this.ListRSSFeedsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListRSSFeedsCompleted(this, new ListRSSFeedsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteRSSFeed", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteRSSFeed(string AuthUserName, string AuthPassword, string EmailAddress, string UID)
		{
			object[] results = this.Invoke("DeleteRSSFeed", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    UID});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteRSSFeed(string AuthUserName, string AuthPassword, string EmailAddress, string UID, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteRSSFeed", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    UID}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteRSSFeed(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteRSSFeedAsync(string AuthUserName, string AuthPassword, string EmailAddress, string UID)
		{
			this.DeleteRSSFeedAsync(AuthUserName, AuthPassword, EmailAddress, UID, null);
		}

		/// <remarks/>
		public void DeleteRSSFeedAsync(string AuthUserName, string AuthPassword, string EmailAddress, string UID, object userState)
		{
			if ((this.DeleteRSSFeedOperationCompleted == null))
			{
				this.DeleteRSSFeedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRSSFeedOperationCompleted);
			}
			this.InvokeAsync("DeleteRSSFeed", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    UID}, this.DeleteRSSFeedOperationCompleted, userState);
		}

		private void OnDeleteRSSFeedOperationCompleted(object arg)
		{
			if ((this.DeleteRSSFeedCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteRSSFeedCompleted(this, new DeleteRSSFeedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserStats", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public StatInfoResult GetUserStats(string AuthUserName, string AuthPassword, string EmailAddress, System.DateTime Start, System.DateTime End)
		{
			object[] results = this.Invoke("GetUserStats", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Start,
                    End});
			return ((StatInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserStats(string AuthUserName, string AuthPassword, string EmailAddress, System.DateTime Start, System.DateTime End, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserStats", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Start,
                    End}, callback, asyncState);
		}

		/// <remarks/>
		public StatInfoResult EndGetUserStats(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((StatInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserStatsAsync(string AuthUserName, string AuthPassword, string EmailAddress, System.DateTime Start, System.DateTime End)
		{
			this.GetUserStatsAsync(AuthUserName, AuthPassword, EmailAddress, Start, End, null);
		}

		/// <remarks/>
		public void GetUserStatsAsync(string AuthUserName, string AuthPassword, string EmailAddress, System.DateTime Start, System.DateTime End, object userState)
		{
			if ((this.GetUserStatsOperationCompleted == null))
			{
				this.GetUserStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserStatsOperationCompleted);
			}
			this.InvokeAsync("GetUserStats", new object[] {
                    AuthUserName,
                    AuthPassword,
                    EmailAddress,
                    Start,
                    End}, this.GetUserStatsOperationCompleted, userState);
		}

		private void OnGetUserStatsOperationCompleted(object arg)
		{
			if ((this.GetUserStatsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserStatsCompleted(this, new GetUserStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupName, string[] UserNames)
		{
			object[] results = this.Invoke("AddUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupName,
                    UserNames});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupName, string[] UserNames, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupName,
                    UserNames}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddUserGroup(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupName, string[] UserNames)
		{
			this.AddUserGroupAsync(AuthUserName, AuthPassword, DomainName, UserGroupName, UserNames, null);
		}

		/// <remarks/>
		public void AddUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupName, string[] UserNames, object userState)
		{
			if ((this.AddUserGroupOperationCompleted == null))
			{
				this.AddUserGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserGroupOperationCompleted);
			}
			this.InvokeAsync("AddUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupName,
                    UserNames}, this.AddUserGroupOperationCompleted, userState);
		}

		private void OnAddUserGroupOperationCompleted(object arg)
		{
			if ((this.AddUserGroupCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddUserGroupCompleted(this, new AddUserGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemoveUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID)
		{
			object[] results = this.Invoke("RemoveUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemoveUserGroup(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemoveUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID)
		{
			this.RemoveUserGroupAsync(AuthUserName, AuthPassword, DomainName, UserGroupID, null);
		}

		/// <remarks/>
		public void RemoveUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, object userState)
		{
			if ((this.RemoveUserGroupOperationCompleted == null))
			{
				this.RemoveUserGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserGroupOperationCompleted);
			}
			this.InvokeAsync("RemoveUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID}, this.RemoveUserGroupOperationCompleted, userState);
		}

		private void OnRemoveUserGroupOperationCompleted(object arg)
		{
			if ((this.RemoveUserGroupCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveUserGroupCompleted(this, new RemoveUserGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, string UserGroupName, string[] UserNames)
		{
			object[] results = this.Invoke("UpdateUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID,
                    UserGroupName,
                    UserNames});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, string UserGroupName, string[] UserNames, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID,
                    UserGroupName,
                    UserNames}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateUserGroup(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, string UserGroupName, string[] UserNames)
		{
			this.UpdateUserGroupAsync(AuthUserName, AuthPassword, DomainName, UserGroupID, UserGroupName, UserNames, null);
		}

		/// <remarks/>
		public void UpdateUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, string UserGroupName, string[] UserNames, object userState)
		{
			if ((this.UpdateUserGroupOperationCompleted == null))
			{
				this.UpdateUserGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserGroupOperationCompleted);
			}
			this.InvokeAsync("UpdateUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID,
                    UserGroupName,
                    UserNames}, this.UpdateUserGroupOperationCompleted, userState);
		}

		private void OnUpdateUserGroupOperationCompleted(object arg)
		{
			if ((this.UpdateUserGroupCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateUserGroupCompleted(this, new UpdateUserGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroup", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserGroupInfoResult GetUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID)
		{
			object[] results = this.Invoke("GetUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID});
			return ((UserGroupInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserGroup(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID}, callback, asyncState);
		}

		/// <remarks/>
		public UserGroupInfoResult EndGetUserGroup(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserGroupInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID)
		{
			this.GetUserGroupAsync(AuthUserName, AuthPassword, DomainName, UserGroupID, null);
		}

		/// <remarks/>
		public void GetUserGroupAsync(string AuthUserName, string AuthPassword, string DomainName, string UserGroupID, object userState)
		{
			if ((this.GetUserGroupOperationCompleted == null))
			{
				this.GetUserGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGroupOperationCompleted);
			}
			this.InvokeAsync("GetUserGroup", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserGroupID}, this.GetUserGroupOperationCompleted, userState);
		}

		private void OnGetUserGroupOperationCompleted(object arg)
		{
			if ((this.GetUserGroupCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserGroupCompleted(this, new GetUserGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupsByUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserGroupsResult GetUserGroupsByUser(string AuthUserName, string AuthPassword, string DomainName, string UserName, bool IncludeUserNames)
		{
			object[] results = this.Invoke("GetUserGroupsByUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserName,
                    IncludeUserNames});
			return ((UserGroupsResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserGroupsByUser(string AuthUserName, string AuthPassword, string DomainName, string UserName, bool IncludeUserNames, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserGroupsByUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserName,
                    IncludeUserNames}, callback, asyncState);
		}

		/// <remarks/>
		public UserGroupsResult EndGetUserGroupsByUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserGroupsResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserGroupsByUserAsync(string AuthUserName, string AuthPassword, string DomainName, string UserName, bool IncludeUserNames)
		{
			this.GetUserGroupsByUserAsync(AuthUserName, AuthPassword, DomainName, UserName, IncludeUserNames, null);
		}

		/// <remarks/>
		public void GetUserGroupsByUserAsync(string AuthUserName, string AuthPassword, string DomainName, string UserName, bool IncludeUserNames, object userState)
		{
			if ((this.GetUserGroupsByUserOperationCompleted == null))
			{
				this.GetUserGroupsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGroupsByUserOperationCompleted);
			}
			this.InvokeAsync("GetUserGroupsByUser", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    UserName,
                    IncludeUserNames}, this.GetUserGroupsByUserOperationCompleted, userState);
		}

		private void OnGetUserGroupsByUserOperationCompleted(object arg)
		{
			if ((this.GetUserGroupsByUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserGroupsByUserCompleted(this, new GetUserGroupsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupsByDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public UserGroupsResult GetUserGroupsByDomain(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetUserGroupsByDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((UserGroupsResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetUserGroupsByDomain(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetUserGroupsByDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public UserGroupsResult EndGetUserGroupsByDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((UserGroupsResult)(results[0]));
		}

		/// <remarks/>
		public void GetUserGroupsByDomainAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetUserGroupsByDomainAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetUserGroupsByDomainAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetUserGroupsByDomainOperationCompleted == null))
			{
				this.GetUserGroupsByDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGroupsByDomainOperationCompleted);
			}
			this.InvokeAsync("GetUserGroupsByDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetUserGroupsByDomainOperationCompleted, userState);
		}

		private void OnGetUserGroupsByDomainOperationCompleted(object arg)
		{
			if ((this.GetUserGroupsByDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetUserGroupsByDomainCompleted(this, new GetUserGroupsByDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class RequestStatusResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] keyValuePairsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] KeyValuePairs
		{
			get
			{
				return this.keyValuePairsField;
			}
			set
			{
				this.keyValuePairsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserGroupsResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private UserGroupInfo[] userGroupsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public UserGroupInfo[] UserGroups
		{
			get
			{
				return this.userGroupsField;
			}
			set
			{
				this.userGroupsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserGroupInfo
	{

		private string guidField;

		private string nameField;

		private string[] userNamesField;

		/// <remarks/>
		public string guid
		{
			get
			{
				return this.guidField;
			}
			set
			{
				this.guidField = value;
			}
		}

		/// <remarks/>
		public string name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public string[] userNames
		{
			get
			{
				return this.userNamesField;
			}
			set
			{
				this.userNamesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserGroupInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private UserGroupInfo userGroupField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public UserGroupInfo UserGroup
		{
			get
			{
				return this.userGroupField;
			}
			set
			{
				this.userGroupField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class RSSFeed
	{
		private string uidField;

		private string nameField;

		private string urlField;

		private string folderField;

		/// <remarks/>
		public string uid
		{
			get
			{
				return this.uidField;
			}
			set
			{
				this.uidField = value;
			}
		}

		/// <remarks/>
		public string name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public string url
		{
			get
			{
				return this.urlField;
			}
			set
			{
				this.urlField = value;
			}
		}

		/// <remarks/>
		public string folder
		{
			get
			{
				return this.folderField;
			}
			set
			{
				this.folderField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class RSSFeedListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private RSSFeed[] rSSFeedsField;

		private string[] foldersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public RSSFeed[] RSSFeeds
		{
			get
			{
				return this.rSSFeedsField;
			}
			set
			{
				this.rSSFeedsField = value;
			}
		}

		/// <remarks/>
		public string[] Folders
		{
			get
			{
				return this.foldersField;
			}
			set
			{
				this.foldersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class ActiveSyncEnabledResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private bool enabledField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public bool Enabled
		{
			get
			{
				return this.enabledField;
			}
			set
			{
				this.enabledField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class LoginResult
	{

		private bool loginValidatedField;

		private int resultCodeField;

		private string messageField;

		/// <remarks/>
		public bool LoginValidated
		{
			get
			{
				return this.loginValidatedField;
			}
			set
			{
				this.loginValidatedField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserInfoListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private UserInfo[] usersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public UserInfo[] Users
		{
			get
			{
				return this.usersField;
			}
			set
			{
				this.usersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserInfo
	{

		private string userNameField;

		private string passwordField;

		private string firstNameField;

		private string lastNameField;

		private bool isSystemAdminField;

		private bool isDomainAdminField;

		/// <remarks/>
		public string UserName
		{
			get
			{
				return this.userNameField;
			}
			set
			{
				this.userNameField = value;
			}
		}

		/// <remarks/>
		public string Password
		{
			get
			{
				return this.passwordField;
			}
			set
			{
				this.passwordField = value;
			}
		}

		/// <remarks/>
		public string FirstName
		{
			get
			{
				return this.firstNameField;
			}
			set
			{
				this.firstNameField = value;
			}
		}

		/// <remarks/>
		public string LastName
		{
			get
			{
				return this.lastNameField;
			}
			set
			{
				this.lastNameField = value;
			}
		}

		/// <remarks/>
		public bool IsSystemAdmin
		{
			get
			{
				return this.isSystemAdminField;
			}
			set
			{
				this.isSystemAdminField = value;
			}
		}

		/// <remarks/>
		public bool IsDomainAdmin
		{
			get
			{
				return this.isDomainAdminField;
			}
			set
			{
				this.isDomainAdminField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserQuota
	{

		private string userNameField;

		private long maxSpaceField;

		private long currentSpaceField;

		/// <remarks/>
		public string UserName
		{
			get
			{
				return this.userNameField;
			}
			set
			{
				this.userNameField = value;
			}
		}

		/// <remarks/>
		public long MaxSpace
		{
			get
			{
				return this.maxSpaceField;
			}
			set
			{
				this.maxSpaceField = value;
			}
		}

		/// <remarks/>
		public long CurrentSpace
		{
			get
			{
				return this.currentSpaceField;
			}
			set
			{
				this.currentSpaceField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class QuotaInfoListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private UserQuota[] usersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public UserQuota[] Users
		{
			get
			{
				return this.usersField;
			}
			set
			{
				this.usersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserAutoResponseResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private bool enabledField;

		private string subjectField;

		private string bodyField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public bool Enabled
		{
			get
			{
				return this.enabledField;
			}
			set
			{
				this.enabledField = value;
			}
		}

		/// <remarks/>
		public string Subject
		{
			get
			{
				return this.subjectField;
			}
			set
			{
				this.subjectField = value;
			}
		}

		/// <remarks/>
		public string Body
		{
			get
			{
				return this.bodyField;
			}
			set
			{
				this.bodyField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserForwardingInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private bool deleteOnForwardField;

		private string forwardingAddressField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public bool DeleteOnForward
		{
			get
			{
				return this.deleteOnForwardField;
			}
			set
			{
				this.deleteOnForwardField = value;
			}
		}

		/// <remarks/>
		public string ForwardingAddress
		{
			get
			{
				return this.forwardingAddressField;
			}
			set
			{
				this.forwardingAddressField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserForwardingInfoResult2
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private bool deleteOnForwardField;

		private string[] forwardingAddressesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public bool DeleteOnForward
		{
			get
			{
				return this.deleteOnForwardField;
			}
			set
			{
				this.deleteOnForwardField = value;
			}
		}

		/// <remarks/>
		public string[] ForwardingAddresses
		{
			get
			{
				return this.forwardingAddressesField;
			}
			set
			{
				this.forwardingAddressesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class InactiveUserResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] emailAddressField;

		private System.DateTime[] lastLoginField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] EmailAddress
		{
			get
			{
				return this.emailAddressField;
			}
			set
			{
				this.emailAddressField = value;
			}
		}

		/// <remarks/>
		public System.DateTime[] LastLogin
		{
			get
			{
				return this.lastLoginField;
			}
			set
			{
				this.lastLoginField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserLoginInfo
	{

		private string userNameField;

		private System.DateTime loginTimeField;

		/// <remarks/>
		public string UserName
		{
			get
			{
				return this.userNameField;
			}
			set
			{
				this.userNameField = value;
			}
		}

		/// <remarks/>
		public System.DateTime LoginTime
		{
			get
			{
				return this.loginTimeField;
			}
			set
			{
				this.loginTimeField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class LastLoginInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] lastLoginsField;

		private UserLoginInfo[] lastUserLoginsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] lastLogins
		{
			get
			{
				return this.lastLoginsField;
			}
			set
			{
				this.lastLoginsField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public UserLoginInfo[] lastUserLogins
		{
			get
			{
				return this.lastUserLoginsField;
			}
			set
			{
				this.lastUserLoginsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class UserInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private UserInfo userInfoField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public UserInfo UserInfo
		{
			get
			{
				return this.userInfoField;
			}
			set
			{
				this.userInfoField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class StatusResults
	{

		private System.Guid idField;

		private string emailAddressField;

		private string statusField;

		/// <remarks/>
		public System.Guid ID
		{
			get
			{
				return this.idField;
			}
			set
			{
				this.idField = value;
			}
		}

		/// <remarks/>
		public string emailAddress
		{
			get
			{
				return this.emailAddressField;
			}
			set
			{
				this.emailAddressField = value;
			}
		}

		/// <remarks/>
		public string status
		{
			get
			{
				return this.statusField;
			}
			set
			{
				this.statusField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void QueueMailBoxMigrationCompletedEventHandler(object sender, QueueMailBoxMigrationCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class QueueMailBoxMigrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal QueueMailBoxMigrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public RequestStatusResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((RequestStatusResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveFromMigrationQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetMigrationStatusCompletedEventHandler(object sender, GetMigrationStatusCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetMigrationStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetMigrationStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public StatusResults[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((StatusResults[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddUser2CompletedEventHandler(object sender, AddUser2CompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateUserCompletedEventHandler(object sender, UpdateUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateUser2CompletedEventHandler(object sender, UpdateUser2CompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateUserForwardingInfoCompletedEventHandler(object sender, UpdateUserForwardingInfoCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateUserForwardingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateUserForwardingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateUserForwardingInfo2CompletedEventHandler(object sender, UpdateUserForwardingInfo2CompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateUserForwardingInfo2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateUserForwardingInfo2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateUserAutoResponseInfoCompletedEventHandler(object sender, UpdateUserAutoResponseInfoCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateUserAutoResponseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateUserAutoResponseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetLastLoginTimesCompletedEventHandler(object sender, GetLastLoginTimesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetLastLoginTimesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetLastLoginTimesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public LastLoginInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((LastLoginInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetRequestedUserSettingsCompletedEventHandler(object sender, GetRequestedUserSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRequestedUserSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRequestedUserSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SettingsRequestResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SettingsRequestResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetRequestedUserSettingsCompletedEventHandler(object sender, SetRequestedUserSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetRequestedUserSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetRequestedUserSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetInactiveUsersCompletedEventHandler(object sender, GetInactiveUsersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetInactiveUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetInactiveUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public InactiveUserResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((InactiveUserResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserForwardingInfo2CompletedEventHandler(object sender, GetUserForwardingInfo2CompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserForwardingInfo2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserForwardingInfo2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserForwardingInfoResult2 Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserForwardingInfoResult2)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserForwardingInfoCompletedEventHandler(object sender, GetUserForwardingInfoCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserForwardingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserForwardingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserForwardingInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserForwardingInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserAutoResponseInfoCompletedEventHandler(object sender, GetUserAutoResponseInfoCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserAutoResponseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserAutoResponseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserAutoResponseResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserAutoResponseResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserQuotasCompletedEventHandler(object sender, GetUserQuotasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserQuotasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserQuotasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public QuotaInfoListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((QuotaInfoListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserInfoListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserInfoListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void LoginValidatedCompletedEventHandler(object sender, LoginValidatedCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class LoginValidatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal LoginValidatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public LoginResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((LoginResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddRSSFeedCompletedEventHandler(object sender, AddRSSFeedCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddRSSFeedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddRSSFeedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ToggleActiveSyncCompletedEventHandler(object sender, ToggleActiveSyncCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ToggleActiveSyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ToggleActiveSyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void IsUserEnabledForActiveSyncCompletedEventHandler(object sender, IsUserEnabledForActiveSyncCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class IsUserEnabledForActiveSyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal IsUserEnabledForActiveSyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ActiveSyncEnabledResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ActiveSyncEnabledResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListRSSFeedsCompletedEventHandler(object sender, ListRSSFeedsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListRSSFeedsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListRSSFeedsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public RSSFeedListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((RSSFeedListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteRSSFeedCompletedEventHandler(object sender, DeleteRSSFeedCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteRSSFeedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteRSSFeedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserStatsCompletedEventHandler(object sender, GetUserStatsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public StatInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((StatInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddUserGroupCompletedEventHandler(object sender, AddUserGroupCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveUserGroupCompletedEventHandler(object sender, RemoveUserGroupCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemoveUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemoveUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateUserGroupCompletedEventHandler(object sender, UpdateUserGroupCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserGroupCompletedEventHandler(object sender, GetUserGroupCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserGroupInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserGroupInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserGroupsByUserCompletedEventHandler(object sender, GetUserGroupsByUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserGroupsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserGroupsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserGroupsResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserGroupsResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetUserGroupsByDomainCompletedEventHandler(object sender, GetUserGroupsByDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetUserGroupsByDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetUserGroupsByDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public UserGroupsResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((UserGroupsResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "svcAliasAdminSoap", Namespace = "http://tempuri.org/")]
	public partial class svcAliasAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback AddAliasOperationCompleted;

		private System.Threading.SendOrPostCallback SetCatchAllOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateAliasOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteAliasOperationCompleted;

		private System.Threading.SendOrPostCallback GetAliasOperationCompleted;

		private System.Threading.SendOrPostCallback GetAliasesOperationCompleted;

		/// <remarks/>
		public svcAliasAdmin()
		{
			this.Url = "http://127.0.0.1:9998/Services/svcAliasAdmin.asmx";
		}

		/// <remarks/>
		public event AddAliasCompletedEventHandler AddAliasCompleted;

		/// <remarks/>
		public event SetCatchAllCompletedEventHandler SetCatchAllCompleted;

		/// <remarks/>
		public event UpdateAliasCompletedEventHandler UpdateAliasCompleted;

		/// <remarks/>
		public event DeleteAliasCompletedEventHandler DeleteAliasCompleted;

		/// <remarks/>
		public event GetAliasCompletedEventHandler GetAliasCompleted;

		/// <remarks/>
		public event GetAliasesCompletedEventHandler GetAliasesCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAlias", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses)
		{
			object[] results = this.Invoke("AddAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName,
                    Addresses});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName,
                    Addresses}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddAlias(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses)
		{
			this.AddAliasAsync(AuthUserName, AuthPassword, DomainName, AliasName, Addresses, null);
		}

		/// <remarks/>
		public void AddAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses, object userState)
		{
			if ((this.AddAliasOperationCompleted == null))
			{
				this.AddAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAliasOperationCompleted);
			}
			this.InvokeAsync("AddAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName,
                    Addresses}, this.AddAliasOperationCompleted, userState);
		}

		private void OnAddAliasOperationCompleted(object arg)
		{
			if ((this.AddAliasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddAliasCompleted(this, new AddAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCatchAll", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetCatchAll(string AuthUserName, string AuthPassword, string DomainName, string AliasName)
		{
			object[] results = this.Invoke("SetCatchAll", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetCatchAll(string AuthUserName, string AuthPassword, string DomainName, string AliasName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetCatchAll", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetCatchAll(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetCatchAllAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName)
		{
			this.SetCatchAllAsync(AuthUserName, AuthPassword, DomainName, AliasName, null);
		}

		/// <remarks/>
		public void SetCatchAllAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, object userState)
		{
			if ((this.SetCatchAllOperationCompleted == null))
			{
				this.SetCatchAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCatchAllOperationCompleted);
			}
			this.InvokeAsync("SetCatchAll", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName}, this.SetCatchAllOperationCompleted, userState);
		}

		private void OnSetCatchAllOperationCompleted(object arg)
		{
			if ((this.SetCatchAllCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetCatchAllCompleted(this, new SetCatchAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAlias", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses)
		{
			object[] results = this.Invoke("UpdateAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName,
                    Addresses});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName,
                    Addresses}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateAlias(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses)
		{
			this.UpdateAliasAsync(AuthUserName, AuthPassword, DomainName, AliasName, Addresses, null);
		}

		/// <remarks/>
		public void UpdateAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, string[] Addresses, object userState)
		{
			if ((this.UpdateAliasOperationCompleted == null))
			{
				this.UpdateAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAliasOperationCompleted);
			}
			this.InvokeAsync("UpdateAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName,
                    Addresses}, this.UpdateAliasOperationCompleted, userState);
		}

		private void OnUpdateAliasOperationCompleted(object arg)
		{
			if ((this.UpdateAliasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateAliasCompleted(this, new UpdateAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAlias", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName)
		{
			object[] results = this.Invoke("DeleteAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteAlias(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName)
		{
			this.DeleteAliasAsync(AuthUserName, AuthPassword, DomainName, AliasName, null);
		}

		/// <remarks/>
		public void DeleteAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, object userState)
		{
			if ((this.DeleteAliasOperationCompleted == null))
			{
				this.DeleteAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAliasOperationCompleted);
			}
			this.InvokeAsync("DeleteAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName}, this.DeleteAliasOperationCompleted, userState);
		}

		private void OnDeleteAliasOperationCompleted(object arg)
		{
			if ((this.DeleteAliasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteAliasCompleted(this, new DeleteAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlias", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public AliasInfoResult GetAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName)
		{
			object[] results = this.Invoke("GetAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName});
			return ((AliasInfoResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAlias(string AuthUserName, string AuthPassword, string DomainName, string AliasName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName}, callback, asyncState);
		}

		/// <remarks/>
		public AliasInfoResult EndGetAlias(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((AliasInfoResult)(results[0]));
		}

		/// <remarks/>
		public void GetAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName)
		{
			this.GetAliasAsync(AuthUserName, AuthPassword, DomainName, AliasName, null);
		}

		/// <remarks/>
		public void GetAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string AliasName, object userState)
		{
			if ((this.GetAliasOperationCompleted == null))
			{
				this.GetAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAliasOperationCompleted);
			}
			this.InvokeAsync("GetAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    AliasName}, this.GetAliasOperationCompleted, userState);
		}

		private void OnGetAliasOperationCompleted(object arg)
		{
			if ((this.GetAliasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAliasCompleted(this, new GetAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAliases", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public AliasInfoListResult GetAliases(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetAliases", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((AliasInfoListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAliases(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAliases", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public AliasInfoListResult EndGetAliases(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((AliasInfoListResult)(results[0]));
		}

		/// <remarks/>
		public void GetAliasesAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetAliasesAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetAliasesAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetAliasesOperationCompleted == null))
			{
				this.GetAliasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAliasesOperationCompleted);
			}
			this.InvokeAsync("GetAliases", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetAliasesOperationCompleted, userState);
		}

		private void OnGetAliasesOperationCompleted(object arg)
		{
			if ((this.GetAliasesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAliasesCompleted(this, new GetAliasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class AliasInfoListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private AliasInfo[] aliasInfosField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public AliasInfo[] AliasInfos
		{
			get
			{
				return this.aliasInfosField;
			}
			set
			{
				this.aliasInfosField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class AliasInfo
	{

		private string nameField;

		private string[] addressesField;

		/// <remarks/>
		public string Name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public string[] Addresses
		{
			get
			{
				return this.addressesField;
			}
			set
			{
				this.addressesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class AliasInfoResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private AliasInfo aliasInfoField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public AliasInfo AliasInfo
		{
			get
			{
				return this.aliasInfoField;
			}
			set
			{
				this.aliasInfoField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddAliasCompletedEventHandler(object sender, AddAliasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetCatchAllCompletedEventHandler(object sender, SetCatchAllCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetCatchAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetCatchAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateAliasCompletedEventHandler(object sender, UpdateAliasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteAliasCompletedEventHandler(object sender, DeleteAliasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetAliasCompletedEventHandler(object sender, GetAliasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public AliasInfoResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((AliasInfoResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetAliasesCompletedEventHandler(object sender, GetAliasesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAliasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAliasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public AliasInfoListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((AliasInfoListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "svcMailListAdminSoap", Namespace = "http://tempuri.org/")]
	public partial class svcMailListAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback SetRequestedListSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback GetRequestedListSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback GetMailingListsByDomainOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteAllListsOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteListOperationCompleted;

		private System.Threading.SendOrPostCallback GetListCommandAddressOperationCompleted;

		private System.Threading.SendOrPostCallback SetListCommandAddressOperationCompleted;

		private System.Threading.SendOrPostCallback AddListOperationCompleted;

		private System.Threading.SendOrPostCallback AddSubscriberOperationCompleted;

		private System.Threading.SendOrPostCallback AddSubscriber2OperationCompleted;

		private System.Threading.SendOrPostCallback AddDigestSubscriberOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveSubscriberOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveDigestSubscriberOperationCompleted;

		private System.Threading.SendOrPostCallback GetSubscriberListOperationCompleted;

		private System.Threading.SendOrPostCallback GetPosterWhiteListOperationCompleted;

		private System.Threading.SendOrPostCallback GetPosterKillListOperationCompleted;

		private System.Threading.SendOrPostCallback GetDigestSubscriberListOperationCompleted;

		private System.Threading.SendOrPostCallback SetSubscriberListOperationCompleted;

		private System.Threading.SendOrPostCallback SetSubscriberList2OperationCompleted;

		private System.Threading.SendOrPostCallback SetDigestSubscriberListOperationCompleted;

		private System.Threading.SendOrPostCallback SetPosterWhiteListOperationCompleted;

		private System.Threading.SendOrPostCallback SetPosterKillListOperationCompleted;

		/// <remarks/>
		public svcMailListAdmin()
		{
			this.Url = "http://127.0.0.1:9998/Services/svcMailListAdmin.asmx";
		}

		/// <remarks/>
		public event SetRequestedListSettingsCompletedEventHandler SetRequestedListSettingsCompleted;

		/// <remarks/>
		public event GetRequestedListSettingsCompletedEventHandler GetRequestedListSettingsCompleted;

		/// <remarks/>
		public event GetMailingListsByDomainCompletedEventHandler GetMailingListsByDomainCompleted;

		/// <remarks/>
		public event DeleteAllListsCompletedEventHandler DeleteAllListsCompleted;

		/// <remarks/>
		public event DeleteListCompletedEventHandler DeleteListCompleted;

		/// <remarks/>
		public event GetListCommandAddressCompletedEventHandler GetListCommandAddressCompleted;

		/// <remarks/>
		public event SetListCommandAddressCompletedEventHandler SetListCommandAddressCompleted;

		/// <remarks/>
		public event AddListCompletedEventHandler AddListCompleted;

		/// <remarks/>
		public event AddSubscriberCompletedEventHandler AddSubscriberCompleted;

		/// <remarks/>
		public event AddSubscriber2CompletedEventHandler AddSubscriber2Completed;

		/// <remarks/>
		public event AddDigestSubscriberCompletedEventHandler AddDigestSubscriberCompleted;

		/// <remarks/>
		public event RemoveSubscriberCompletedEventHandler RemoveSubscriberCompleted;

		/// <remarks/>
		public event RemoveDigestSubscriberCompletedEventHandler RemoveDigestSubscriberCompleted;

		/// <remarks/>
		public event GetSubscriberListCompletedEventHandler GetSubscriberListCompleted;

		/// <remarks/>
		public event GetPosterWhiteListCompletedEventHandler GetPosterWhiteListCompleted;

		/// <remarks/>
		public event GetPosterKillListCompletedEventHandler GetPosterKillListCompleted;

		/// <remarks/>
		public event GetDigestSubscriberListCompletedEventHandler GetDigestSubscriberListCompleted;

		/// <remarks/>
		public event SetSubscriberListCompletedEventHandler SetSubscriberListCompleted;

		/// <remarks/>
		public event SetSubscriberList2CompletedEventHandler SetSubscriberList2Completed;

		/// <remarks/>
		public event SetDigestSubscriberListCompletedEventHandler SetDigestSubscriberListCompleted;

		/// <remarks/>
		public event SetPosterWhiteListCompletedEventHandler SetPosterWhiteListCompleted;

		/// <remarks/>
		public event SetPosterKillListCompletedEventHandler SetPosterKillListCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedListSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetRequestedListSettings(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] newSettings)
		{
			object[] results = this.Invoke("SetRequestedListSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    newSettings});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetRequestedListSettings(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] newSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetRequestedListSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    newSettings}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetRequestedListSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetRequestedListSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] newSettings)
		{
			this.SetRequestedListSettingsAsync(AuthUserName, AuthPassword, DomainName, ListName, newSettings, null);
		}

		/// <remarks/>
		public void SetRequestedListSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] newSettings, object userState)
		{
			if ((this.SetRequestedListSettingsOperationCompleted == null))
			{
				this.SetRequestedListSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRequestedListSettingsOperationCompleted);
			}
			this.InvokeAsync("SetRequestedListSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    newSettings}, this.SetRequestedListSettingsOperationCompleted, userState);
		}

		private void OnSetRequestedListSettingsOperationCompleted(object arg)
		{
			if ((this.SetRequestedListSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetRequestedListSettingsCompleted(this, new SetRequestedListSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedListSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SettingsRequestResult GetRequestedListSettings(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] requestedSettings)
		{
			object[] results = this.Invoke("GetRequestedListSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    requestedSettings});
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRequestedListSettings(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] requestedSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRequestedListSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    requestedSettings}, callback, asyncState);
		}

		/// <remarks/>
		public SettingsRequestResult EndGetRequestedListSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SettingsRequestResult)(results[0]));
		}

		/// <remarks/>
		public void GetRequestedListSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] requestedSettings)
		{
			this.GetRequestedListSettingsAsync(AuthUserName, AuthPassword, DomainName, ListName, requestedSettings, null);
		}

		/// <remarks/>
		public void GetRequestedListSettingsAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] requestedSettings, object userState)
		{
			if ((this.GetRequestedListSettingsOperationCompleted == null))
			{
				this.GetRequestedListSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestedListSettingsOperationCompleted);
			}
			this.InvokeAsync("GetRequestedListSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    requestedSettings}, this.GetRequestedListSettingsOperationCompleted, userState);
		}

		private void OnGetRequestedListSettingsOperationCompleted(object arg)
		{
			if ((this.GetRequestedListSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRequestedListSettingsCompleted(this, new GetRequestedListSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMailingListsByDomain", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public MailingListResult GetMailingListsByDomain(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetMailingListsByDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((MailingListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetMailingListsByDomain(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetMailingListsByDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public MailingListResult EndGetMailingListsByDomain(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((MailingListResult)(results[0]));
		}

		/// <remarks/>
		public void GetMailingListsByDomainAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetMailingListsByDomainAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetMailingListsByDomainAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetMailingListsByDomainOperationCompleted == null))
			{
				this.GetMailingListsByDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailingListsByDomainOperationCompleted);
			}
			this.InvokeAsync("GetMailingListsByDomain", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetMailingListsByDomainOperationCompleted, userState);
		}

		private void OnGetMailingListsByDomainOperationCompleted(object arg)
		{
			if ((this.GetMailingListsByDomainCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetMailingListsByDomainCompleted(this, new GetMailingListsByDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAllLists", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteAllLists(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("DeleteAllLists", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteAllLists(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteAllLists", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteAllLists(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteAllListsAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.DeleteAllListsAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void DeleteAllListsAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.DeleteAllListsOperationCompleted == null))
			{
				this.DeleteAllListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllListsOperationCompleted);
			}
			this.InvokeAsync("DeleteAllLists", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.DeleteAllListsOperationCompleted, userState);
		}

		private void OnDeleteAllListsOperationCompleted(object arg)
		{
			if ((this.DeleteAllListsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteAllListsCompleted(this, new DeleteAllListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteList(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			object[] results = this.Invoke("DeleteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteList(string AuthUserName, string AuthPassword, string DomainName, string ListName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			this.DeleteListAsync(AuthUserName, AuthPassword, DomainName, ListName, null);
		}

		/// <remarks/>
		public void DeleteListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, object userState)
		{
			if ((this.DeleteListOperationCompleted == null))
			{
				this.DeleteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteListOperationCompleted);
			}
			this.InvokeAsync("DeleteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, this.DeleteListOperationCompleted, userState);
		}

		private void OnDeleteListOperationCompleted(object arg)
		{
			if ((this.DeleteListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteListCompleted(this, new DeleteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListCommandAddress", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ListCommandResult GetListCommandAddress(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetListCommandAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((ListCommandResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetListCommandAddress(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetListCommandAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public ListCommandResult EndGetListCommandAddress(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ListCommandResult)(results[0]));
		}

		/// <remarks/>
		public void GetListCommandAddressAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetListCommandAddressAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetListCommandAddressAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetListCommandAddressOperationCompleted == null))
			{
				this.GetListCommandAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListCommandAddressOperationCompleted);
			}
			this.InvokeAsync("GetListCommandAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetListCommandAddressOperationCompleted, userState);
		}

		private void OnGetListCommandAddressOperationCompleted(object arg)
		{
			if ((this.GetListCommandAddressCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetListCommandAddressCompleted(this, new GetListCommandAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetListCommandAddress", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetListCommandAddress(string AuthUserName, string AuthPassword, string DomainName, string commandAddress)
		{
			object[] results = this.Invoke("SetListCommandAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    commandAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetListCommandAddress(string AuthUserName, string AuthPassword, string DomainName, string commandAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetListCommandAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    commandAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetListCommandAddress(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetListCommandAddressAsync(string AuthUserName, string AuthPassword, string DomainName, string commandAddress)
		{
			this.SetListCommandAddressAsync(AuthUserName, AuthPassword, DomainName, commandAddress, null);
		}

		/// <remarks/>
		public void SetListCommandAddressAsync(string AuthUserName, string AuthPassword, string DomainName, string commandAddress, object userState)
		{
			if ((this.SetListCommandAddressOperationCompleted == null))
			{
				this.SetListCommandAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetListCommandAddressOperationCompleted);
			}
			this.InvokeAsync("SetListCommandAddress", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    commandAddress}, this.SetListCommandAddressOperationCompleted, userState);
		}

		private void OnSetListCommandAddressOperationCompleted(object arg)
		{
			if ((this.SetListCommandAddressCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetListCommandAddressCompleted(this, new SetListCommandAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Moderator, string Description)
		{
			object[] results = this.Invoke("AddList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Moderator,
                    Description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Moderator, string Description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Moderator,
                    Description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Moderator, string Description)
		{
			this.AddListAsync(AuthUserName, AuthPassword, DomainName, ListName, Moderator, Description, null);
		}

		/// <remarks/>
		public void AddListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Moderator, string Description, object userState)
		{
			if ((this.AddListOperationCompleted == null))
			{
				this.AddListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddListOperationCompleted);
			}
			this.InvokeAsync("AddList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Moderator,
                    Description}, this.AddListOperationCompleted, userState);
		}

		private void OnAddListOperationCompleted(object arg)
		{
			if ((this.AddListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddListCompleted(this, new AddListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSubscriber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			object[] results = this.Invoke("AddSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSubscriber(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			this.AddSubscriberAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscriber, null);
		}

		/// <remarks/>
		public void AddSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, object userState)
		{
			if ((this.AddSubscriberOperationCompleted == null))
			{
				this.AddSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscriberOperationCompleted);
			}
			this.InvokeAsync("AddSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, this.AddSubscriberOperationCompleted, userState);
		}

		private void OnAddSubscriberOperationCompleted(object arg)
		{
			if ((this.AddSubscriberCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSubscriberCompleted(this, new AddSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSubscriber2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSubscriber2(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			object[] results = this.Invoke("AddSubscriber2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSubscriber2(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSubscriber2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSubscriber2(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSubscriber2Async(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			this.AddSubscriber2Async(AuthUserName, AuthPassword, DomainName, ListName, Subscribers, null);
		}

		/// <remarks/>
		public void AddSubscriber2Async(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, object userState)
		{
			if ((this.AddSubscriber2OperationCompleted == null))
			{
				this.AddSubscriber2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscriber2OperationCompleted);
			}
			this.InvokeAsync("AddSubscriber2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, this.AddSubscriber2OperationCompleted, userState);
		}

		private void OnAddSubscriber2OperationCompleted(object arg)
		{
			if ((this.AddSubscriber2Completed != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSubscriber2Completed(this, new AddSubscriber2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDigestSubscriber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDigestSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			object[] results = this.Invoke("AddDigestSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDigestSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddDigestSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDigestSubscriber(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDigestSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			this.AddDigestSubscriberAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscriber, null);
		}

		/// <remarks/>
		public void AddDigestSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, object userState)
		{
			if ((this.AddDigestSubscriberOperationCompleted == null))
			{
				this.AddDigestSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDigestSubscriberOperationCompleted);
			}
			this.InvokeAsync("AddDigestSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, this.AddDigestSubscriberOperationCompleted, userState);
		}

		private void OnAddDigestSubscriberOperationCompleted(object arg)
		{
			if ((this.AddDigestSubscriberCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDigestSubscriberCompleted(this, new AddDigestSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveSubscriber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemoveSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			object[] results = this.Invoke("RemoveSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemoveSubscriber(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemoveSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			this.RemoveSubscriberAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscriber, null);
		}

		/// <remarks/>
		public void RemoveSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, object userState)
		{
			if ((this.RemoveSubscriberOperationCompleted == null))
			{
				this.RemoveSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSubscriberOperationCompleted);
			}
			this.InvokeAsync("RemoveSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, this.RemoveSubscriberOperationCompleted, userState);
		}

		private void OnRemoveSubscriberOperationCompleted(object arg)
		{
			if ((this.RemoveSubscriberCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveSubscriberCompleted(this, new RemoveSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveDigestSubscriber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemoveDigestSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			object[] results = this.Invoke("RemoveDigestSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveDigestSubscriber(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveDigestSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemoveDigestSubscriber(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemoveDigestSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber)
		{
			this.RemoveDigestSubscriberAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscriber, null);
		}

		/// <remarks/>
		public void RemoveDigestSubscriberAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string Subscriber, object userState)
		{
			if ((this.RemoveDigestSubscriberOperationCompleted == null))
			{
				this.RemoveDigestSubscriberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveDigestSubscriberOperationCompleted);
			}
			this.InvokeAsync("RemoveDigestSubscriber", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscriber}, this.RemoveDigestSubscriberOperationCompleted, userState);
		}

		private void OnRemoveDigestSubscriberOperationCompleted(object arg)
		{
			if ((this.RemoveDigestSubscriberCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveDigestSubscriberCompleted(this, new RemoveDigestSubscriberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubscriberList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SubscriberListResult GetSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			object[] results = this.Invoke("GetSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName});
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, callback, asyncState);
		}

		/// <remarks/>
		public SubscriberListResult EndGetSubscriberList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public void GetSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			this.GetSubscriberListAsync(AuthUserName, AuthPassword, DomainName, ListName, null);
		}

		/// <remarks/>
		public void GetSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, object userState)
		{
			if ((this.GetSubscriberListOperationCompleted == null))
			{
				this.GetSubscriberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriberListOperationCompleted);
			}
			this.InvokeAsync("GetSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, this.GetSubscriberListOperationCompleted, userState);
		}

		private void OnGetSubscriberListOperationCompleted(object arg)
		{
			if ((this.GetSubscriberListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSubscriberListCompleted(this, new GetSubscriberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPosterWhiteList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SubscriberListResult GetPosterWhiteList(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			object[] results = this.Invoke("GetPosterWhiteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName});
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetPosterWhiteList(string AuthUserName, string AuthPassword, string DomainName, string ListName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetPosterWhiteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, callback, asyncState);
		}

		/// <remarks/>
		public SubscriberListResult EndGetPosterWhiteList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public void GetPosterWhiteListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			this.GetPosterWhiteListAsync(AuthUserName, AuthPassword, DomainName, ListName, null);
		}

		/// <remarks/>
		public void GetPosterWhiteListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, object userState)
		{
			if ((this.GetPosterWhiteListOperationCompleted == null))
			{
				this.GetPosterWhiteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPosterWhiteListOperationCompleted);
			}
			this.InvokeAsync("GetPosterWhiteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, this.GetPosterWhiteListOperationCompleted, userState);
		}

		private void OnGetPosterWhiteListOperationCompleted(object arg)
		{
			if ((this.GetPosterWhiteListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetPosterWhiteListCompleted(this, new GetPosterWhiteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPosterKillList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SubscriberListResult GetPosterKillList(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			object[] results = this.Invoke("GetPosterKillList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName});
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetPosterKillList(string AuthUserName, string AuthPassword, string DomainName, string ListName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetPosterKillList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, callback, asyncState);
		}

		/// <remarks/>
		public SubscriberListResult EndGetPosterKillList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public void GetPosterKillListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			this.GetPosterKillListAsync(AuthUserName, AuthPassword, DomainName, ListName, null);
		}

		/// <remarks/>
		public void GetPosterKillListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, object userState)
		{
			if ((this.GetPosterKillListOperationCompleted == null))
			{
				this.GetPosterKillListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPosterKillListOperationCompleted);
			}
			this.InvokeAsync("GetPosterKillList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, this.GetPosterKillListOperationCompleted, userState);
		}

		private void OnGetPosterKillListOperationCompleted(object arg)
		{
			if ((this.GetPosterKillListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetPosterKillListCompleted(this, new GetPosterKillListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDigestSubscriberList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SubscriberListResult GetDigestSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			object[] results = this.Invoke("GetDigestSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName});
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDigestSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDigestSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, callback, asyncState);
		}

		/// <remarks/>
		public SubscriberListResult EndGetDigestSubscriberList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SubscriberListResult)(results[0]));
		}

		/// <remarks/>
		public void GetDigestSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName)
		{
			this.GetDigestSubscriberListAsync(AuthUserName, AuthPassword, DomainName, ListName, null);
		}

		/// <remarks/>
		public void GetDigestSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, object userState)
		{
			if ((this.GetDigestSubscriberListOperationCompleted == null))
			{
				this.GetDigestSubscriberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDigestSubscriberListOperationCompleted);
			}
			this.InvokeAsync("GetDigestSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName}, this.GetDigestSubscriberListOperationCompleted, userState);
		}

		private void OnGetDigestSubscriberListOperationCompleted(object arg)
		{
			if ((this.GetDigestSubscriberListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDigestSubscriberListCompleted(this, new GetDigestSubscriberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSubscriberList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			object[] results = this.Invoke("SetSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetSubscriberList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			this.SetSubscriberListAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscribers, null);
		}

		/// <remarks/>
		public void SetSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, object userState)
		{
			if ((this.SetSubscriberListOperationCompleted == null))
			{
				this.SetSubscriberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSubscriberListOperationCompleted);
			}
			this.InvokeAsync("SetSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, this.SetSubscriberListOperationCompleted, userState);
		}

		private void OnSetSubscriberListOperationCompleted(object arg)
		{
			if ((this.SetSubscriberListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetSubscriberListCompleted(this, new SetSubscriberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSubscriberList2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetSubscriberList2(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			object[] results = this.Invoke("SetSubscriberList2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetSubscriberList2(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetSubscriberList2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetSubscriberList2(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetSubscriberList2Async(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			this.SetSubscriberList2Async(AuthUserName, AuthPassword, DomainName, ListName, Subscribers, null);
		}

		/// <remarks/>
		public void SetSubscriberList2Async(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, object userState)
		{
			if ((this.SetSubscriberList2OperationCompleted == null))
			{
				this.SetSubscriberList2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSubscriberList2OperationCompleted);
			}
			this.InvokeAsync("SetSubscriberList2", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, this.SetSubscriberList2OperationCompleted, userState);
		}

		private void OnSetSubscriberList2OperationCompleted(object arg)
		{
			if ((this.SetSubscriberList2Completed != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetSubscriberList2Completed(this, new SetSubscriberList2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDigestSubscriberList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetDigestSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			object[] results = this.Invoke("SetDigestSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetDigestSubscriberList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetDigestSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetDigestSubscriberList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetDigestSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			this.SetDigestSubscriberListAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscribers, null);
		}

		/// <remarks/>
		public void SetDigestSubscriberListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, object userState)
		{
			if ((this.SetDigestSubscriberListOperationCompleted == null))
			{
				this.SetDigestSubscriberListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDigestSubscriberListOperationCompleted);
			}
			this.InvokeAsync("SetDigestSubscriberList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, this.SetDigestSubscriberListOperationCompleted, userState);
		}

		private void OnSetDigestSubscriberListOperationCompleted(object arg)
		{
			if ((this.SetDigestSubscriberListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetDigestSubscriberListCompleted(this, new SetDigestSubscriberListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPosterWhiteList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetPosterWhiteList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			object[] results = this.Invoke("SetPosterWhiteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetPosterWhiteList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetPosterWhiteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetPosterWhiteList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetPosterWhiteListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			this.SetPosterWhiteListAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscribers, null);
		}

		/// <remarks/>
		public void SetPosterWhiteListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, object userState)
		{
			if ((this.SetPosterWhiteListOperationCompleted == null))
			{
				this.SetPosterWhiteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPosterWhiteListOperationCompleted);
			}
			this.InvokeAsync("SetPosterWhiteList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, this.SetPosterWhiteListOperationCompleted, userState);
		}

		private void OnSetPosterWhiteListOperationCompleted(object arg)
		{
			if ((this.SetPosterWhiteListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetPosterWhiteListCompleted(this, new SetPosterWhiteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPosterKillList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetPosterKillList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			object[] results = this.Invoke("SetPosterKillList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetPosterKillList(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetPosterKillList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetPosterKillList(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetPosterKillListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers)
		{
			this.SetPosterKillListAsync(AuthUserName, AuthPassword, DomainName, ListName, Subscribers, null);
		}

		/// <remarks/>
		public void SetPosterKillListAsync(string AuthUserName, string AuthPassword, string DomainName, string ListName, string[] Subscribers, object userState)
		{
			if ((this.SetPosterKillListOperationCompleted == null))
			{
				this.SetPosterKillListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPosterKillListOperationCompleted);
			}
			this.InvokeAsync("SetPosterKillList", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    ListName,
                    Subscribers}, this.SetPosterKillListOperationCompleted, userState);
		}

		private void OnSetPosterKillListOperationCompleted(object arg)
		{
			if ((this.SetPosterKillListCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetPosterKillListCompleted(this, new SetPosterKillListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SubscriberListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] subscribersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] Subscribers
		{
			get
			{
				return this.subscribersField;
			}
			set
			{
				this.subscribersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class ListCommandResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string commandAddressField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string commandAddress
		{
			get
			{
				return this.commandAddressField;
			}
			set
			{
				this.commandAddressField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class MailingListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] listNamesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] listNames
		{
			get
			{
				return this.listNamesField;
			}
			set
			{
				this.listNamesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetRequestedListSettingsCompletedEventHandler(object sender, SetRequestedListSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetRequestedListSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetRequestedListSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetRequestedListSettingsCompletedEventHandler(object sender, GetRequestedListSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRequestedListSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRequestedListSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SettingsRequestResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SettingsRequestResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetMailingListsByDomainCompletedEventHandler(object sender, GetMailingListsByDomainCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetMailingListsByDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetMailingListsByDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public MailingListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((MailingListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteAllListsCompletedEventHandler(object sender, DeleteAllListsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteAllListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteAllListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteListCompletedEventHandler(object sender, DeleteListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetListCommandAddressCompletedEventHandler(object sender, GetListCommandAddressCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetListCommandAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetListCommandAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ListCommandResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ListCommandResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetListCommandAddressCompletedEventHandler(object sender, SetListCommandAddressCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetListCommandAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetListCommandAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddListCompletedEventHandler(object sender, AddListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSubscriberCompletedEventHandler(object sender, AddSubscriberCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSubscriber2CompletedEventHandler(object sender, AddSubscriber2CompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSubscriber2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSubscriber2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDigestSubscriberCompletedEventHandler(object sender, AddDigestSubscriberCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDigestSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDigestSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveSubscriberCompletedEventHandler(object sender, RemoveSubscriberCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemoveSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemoveSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveDigestSubscriberCompletedEventHandler(object sender, RemoveDigestSubscriberCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemoveDigestSubscriberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemoveDigestSubscriberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetSubscriberListCompletedEventHandler(object sender, GetSubscriberListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSubscriberListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSubscriberListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SubscriberListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SubscriberListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetPosterWhiteListCompletedEventHandler(object sender, GetPosterWhiteListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetPosterWhiteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetPosterWhiteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SubscriberListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SubscriberListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetPosterKillListCompletedEventHandler(object sender, GetPosterKillListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetPosterKillListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetPosterKillListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SubscriberListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SubscriberListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDigestSubscriberListCompletedEventHandler(object sender, GetDigestSubscriberListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDigestSubscriberListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDigestSubscriberListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SubscriberListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SubscriberListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetSubscriberListCompletedEventHandler(object sender, SetSubscriberListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetSubscriberListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetSubscriberListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetSubscriberList2CompletedEventHandler(object sender, SetSubscriberList2CompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetSubscriberList2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetSubscriberList2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetDigestSubscriberListCompletedEventHandler(object sender, SetDigestSubscriberListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetDigestSubscriberListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetDigestSubscriberListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetPosterWhiteListCompletedEventHandler(object sender, SetPosterWhiteListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetPosterWhiteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetPosterWhiteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetPosterKillListCompletedEventHandler(object sender, SetPosterKillListCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetPosterKillListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetPosterKillListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "svcDomainAliasAdminSoap", Namespace = "http://tempuri.org/")]
	public partial class svcDomainAliasAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback AddDomainAliasWithoutMxCheckOperationCompleted;

		private System.Threading.SendOrPostCallback AddDomainAliasOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteDomainAliasOperationCompleted;

		private System.Threading.SendOrPostCallback GetAliasesOperationCompleted;

		/// <remarks/>
		public svcDomainAliasAdmin()
		{
			this.Url = "http://127.0.0.1:9998/Services/svcDomainAliasAdmin.asmx";
		}

		/// <remarks/>
		public event AddDomainAliasWithoutMxCheckCompletedEventHandler AddDomainAliasWithoutMxCheckCompleted;

		/// <remarks/>
		public event AddDomainAliasCompletedEventHandler AddDomainAliasCompleted;

		/// <remarks/>
		public event DeleteDomainAliasCompletedEventHandler DeleteDomainAliasCompleted;

		/// <remarks/>
		public event GetAliasesCompletedEventHandler GetAliasesCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomainAliasWithoutMxCheck", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDomainAliasWithoutMxCheck(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName)
		{
			object[] results = this.Invoke("AddDomainAliasWithoutMxCheck", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDomainAliasWithoutMxCheck(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddDomainAliasWithoutMxCheck", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDomainAliasWithoutMxCheck(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDomainAliasWithoutMxCheckAsync(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName)
		{
			this.AddDomainAliasWithoutMxCheckAsync(AuthUserName, AuthPassword, DomainName, DomainAliasName, null);
		}

		/// <remarks/>
		public void AddDomainAliasWithoutMxCheckAsync(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName, object userState)
		{
			if ((this.AddDomainAliasWithoutMxCheckOperationCompleted == null))
			{
				this.AddDomainAliasWithoutMxCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainAliasWithoutMxCheckOperationCompleted);
			}
			this.InvokeAsync("AddDomainAliasWithoutMxCheck", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName}, this.AddDomainAliasWithoutMxCheckOperationCompleted, userState);
		}

		private void OnAddDomainAliasWithoutMxCheckOperationCompleted(object arg)
		{
			if ((this.AddDomainAliasWithoutMxCheckCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDomainAliasWithoutMxCheckCompleted(this, new AddDomainAliasWithoutMxCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDomainAlias", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDomainAlias(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName)
		{
			object[] results = this.Invoke("AddDomainAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDomainAlias(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddDomainAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDomainAlias(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDomainAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName)
		{
			this.AddDomainAliasAsync(AuthUserName, AuthPassword, DomainName, DomainAliasName, null);
		}

		/// <remarks/>
		public void AddDomainAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName, object userState)
		{
			if ((this.AddDomainAliasOperationCompleted == null))
			{
				this.AddDomainAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainAliasOperationCompleted);
			}
			this.InvokeAsync("AddDomainAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName}, this.AddDomainAliasOperationCompleted, userState);
		}

		private void OnAddDomainAliasOperationCompleted(object arg)
		{
			if ((this.AddDomainAliasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDomainAliasCompleted(this, new AddDomainAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomainAlias", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteDomainAlias(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName)
		{
			object[] results = this.Invoke("DeleteDomainAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteDomainAlias(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteDomainAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteDomainAlias(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteDomainAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName)
		{
			this.DeleteDomainAliasAsync(AuthUserName, AuthPassword, DomainName, DomainAliasName, null);
		}

		/// <remarks/>
		public void DeleteDomainAliasAsync(string AuthUserName, string AuthPassword, string DomainName, string DomainAliasName, object userState)
		{
			if ((this.DeleteDomainAliasOperationCompleted == null))
			{
				this.DeleteDomainAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainAliasOperationCompleted);
			}
			this.InvokeAsync("DeleteDomainAlias", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName,
                    DomainAliasName}, this.DeleteDomainAliasOperationCompleted, userState);
		}

		private void OnDeleteDomainAliasOperationCompleted(object arg)
		{
			if ((this.DeleteDomainAliasCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteDomainAliasCompleted(this, new DeleteDomainAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAliases", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DomainAliasInfoListResult GetAliases(string AuthUserName, string AuthPassword, string DomainName)
		{
			object[] results = this.Invoke("GetAliases", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName});
			return ((DomainAliasInfoListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAliases(string AuthUserName, string AuthPassword, string DomainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAliases", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, callback, asyncState);
		}

		/// <remarks/>
		public DomainAliasInfoListResult EndGetAliases(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DomainAliasInfoListResult)(results[0]));
		}

		/// <remarks/>
		public void GetAliasesAsync(string AuthUserName, string AuthPassword, string DomainName)
		{
			this.GetAliasesAsync(AuthUserName, AuthPassword, DomainName, null);
		}

		/// <remarks/>
		public void GetAliasesAsync(string AuthUserName, string AuthPassword, string DomainName, object userState)
		{
			if ((this.GetAliasesOperationCompleted == null))
			{
				this.GetAliasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAliasesOperationCompleted);
			}
			this.InvokeAsync("GetAliases", new object[] {
                    AuthUserName,
                    AuthPassword,
                    DomainName}, this.GetAliasesOperationCompleted, userState);
		}

		private void OnGetAliasesOperationCompleted(object arg)
		{
			if ((this.GetAliasesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAliasesCompleted(this, new GetAliasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DomainAliasInfoListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] domainAliasNamesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] DomainAliasNames
		{
			get
			{
				return this.domainAliasNamesField;
			}
			set
			{
				this.domainAliasNamesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDomainAliasWithoutMxCheckCompletedEventHandler(object sender, AddDomainAliasWithoutMxCheckCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDomainAliasWithoutMxCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDomainAliasWithoutMxCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDomainAliasCompletedEventHandler(object sender, AddDomainAliasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDomainAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDomainAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteDomainAliasCompletedEventHandler(object sender, DeleteDomainAliasCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteDomainAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteDomainAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "svcServerAdminSoap", Namespace = "http://tempuri.org/")]
	public partial class svcServerAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol
	{

		private System.Threading.SendOrPostCallback StartServicesOperationCompleted;

		private System.Threading.SendOrPostCallback StopServicesOperationCompleted;

		private System.Threading.SendOrPostCallback RequestStatusOperationCompleted;

		private System.Threading.SendOrPostCallback GetEditionOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteServerPortOperationCompleted;

		private System.Threading.SendOrPostCallback ListServerPortsOperationCompleted;

		private System.Threading.SendOrPostCallback AddServerPortOperationCompleted;

		private System.Threading.SendOrPostCallback GetSMTPBlockedSendersOperationCompleted;

		private System.Threading.SendOrPostCallback AddDOSAbuseDetectionRuleOperationCompleted;

		private System.Threading.SendOrPostCallback AddHarvestingAbuseDetectionRuleOperationCompleted;

		private System.Threading.SendOrPostCallback AddIncomingGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback GetIncomingGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback ListIncomingGatewaysOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateIncomingGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveIncomingGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback AddInternalSpammerNotificationAbuseDetectionRuleOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteAbuseDetectionRuleOperationCompleted;

		private System.Threading.SendOrPostCallback GetDOSAbuseDetectionRulesOperationCompleted;

		private System.Threading.SendOrPostCallback GetHarvestingAbuseDetectionRulesOperationCompleted;

		private System.Threading.SendOrPostCallback GetInternalSpammerNotificationAbuseDetectionRulesOperationCompleted;

		private System.Threading.SendOrPostCallback AddSMTPBlockedSenderOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteSpamAssassinServerOperationCompleted;

		private System.Threading.SendOrPostCallback AddSpamAssassinServerOperationCompleted;

		private System.Threading.SendOrPostCallback ListSpamAssassinServersOperationCompleted;

		private System.Threading.SendOrPostCallback GetRequestedSystemSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback SetRequestedSystemSettingsOperationCompleted;

		private System.Threading.SendOrPostCallback GetSpoolMessageCountOperationCompleted;

		private System.Threading.SendOrPostCallback ListGreylistingFiltersOperationCompleted;

		private System.Threading.SendOrPostCallback ListPortsAssignedToIPOperationCompleted;

		private System.Threading.SendOrPostCallback RemovePortFromIPOperationCompleted;

		private System.Threading.SendOrPostCallback AssignPortToIPOperationCompleted;

		private System.Threading.SendOrPostCallback ListGatewaysOperationCompleted;

		private System.Threading.SendOrPostCallback GetGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback GetGlobalTrustedSendersOperationCompleted;

		private System.Threading.SendOrPostCallback AddGlobalTrustedSenderOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteGlobalTrustedSenderOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteGreylistingFilterOperationCompleted;

		private System.Threading.SendOrPostCallback GetWhitelistEntriesOperationCompleted;

		private System.Threading.SendOrPostCallback GetBlacklistEntriesOperationCompleted;

		private System.Threading.SendOrPostCallback SetBlacklistEntryOperationCompleted;

		private System.Threading.SendOrPostCallback SetWhitelistEntryOperationCompleted;

		private System.Threading.SendOrPostCallback AddGreylistingFilterOperationCompleted;

		private System.Threading.SendOrPostCallback AddSmtpAuthenticationBypassOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteSmtpAuthenticationBypassOperationCompleted;

		private System.Threading.SendOrPostCallback GetSmtpAuthenticationBypassesOperationCompleted;

		private System.Threading.SendOrPostCallback AddGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback AddSmarterMailGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateGatewayOperationCompleted;

		private System.Threading.SendOrPostCallback ListSystemAdminsOperationCompleted;

		private System.Threading.SendOrPostCallback SetSystemAdminPasswordOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteSystemAdminOperationCompleted;

		private System.Threading.SendOrPostCallback AddSystemAdminOperationCompleted;

		private System.Threading.SendOrPostCallback AddIPRestrictionToSystemAdminOperationCompleted;

		private System.Threading.SendOrPostCallback RemoveIPRestrictionFromSystemAdminOperationCompleted;

		private System.Threading.SendOrPostCallback AddHostnameOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteHostnameOperationCompleted;

		private System.Threading.SendOrPostCallback ListHostnamesOperationCompleted;

		private System.Threading.SendOrPostCallback AddFolderAutocleanRuleOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteFolderAutoCleanRuleOperationCompleted;

		private System.Threading.SendOrPostCallback ListFolderAutoCleanRulesOperationCompleted;

		private System.Threading.SendOrPostCallback AddForwardingBlacklistEntryOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteForwardingBlacklistEntryOperationCompleted;

		private System.Threading.SendOrPostCallback ListForwardingBlacklistEntriesOperationCompleted;

		/// <remarks/>
		public svcServerAdmin()
		{
			this.Url = "http://127.0.0.1:9998/services/svcServerAdmin.asmx";
		}

		/// <remarks/>
		public event StartServicesCompletedEventHandler StartServicesCompleted;

		/// <remarks/>
		public event StopServicesCompletedEventHandler StopServicesCompleted;

		/// <remarks/>
		public event RequestStatusCompletedEventHandler RequestStatusCompleted;

		/// <remarks/>
		public event GetEditionCompletedEventHandler GetEditionCompleted;

		/// <remarks/>
		public event DeleteServerPortCompletedEventHandler DeleteServerPortCompleted;

		/// <remarks/>
		public event ListServerPortsCompletedEventHandler ListServerPortsCompleted;

		/// <remarks/>
		public event AddServerPortCompletedEventHandler AddServerPortCompleted;

		/// <remarks/>
		public event GetSMTPBlockedSendersCompletedEventHandler GetSMTPBlockedSendersCompleted;

		/// <remarks/>
		public event AddDOSAbuseDetectionRuleCompletedEventHandler AddDOSAbuseDetectionRuleCompleted;

		/// <remarks/>
		public event AddHarvestingAbuseDetectionRuleCompletedEventHandler AddHarvestingAbuseDetectionRuleCompleted;

		/// <remarks/>
		public event AddIncomingGatewayCompletedEventHandler AddIncomingGatewayCompleted;

		/// <remarks/>
		public event GetIncomingGatewayCompletedEventHandler GetIncomingGatewayCompleted;

		/// <remarks/>
		public event ListIncomingGatewaysCompletedEventHandler ListIncomingGatewaysCompleted;

		/// <remarks/>
		public event UpdateIncomingGatewayCompletedEventHandler UpdateIncomingGatewayCompleted;

		/// <remarks/>
		public event RemoveIncomingGatewayCompletedEventHandler RemoveIncomingGatewayCompleted;

		/// <remarks/>
		public event AddInternalSpammerNotificationAbuseDetectionRuleCompletedEventHandler AddInternalSpammerNotificationAbuseDetectionRuleCompleted;

		/// <remarks/>
		public event DeleteAbuseDetectionRuleCompletedEventHandler DeleteAbuseDetectionRuleCompleted;

		/// <remarks/>
		public event GetDOSAbuseDetectionRulesCompletedEventHandler GetDOSAbuseDetectionRulesCompleted;

		/// <remarks/>
		public event GetHarvestingAbuseDetectionRulesCompletedEventHandler GetHarvestingAbuseDetectionRulesCompleted;

		/// <remarks/>
		public event GetInternalSpammerNotificationAbuseDetectionRulesCompletedEventHandler GetInternalSpammerNotificationAbuseDetectionRulesCompleted;

		/// <remarks/>
		public event AddSMTPBlockedSenderCompletedEventHandler AddSMTPBlockedSenderCompleted;

		/// <remarks/>
		public event DeleteSpamAssassinServerCompletedEventHandler DeleteSpamAssassinServerCompleted;

		/// <remarks/>
		public event AddSpamAssassinServerCompletedEventHandler AddSpamAssassinServerCompleted;

		/// <remarks/>
		public event ListSpamAssassinServersCompletedEventHandler ListSpamAssassinServersCompleted;

		/// <remarks/>
		public event GetRequestedSystemSettingsCompletedEventHandler GetRequestedSystemSettingsCompleted;

		/// <remarks/>
		public event SetRequestedSystemSettingsCompletedEventHandler SetRequestedSystemSettingsCompleted;

		/// <remarks/>
		public event GetSpoolMessageCountCompletedEventHandler GetSpoolMessageCountCompleted;

		/// <remarks/>
		public event ListGreylistingFiltersCompletedEventHandler ListGreylistingFiltersCompleted;

		/// <remarks/>
		public event ListPortsAssignedToIPCompletedEventHandler ListPortsAssignedToIPCompleted;

		/// <remarks/>
		public event RemovePortFromIPCompletedEventHandler RemovePortFromIPCompleted;

		/// <remarks/>
		public event AssignPortToIPCompletedEventHandler AssignPortToIPCompleted;

		/// <remarks/>
		public event ListGatewaysCompletedEventHandler ListGatewaysCompleted;

		/// <remarks/>
		public event GetGatewayCompletedEventHandler GetGatewayCompleted;

		/// <remarks/>
		public event GetGlobalTrustedSendersCompletedEventHandler GetGlobalTrustedSendersCompleted;

		/// <remarks/>
		public event AddGlobalTrustedSenderCompletedEventHandler AddGlobalTrustedSenderCompleted;

		/// <remarks/>
		public event DeleteGlobalTrustedSenderCompletedEventHandler DeleteGlobalTrustedSenderCompleted;

		/// <remarks/>
		public event DeleteGreylistingFilterCompletedEventHandler DeleteGreylistingFilterCompleted;

		/// <remarks/>
		public event GetWhitelistEntriesCompletedEventHandler GetWhitelistEntriesCompleted;

		/// <remarks/>
		public event GetBlacklistEntriesCompletedEventHandler GetBlacklistEntriesCompleted;

		/// <remarks/>
		public event SetBlacklistEntryCompletedEventHandler SetBlacklistEntryCompleted;

		/// <remarks/>
		public event SetWhitelistEntryCompletedEventHandler SetWhitelistEntryCompleted;

		/// <remarks/>
		public event AddGreylistingFilterCompletedEventHandler AddGreylistingFilterCompleted;

		/// <remarks/>
		public event AddSmtpAuthenticationBypassCompletedEventHandler AddSmtpAuthenticationBypassCompleted;

		/// <remarks/>
		public event DeleteSmtpAuthenticationBypassCompletedEventHandler DeleteSmtpAuthenticationBypassCompleted;

		/// <remarks/>
		public event GetSmtpAuthenticationBypassesCompletedEventHandler GetSmtpAuthenticationBypassesCompleted;

		/// <remarks/>
		public event AddGatewayCompletedEventHandler AddGatewayCompleted;

		/// <remarks/>
		public event AddSmarterMailGatewayCompletedEventHandler AddSmarterMailGatewayCompleted;

		/// <remarks/>
		public event RemoveGatewayCompletedEventHandler RemoveGatewayCompleted;

		/// <remarks/>
		public event UpdateGatewayCompletedEventHandler UpdateGatewayCompleted;

		/// <remarks/>
		public event ListSystemAdminsCompletedEventHandler ListSystemAdminsCompleted;

		/// <remarks/>
		public event SetSystemAdminPasswordCompletedEventHandler SetSystemAdminPasswordCompleted;

		/// <remarks/>
		public event DeleteSystemAdminCompletedEventHandler DeleteSystemAdminCompleted;

		/// <remarks/>
		public event AddSystemAdminCompletedEventHandler AddSystemAdminCompleted;

		/// <remarks/>
		public event AddIPRestrictionToSystemAdminCompletedEventHandler AddIPRestrictionToSystemAdminCompleted;

		/// <remarks/>
		public event RemoveIPRestrictionFromSystemAdminCompletedEventHandler RemoveIPRestrictionFromSystemAdminCompleted;

		/// <remarks/>
		public event AddHostnameCompletedEventHandler AddHostnameCompleted;

		/// <remarks/>
		public event DeleteHostnameCompletedEventHandler DeleteHostnameCompleted;

		/// <remarks/>
		public event ListHostnamesCompletedEventHandler ListHostnamesCompleted;

		/// <remarks/>
		public event AddFolderAutocleanRuleCompletedEventHandler AddFolderAutocleanRuleCompleted;

		/// <remarks/>
		public event DeleteFolderAutoCleanRuleCompletedEventHandler DeleteFolderAutoCleanRuleCompleted;

		/// <remarks/>
		public event ListFolderAutoCleanRulesCompletedEventHandler ListFolderAutoCleanRulesCompleted;

		/// <remarks/>
		public event AddForwardingBlacklistEntryCompletedEventHandler AddForwardingBlacklistEntryCompleted;

		/// <remarks/>
		public event DeleteForwardingBlacklistEntryCompletedEventHandler DeleteForwardingBlacklistEntryCompleted;

		/// <remarks/>
		public event ListForwardingBlacklistEntriesCompletedEventHandler ListForwardingBlacklistEntriesCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartServices", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult StartServices(string AuthUserName, string AuthPassword, string[] ServicesToStart)
		{
			object[] results = this.Invoke("StartServices", new object[] {
                    AuthUserName,
                    AuthPassword,
                    ServicesToStart});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginStartServices(string AuthUserName, string AuthPassword, string[] ServicesToStart, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("StartServices", new object[] {
                    AuthUserName,
                    AuthPassword,
                    ServicesToStart}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndStartServices(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void StartServicesAsync(string AuthUserName, string AuthPassword, string[] ServicesToStart)
		{
			this.StartServicesAsync(AuthUserName, AuthPassword, ServicesToStart, null);
		}

		/// <remarks/>
		public void StartServicesAsync(string AuthUserName, string AuthPassword, string[] ServicesToStart, object userState)
		{
			if ((this.StartServicesOperationCompleted == null))
			{
				this.StartServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartServicesOperationCompleted);
			}
			this.InvokeAsync("StartServices", new object[] {
                    AuthUserName,
                    AuthPassword,
                    ServicesToStart}, this.StartServicesOperationCompleted, userState);
		}

		private void OnStartServicesOperationCompleted(object arg)
		{
			if ((this.StartServicesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.StartServicesCompleted(this, new StartServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopServices", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult StopServices(string AuthUserName, string AuthPassword, string[] ServicesToStop)
		{
			object[] results = this.Invoke("StopServices", new object[] {
                    AuthUserName,
                    AuthPassword,
                    ServicesToStop});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginStopServices(string AuthUserName, string AuthPassword, string[] ServicesToStop, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("StopServices", new object[] {
                    AuthUserName,
                    AuthPassword,
                    ServicesToStop}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndStopServices(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void StopServicesAsync(string AuthUserName, string AuthPassword, string[] ServicesToStop)
		{
			this.StopServicesAsync(AuthUserName, AuthPassword, ServicesToStop, null);
		}

		/// <remarks/>
		public void StopServicesAsync(string AuthUserName, string AuthPassword, string[] ServicesToStop, object userState)
		{
			if ((this.StopServicesOperationCompleted == null))
			{
				this.StopServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopServicesOperationCompleted);
			}
			this.InvokeAsync("StopServices", new object[] {
                    AuthUserName,
                    AuthPassword,
                    ServicesToStop}, this.StopServicesOperationCompleted, userState);
		}

		private void OnStopServicesOperationCompleted(object arg)
		{
			if ((this.StopServicesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.StopServicesCompleted(this, new StopServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RequestStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public RequestStatusResult RequestStatus(string AuthUserName, string AuthPassword, string[] reqStats)
		{
			object[] results = this.Invoke("RequestStatus", new object[] {
                    AuthUserName,
                    AuthPassword,
                    reqStats});
			return ((RequestStatusResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRequestStatus(string AuthUserName, string AuthPassword, string[] reqStats, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RequestStatus", new object[] {
                    AuthUserName,
                    AuthPassword,
                    reqStats}, callback, asyncState);
		}

		/// <remarks/>
		public RequestStatusResult EndRequestStatus(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((RequestStatusResult)(results[0]));
		}

		/// <remarks/>
		public void RequestStatusAsync(string AuthUserName, string AuthPassword, string[] reqStats)
		{
			this.RequestStatusAsync(AuthUserName, AuthPassword, reqStats, null);
		}

		/// <remarks/>
		public void RequestStatusAsync(string AuthUserName, string AuthPassword, string[] reqStats, object userState)
		{
			if ((this.RequestStatusOperationCompleted == null))
			{
				this.RequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestStatusOperationCompleted);
			}
			this.InvokeAsync("RequestStatus", new object[] {
                    AuthUserName,
                    AuthPassword,
                    reqStats}, this.RequestStatusOperationCompleted, userState);
		}

		private void OnRequestStatusOperationCompleted(object arg)
		{
			if ((this.RequestStatusCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RequestStatusCompleted(this, new RequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEdition", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public EditionResult GetEdition(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("GetEdition", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((EditionResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetEdition(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetEdition", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public EditionResult EndGetEdition(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((EditionResult)(results[0]));
		}

		/// <remarks/>
		public void GetEditionAsync(string AuthUserName, string AuthPassword)
		{
			this.GetEditionAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void GetEditionAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.GetEditionOperationCompleted == null))
			{
				this.GetEditionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEditionOperationCompleted);
			}
			this.InvokeAsync("GetEdition", new object[] {
                    AuthUserName,
                    AuthPassword}, this.GetEditionOperationCompleted, userState);
		}

		private void OnGetEditionOperationCompleted(object arg)
		{
			if ((this.GetEditionCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetEditionCompleted(this, new GetEditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteServerPort", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteServerPort(string authUsername, string authPassword, string portId)
		{
			object[] results = this.Invoke("DeleteServerPort", new object[] {
                    authUsername,
                    authPassword,
                    portId});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteServerPort(string authUsername, string authPassword, string portId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteServerPort", new object[] {
                    authUsername,
                    authPassword,
                    portId}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteServerPort(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteServerPortAsync(string authUsername, string authPassword, string portId)
		{
			this.DeleteServerPortAsync(authUsername, authPassword, portId, null);
		}

		/// <remarks/>
		public void DeleteServerPortAsync(string authUsername, string authPassword, string portId, object userState)
		{
			if ((this.DeleteServerPortOperationCompleted == null))
			{
				this.DeleteServerPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServerPortOperationCompleted);
			}
			this.InvokeAsync("DeleteServerPort", new object[] {
                    authUsername,
                    authPassword,
                    portId}, this.DeleteServerPortOperationCompleted, userState);
		}

		private void OnDeleteServerPortOperationCompleted(object arg)
		{
			if ((this.DeleteServerPortCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteServerPortCompleted(this, new DeleteServerPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListServerPorts", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ServerPortListResult ListServerPorts(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListServerPorts", new object[] {
                    authUsername,
                    authPassword});
			return ((ServerPortListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListServerPorts(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListServerPorts", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public ServerPortListResult EndListServerPorts(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ServerPortListResult)(results[0]));
		}

		/// <remarks/>
		public void ListServerPortsAsync(string authUsername, string authPassword)
		{
			this.ListServerPortsAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListServerPortsAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListServerPortsOperationCompleted == null))
			{
				this.ListServerPortsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListServerPortsOperationCompleted);
			}
			this.InvokeAsync("ListServerPorts", new object[] {
                    authUsername,
                    authPassword}, this.ListServerPortsOperationCompleted, userState);
		}

		private void OnListServerPortsOperationCompleted(object arg)
		{
			if ((this.ListServerPortsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListServerPortsCompleted(this, new ListServerPortsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddServerPort", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public AddServerPortResult AddServerPort(string authUsername, string authPassword, string protocol, string certificatePath, string encryption, string name, int port, string description)
		{
			object[] results = this.Invoke("AddServerPort", new object[] {
                    authUsername,
                    authPassword,
                    protocol,
                    certificatePath,
                    encryption,
                    name,
                    port,
                    description});
			return ((AddServerPortResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddServerPort(string authUsername, string authPassword, string protocol, string certificatePath, string encryption, string name, int port, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddServerPort", new object[] {
                    authUsername,
                    authPassword,
                    protocol,
                    certificatePath,
                    encryption,
                    name,
                    port,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public AddServerPortResult EndAddServerPort(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((AddServerPortResult)(results[0]));
		}

		/// <remarks/>
		public void AddServerPortAsync(string authUsername, string authPassword, string protocol, string certificatePath, string encryption, string name, int port, string description)
		{
			this.AddServerPortAsync(authUsername, authPassword, protocol, certificatePath, encryption, name, port, description, null);
		}

		/// <remarks/>
		public void AddServerPortAsync(string authUsername, string authPassword, string protocol, string certificatePath, string encryption, string name, int port, string description, object userState)
		{
			if ((this.AddServerPortOperationCompleted == null))
			{
				this.AddServerPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServerPortOperationCompleted);
			}
			this.InvokeAsync("AddServerPort", new object[] {
                    authUsername,
                    authPassword,
                    protocol,
                    certificatePath,
                    encryption,
                    name,
                    port,
                    description}, this.AddServerPortOperationCompleted, userState);
		}

		private void OnAddServerPortOperationCompleted(object arg)
		{
			if ((this.AddServerPortCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddServerPortCompleted(this, new AddServerPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMTPBlockedSenders", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SMTPBlockedSenderListResult GetSMTPBlockedSenders(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetSMTPBlockedSenders", new object[] {
                    authUsername,
                    authPassword});
			return ((SMTPBlockedSenderListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSMTPBlockedSenders(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSMTPBlockedSenders", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public SMTPBlockedSenderListResult EndGetSMTPBlockedSenders(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SMTPBlockedSenderListResult)(results[0]));
		}

		/// <remarks/>
		public void GetSMTPBlockedSendersAsync(string authUsername, string authPassword)
		{
			this.GetSMTPBlockedSendersAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetSMTPBlockedSendersAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetSMTPBlockedSendersOperationCompleted == null))
			{
				this.GetSMTPBlockedSendersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMTPBlockedSendersOperationCompleted);
			}
			this.InvokeAsync("GetSMTPBlockedSenders", new object[] {
                    authUsername,
                    authPassword}, this.GetSMTPBlockedSendersOperationCompleted, userState);
		}

		private void OnGetSMTPBlockedSendersOperationCompleted(object arg)
		{
			if ((this.GetSMTPBlockedSendersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSMTPBlockedSendersCompleted(this, new GetSMTPBlockedSendersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDOSAbuseDetectionRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddDOSAbuseDetectionRule(string authUsername, string authPassword, string service, int timeframe, int connectionsBeforeBlock, int timeToBlock, string description)
		{
			object[] results = this.Invoke("AddDOSAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    service,
                    timeframe,
                    connectionsBeforeBlock,
                    timeToBlock,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddDOSAbuseDetectionRule(string authUsername, string authPassword, string service, int timeframe, int connectionsBeforeBlock, int timeToBlock, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddDOSAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    service,
                    timeframe,
                    connectionsBeforeBlock,
                    timeToBlock,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddDOSAbuseDetectionRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddDOSAbuseDetectionRuleAsync(string authUsername, string authPassword, string service, int timeframe, int connectionsBeforeBlock, int timeToBlock, string description)
		{
			this.AddDOSAbuseDetectionRuleAsync(authUsername, authPassword, service, timeframe, connectionsBeforeBlock, timeToBlock, description, null);
		}

		/// <remarks/>
		public void AddDOSAbuseDetectionRuleAsync(string authUsername, string authPassword, string service, int timeframe, int connectionsBeforeBlock, int timeToBlock, string description, object userState)
		{
			if ((this.AddDOSAbuseDetectionRuleOperationCompleted == null))
			{
				this.AddDOSAbuseDetectionRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDOSAbuseDetectionRuleOperationCompleted);
			}
			this.InvokeAsync("AddDOSAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    service,
                    timeframe,
                    connectionsBeforeBlock,
                    timeToBlock,
                    description}, this.AddDOSAbuseDetectionRuleOperationCompleted, userState);
		}

		private void OnAddDOSAbuseDetectionRuleOperationCompleted(object arg)
		{
			if ((this.AddDOSAbuseDetectionRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddDOSAbuseDetectionRuleCompleted(this, new AddDOSAbuseDetectionRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddHarvestingAbuseDetectionRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddHarvestingAbuseDetectionRule(string authUsername, string authPassword, int timeframe, int badSessionsBeforeBlock, int timeToBlock, string description)
		{
			object[] results = this.Invoke("AddHarvestingAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    timeframe,
                    badSessionsBeforeBlock,
                    timeToBlock,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddHarvestingAbuseDetectionRule(string authUsername, string authPassword, int timeframe, int badSessionsBeforeBlock, int timeToBlock, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddHarvestingAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    timeframe,
                    badSessionsBeforeBlock,
                    timeToBlock,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddHarvestingAbuseDetectionRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddHarvestingAbuseDetectionRuleAsync(string authUsername, string authPassword, int timeframe, int badSessionsBeforeBlock, int timeToBlock, string description)
		{
			this.AddHarvestingAbuseDetectionRuleAsync(authUsername, authPassword, timeframe, badSessionsBeforeBlock, timeToBlock, description, null);
		}

		/// <remarks/>
		public void AddHarvestingAbuseDetectionRuleAsync(string authUsername, string authPassword, int timeframe, int badSessionsBeforeBlock, int timeToBlock, string description, object userState)
		{
			if ((this.AddHarvestingAbuseDetectionRuleOperationCompleted == null))
			{
				this.AddHarvestingAbuseDetectionRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHarvestingAbuseDetectionRuleOperationCompleted);
			}
			this.InvokeAsync("AddHarvestingAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    timeframe,
                    badSessionsBeforeBlock,
                    timeToBlock,
                    description}, this.AddHarvestingAbuseDetectionRuleOperationCompleted, userState);
		}

		private void OnAddHarvestingAbuseDetectionRuleOperationCompleted(object arg)
		{
			if ((this.AddHarvestingAbuseDetectionRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddHarvestingAbuseDetectionRuleCompleted(this, new AddHarvestingAbuseDetectionRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddIncomingGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddIncomingGateway(string AuthUserName, string AuthPassword, IncomingGatewayAttributes newIncomingGateway)
		{
			object[] results = this.Invoke("AddIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newIncomingGateway});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddIncomingGateway(string AuthUserName, string AuthPassword, IncomingGatewayAttributes newIncomingGateway, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newIncomingGateway}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddIncomingGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddIncomingGatewayAsync(string AuthUserName, string AuthPassword, IncomingGatewayAttributes newIncomingGateway)
		{
			this.AddIncomingGatewayAsync(AuthUserName, AuthPassword, newIncomingGateway, null);
		}

		/// <remarks/>
		public void AddIncomingGatewayAsync(string AuthUserName, string AuthPassword, IncomingGatewayAttributes newIncomingGateway, object userState)
		{
			if ((this.AddIncomingGatewayOperationCompleted == null))
			{
				this.AddIncomingGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncomingGatewayOperationCompleted);
			}
			this.InvokeAsync("AddIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newIncomingGateway}, this.AddIncomingGatewayOperationCompleted, userState);
		}

		private void OnAddIncomingGatewayOperationCompleted(object arg)
		{
			if ((this.AddIncomingGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddIncomingGatewayCompleted(this, new AddIncomingGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIncomingGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public IncomingGatewayResult GetIncomingGateway(string AuthUserName, string AuthPassword, string guid)
		{
			object[] results = this.Invoke("GetIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid});
			return ((IncomingGatewayResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetIncomingGateway(string AuthUserName, string AuthPassword, string guid, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, callback, asyncState);
		}

		/// <remarks/>
		public IncomingGatewayResult EndGetIncomingGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((IncomingGatewayResult)(results[0]));
		}

		/// <remarks/>
		public void GetIncomingGatewayAsync(string AuthUserName, string AuthPassword, string guid)
		{
			this.GetIncomingGatewayAsync(AuthUserName, AuthPassword, guid, null);
		}

		/// <remarks/>
		public void GetIncomingGatewayAsync(string AuthUserName, string AuthPassword, string guid, object userState)
		{
			if ((this.GetIncomingGatewayOperationCompleted == null))
			{
				this.GetIncomingGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIncomingGatewayOperationCompleted);
			}
			this.InvokeAsync("GetIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, this.GetIncomingGatewayOperationCompleted, userState);
		}

		private void OnGetIncomingGatewayOperationCompleted(object arg)
		{
			if ((this.GetIncomingGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetIncomingGatewayCompleted(this, new GetIncomingGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListIncomingGateways", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public IncomingGatewayListResult ListIncomingGateways(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("ListIncomingGateways", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((IncomingGatewayListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListIncomingGateways(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListIncomingGateways", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public IncomingGatewayListResult EndListIncomingGateways(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((IncomingGatewayListResult)(results[0]));
		}

		/// <remarks/>
		public void ListIncomingGatewaysAsync(string AuthUserName, string AuthPassword)
		{
			this.ListIncomingGatewaysAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void ListIncomingGatewaysAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.ListIncomingGatewaysOperationCompleted == null))
			{
				this.ListIncomingGatewaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListIncomingGatewaysOperationCompleted);
			}
			this.InvokeAsync("ListIncomingGateways", new object[] {
                    AuthUserName,
                    AuthPassword}, this.ListIncomingGatewaysOperationCompleted, userState);
		}

		private void OnListIncomingGatewaysOperationCompleted(object arg)
		{
			if ((this.ListIncomingGatewaysCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListIncomingGatewaysCompleted(this, new ListIncomingGatewaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateIncomingGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateIncomingGateway(string AuthUserName, string AuthPassword, string guid, IncomingGatewayAttributes updatedIncomingGateway)
		{
			object[] results = this.Invoke("UpdateIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid,
                    updatedIncomingGateway});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateIncomingGateway(string AuthUserName, string AuthPassword, string guid, IncomingGatewayAttributes updatedIncomingGateway, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid,
                    updatedIncomingGateway}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateIncomingGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateIncomingGatewayAsync(string AuthUserName, string AuthPassword, string guid, IncomingGatewayAttributes updatedIncomingGateway)
		{
			this.UpdateIncomingGatewayAsync(AuthUserName, AuthPassword, guid, updatedIncomingGateway, null);
		}

		/// <remarks/>
		public void UpdateIncomingGatewayAsync(string AuthUserName, string AuthPassword, string guid, IncomingGatewayAttributes updatedIncomingGateway, object userState)
		{
			if ((this.UpdateIncomingGatewayOperationCompleted == null))
			{
				this.UpdateIncomingGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIncomingGatewayOperationCompleted);
			}
			this.InvokeAsync("UpdateIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid,
                    updatedIncomingGateway}, this.UpdateIncomingGatewayOperationCompleted, userState);
		}

		private void OnUpdateIncomingGatewayOperationCompleted(object arg)
		{
			if ((this.UpdateIncomingGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateIncomingGatewayCompleted(this, new UpdateIncomingGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveIncomingGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemoveIncomingGateway(string AuthUserName, string AuthPassword, string guid)
		{
			object[] results = this.Invoke("RemoveIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveIncomingGateway(string AuthUserName, string AuthPassword, string guid, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemoveIncomingGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemoveIncomingGatewayAsync(string AuthUserName, string AuthPassword, string guid)
		{
			this.RemoveIncomingGatewayAsync(AuthUserName, AuthPassword, guid, null);
		}

		/// <remarks/>
		public void RemoveIncomingGatewayAsync(string AuthUserName, string AuthPassword, string guid, object userState)
		{
			if ((this.RemoveIncomingGatewayOperationCompleted == null))
			{
				this.RemoveIncomingGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIncomingGatewayOperationCompleted);
			}
			this.InvokeAsync("RemoveIncomingGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, this.RemoveIncomingGatewayOperationCompleted, userState);
		}

		private void OnRemoveIncomingGatewayOperationCompleted(object arg)
		{
			if ((this.RemoveIncomingGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveIncomingGatewayCompleted(this, new RemoveIncomingGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddInternalSpammerNotificationAbuseDetectionRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddInternalSpammerNotificationAbuseDetectionRule(string authUsername, string authPassword, int timeframe, int messagesBeforeNotify, string emailAddressToNotify, string description)
		{
			object[] results = this.Invoke("AddInternalSpammerNotificationAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    timeframe,
                    messagesBeforeNotify,
                    emailAddressToNotify,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddInternalSpammerNotificationAbuseDetectionRule(string authUsername, string authPassword, int timeframe, int messagesBeforeNotify, string emailAddressToNotify, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddInternalSpammerNotificationAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    timeframe,
                    messagesBeforeNotify,
                    emailAddressToNotify,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddInternalSpammerNotificationAbuseDetectionRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddInternalSpammerNotificationAbuseDetectionRuleAsync(string authUsername, string authPassword, int timeframe, int messagesBeforeNotify, string emailAddressToNotify, string description)
		{
			this.AddInternalSpammerNotificationAbuseDetectionRuleAsync(authUsername, authPassword, timeframe, messagesBeforeNotify, emailAddressToNotify, description, null);
		}

		/// <remarks/>
		public void AddInternalSpammerNotificationAbuseDetectionRuleAsync(string authUsername, string authPassword, int timeframe, int messagesBeforeNotify, string emailAddressToNotify, string description, object userState)
		{
			if ((this.AddInternalSpammerNotificationAbuseDetectionRuleOperationCompleted == null))
			{
				this.AddInternalSpammerNotificationAbuseDetectionRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInternalSpammerNotificationAbuseDetectionRuleOperationCompleted);
			}
			this.InvokeAsync("AddInternalSpammerNotificationAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    timeframe,
                    messagesBeforeNotify,
                    emailAddressToNotify,
                    description}, this.AddInternalSpammerNotificationAbuseDetectionRuleOperationCompleted, userState);
		}

		private void OnAddInternalSpammerNotificationAbuseDetectionRuleOperationCompleted(object arg)
		{
			if ((this.AddInternalSpammerNotificationAbuseDetectionRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddInternalSpammerNotificationAbuseDetectionRuleCompleted(this, new AddInternalSpammerNotificationAbuseDetectionRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAbuseDetectionRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteAbuseDetectionRule(string authUsername, string authPassword, string id)
		{
			object[] results = this.Invoke("DeleteAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    id});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteAbuseDetectionRule(string authUsername, string authPassword, string id, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    id}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteAbuseDetectionRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteAbuseDetectionRuleAsync(string authUsername, string authPassword, string id)
		{
			this.DeleteAbuseDetectionRuleAsync(authUsername, authPassword, id, null);
		}

		/// <remarks/>
		public void DeleteAbuseDetectionRuleAsync(string authUsername, string authPassword, string id, object userState)
		{
			if ((this.DeleteAbuseDetectionRuleOperationCompleted == null))
			{
				this.DeleteAbuseDetectionRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAbuseDetectionRuleOperationCompleted);
			}
			this.InvokeAsync("DeleteAbuseDetectionRule", new object[] {
                    authUsername,
                    authPassword,
                    id}, this.DeleteAbuseDetectionRuleOperationCompleted, userState);
		}

		private void OnDeleteAbuseDetectionRuleOperationCompleted(object arg)
		{
			if ((this.DeleteAbuseDetectionRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteAbuseDetectionRuleCompleted(this, new DeleteAbuseDetectionRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDOSAbuseDetectionRules", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DOSAbuseDetectionRulesListResult GetDOSAbuseDetectionRules(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetDOSAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword});
			return ((DOSAbuseDetectionRulesListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDOSAbuseDetectionRules(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDOSAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public DOSAbuseDetectionRulesListResult EndGetDOSAbuseDetectionRules(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DOSAbuseDetectionRulesListResult)(results[0]));
		}

		/// <remarks/>
		public void GetDOSAbuseDetectionRulesAsync(string authUsername, string authPassword)
		{
			this.GetDOSAbuseDetectionRulesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetDOSAbuseDetectionRulesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetDOSAbuseDetectionRulesOperationCompleted == null))
			{
				this.GetDOSAbuseDetectionRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDOSAbuseDetectionRulesOperationCompleted);
			}
			this.InvokeAsync("GetDOSAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword}, this.GetDOSAbuseDetectionRulesOperationCompleted, userState);
		}

		private void OnGetDOSAbuseDetectionRulesOperationCompleted(object arg)
		{
			if ((this.GetDOSAbuseDetectionRulesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDOSAbuseDetectionRulesCompleted(this, new GetDOSAbuseDetectionRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHarvestingAbuseDetectionRules", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public HarvestingAbuseDetectionRulesListResult GetHarvestingAbuseDetectionRules(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetHarvestingAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword});
			return ((HarvestingAbuseDetectionRulesListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetHarvestingAbuseDetectionRules(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetHarvestingAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public HarvestingAbuseDetectionRulesListResult EndGetHarvestingAbuseDetectionRules(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((HarvestingAbuseDetectionRulesListResult)(results[0]));
		}

		/// <remarks/>
		public void GetHarvestingAbuseDetectionRulesAsync(string authUsername, string authPassword)
		{
			this.GetHarvestingAbuseDetectionRulesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetHarvestingAbuseDetectionRulesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetHarvestingAbuseDetectionRulesOperationCompleted == null))
			{
				this.GetHarvestingAbuseDetectionRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHarvestingAbuseDetectionRulesOperationCompleted);
			}
			this.InvokeAsync("GetHarvestingAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword}, this.GetHarvestingAbuseDetectionRulesOperationCompleted, userState);
		}

		private void OnGetHarvestingAbuseDetectionRulesOperationCompleted(object arg)
		{
			if ((this.GetHarvestingAbuseDetectionRulesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetHarvestingAbuseDetectionRulesCompleted(this, new GetHarvestingAbuseDetectionRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInternalSpammerNotificationAbuseDetectionRules", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public InternalSpammerNotificationAbuseDetectionRulesListResult GetInternalSpammerNotificationAbuseDetectionRules(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetInternalSpammerNotificationAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword});
			return ((InternalSpammerNotificationAbuseDetectionRulesListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetInternalSpammerNotificationAbuseDetectionRules(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetInternalSpammerNotificationAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public InternalSpammerNotificationAbuseDetectionRulesListResult EndGetInternalSpammerNotificationAbuseDetectionRules(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((InternalSpammerNotificationAbuseDetectionRulesListResult)(results[0]));
		}

		/// <remarks/>
		public void GetInternalSpammerNotificationAbuseDetectionRulesAsync(string authUsername, string authPassword)
		{
			this.GetInternalSpammerNotificationAbuseDetectionRulesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetInternalSpammerNotificationAbuseDetectionRulesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetInternalSpammerNotificationAbuseDetectionRulesOperationCompleted == null))
			{
				this.GetInternalSpammerNotificationAbuseDetectionRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInternalSpammerNotificationAbuseDetectionRulesOperationCompleted);
			}
			this.InvokeAsync("GetInternalSpammerNotificationAbuseDetectionRules", new object[] {
                    authUsername,
                    authPassword}, this.GetInternalSpammerNotificationAbuseDetectionRulesOperationCompleted, userState);
		}

		private void OnGetInternalSpammerNotificationAbuseDetectionRulesOperationCompleted(object arg)
		{
			if ((this.GetInternalSpammerNotificationAbuseDetectionRulesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetInternalSpammerNotificationAbuseDetectionRulesCompleted(this, new GetInternalSpammerNotificationAbuseDetectionRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSMTPBlockedSender", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSMTPBlockedSender(string authUsername, string authPassword, string blockedSender, string description)
		{
			object[] results = this.Invoke("AddSMTPBlockedSender", new object[] {
                    authUsername,
                    authPassword,
                    blockedSender,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSMTPBlockedSender(string authUsername, string authPassword, string blockedSender, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSMTPBlockedSender", new object[] {
                    authUsername,
                    authPassword,
                    blockedSender,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSMTPBlockedSender(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSMTPBlockedSenderAsync(string authUsername, string authPassword, string blockedSender, string description)
		{
			this.AddSMTPBlockedSenderAsync(authUsername, authPassword, blockedSender, description, null);
		}

		/// <remarks/>
		public void AddSMTPBlockedSenderAsync(string authUsername, string authPassword, string blockedSender, string description, object userState)
		{
			if ((this.AddSMTPBlockedSenderOperationCompleted == null))
			{
				this.AddSMTPBlockedSenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSMTPBlockedSenderOperationCompleted);
			}
			this.InvokeAsync("AddSMTPBlockedSender", new object[] {
                    authUsername,
                    authPassword,
                    blockedSender,
                    description}, this.AddSMTPBlockedSenderOperationCompleted, userState);
		}

		private void OnAddSMTPBlockedSenderOperationCompleted(object arg)
		{
			if ((this.AddSMTPBlockedSenderCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSMTPBlockedSenderCompleted(this, new AddSMTPBlockedSenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSpamAssassinServer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteSpamAssassinServer(string authUsername, string authPassword, string serverName)
		{
			object[] results = this.Invoke("DeleteSpamAssassinServer", new object[] {
                    authUsername,
                    authPassword,
                    serverName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteSpamAssassinServer(string authUsername, string authPassword, string serverName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteSpamAssassinServer", new object[] {
                    authUsername,
                    authPassword,
                    serverName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteSpamAssassinServer(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteSpamAssassinServerAsync(string authUsername, string authPassword, string serverName)
		{
			this.DeleteSpamAssassinServerAsync(authUsername, authPassword, serverName, null);
		}

		/// <remarks/>
		public void DeleteSpamAssassinServerAsync(string authUsername, string authPassword, string serverName, object userState)
		{
			if ((this.DeleteSpamAssassinServerOperationCompleted == null))
			{
				this.DeleteSpamAssassinServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSpamAssassinServerOperationCompleted);
			}
			this.InvokeAsync("DeleteSpamAssassinServer", new object[] {
                    authUsername,
                    authPassword,
                    serverName}, this.DeleteSpamAssassinServerOperationCompleted, userState);
		}

		private void OnDeleteSpamAssassinServerOperationCompleted(object arg)
		{
			if ((this.DeleteSpamAssassinServerCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteSpamAssassinServerCompleted(this, new DeleteSpamAssassinServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSpamAssassinServer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSpamAssassinServer(string authUsername, string authPassword, string serverName, string ipAddress, int serverPort)
		{
			object[] results = this.Invoke("AddSpamAssassinServer", new object[] {
                    authUsername,
                    authPassword,
                    serverName,
                    ipAddress,
                    serverPort});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSpamAssassinServer(string authUsername, string authPassword, string serverName, string ipAddress, int serverPort, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSpamAssassinServer", new object[] {
                    authUsername,
                    authPassword,
                    serverName,
                    ipAddress,
                    serverPort}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSpamAssassinServer(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSpamAssassinServerAsync(string authUsername, string authPassword, string serverName, string ipAddress, int serverPort)
		{
			this.AddSpamAssassinServerAsync(authUsername, authPassword, serverName, ipAddress, serverPort, null);
		}

		/// <remarks/>
		public void AddSpamAssassinServerAsync(string authUsername, string authPassword, string serverName, string ipAddress, int serverPort, object userState)
		{
			if ((this.AddSpamAssassinServerOperationCompleted == null))
			{
				this.AddSpamAssassinServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSpamAssassinServerOperationCompleted);
			}
			this.InvokeAsync("AddSpamAssassinServer", new object[] {
                    authUsername,
                    authPassword,
                    serverName,
                    ipAddress,
                    serverPort}, this.AddSpamAssassinServerOperationCompleted, userState);
		}

		private void OnAddSpamAssassinServerOperationCompleted(object arg)
		{
			if ((this.AddSpamAssassinServerCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSpamAssassinServerCompleted(this, new AddSpamAssassinServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListSpamAssassinServers", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SpamAssassinServerListResult ListSpamAssassinServers(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListSpamAssassinServers", new object[] {
                    authUsername,
                    authPassword});
			return ((SpamAssassinServerListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListSpamAssassinServers(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListSpamAssassinServers", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public SpamAssassinServerListResult EndListSpamAssassinServers(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SpamAssassinServerListResult)(results[0]));
		}

		/// <remarks/>
		public void ListSpamAssassinServersAsync(string authUsername, string authPassword)
		{
			this.ListSpamAssassinServersAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListSpamAssassinServersAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListSpamAssassinServersOperationCompleted == null))
			{
				this.ListSpamAssassinServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSpamAssassinServersOperationCompleted);
			}
			this.InvokeAsync("ListSpamAssassinServers", new object[] {
                    authUsername,
                    authPassword}, this.ListSpamAssassinServersOperationCompleted, userState);
		}

		private void OnListSpamAssassinServersOperationCompleted(object arg)
		{
			if ((this.ListSpamAssassinServersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListSpamAssassinServersCompleted(this, new ListSpamAssassinServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRequestedSystemSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public RequestSettingsResult GetRequestedSystemSettings(string AuthUserName, string AuthPassword, string[] reqSettings)
		{
			object[] results = this.Invoke("GetRequestedSystemSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    reqSettings});
			return ((RequestSettingsResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRequestedSystemSettings(string AuthUserName, string AuthPassword, string[] reqSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRequestedSystemSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    reqSettings}, callback, asyncState);
		}

		/// <remarks/>
		public RequestSettingsResult EndGetRequestedSystemSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((RequestSettingsResult)(results[0]));
		}

		/// <remarks/>
		public void GetRequestedSystemSettingsAsync(string AuthUserName, string AuthPassword, string[] reqSettings)
		{
			this.GetRequestedSystemSettingsAsync(AuthUserName, AuthPassword, reqSettings, null);
		}

		/// <remarks/>
		public void GetRequestedSystemSettingsAsync(string AuthUserName, string AuthPassword, string[] reqSettings, object userState)
		{
			if ((this.GetRequestedSystemSettingsOperationCompleted == null))
			{
				this.GetRequestedSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestedSystemSettingsOperationCompleted);
			}
			this.InvokeAsync("GetRequestedSystemSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    reqSettings}, this.GetRequestedSystemSettingsOperationCompleted, userState);
		}

		private void OnGetRequestedSystemSettingsOperationCompleted(object arg)
		{
			if ((this.GetRequestedSystemSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRequestedSystemSettingsCompleted(this, new GetRequestedSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRequestedSystemSettings", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetRequestedSystemSettings(string AuthUserName, string AuthPassword, string[] newSettings)
		{
			object[] results = this.Invoke("SetRequestedSystemSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newSettings});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetRequestedSystemSettings(string AuthUserName, string AuthPassword, string[] newSettings, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetRequestedSystemSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newSettings}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetRequestedSystemSettings(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetRequestedSystemSettingsAsync(string AuthUserName, string AuthPassword, string[] newSettings)
		{
			this.SetRequestedSystemSettingsAsync(AuthUserName, AuthPassword, newSettings, null);
		}

		/// <remarks/>
		public void SetRequestedSystemSettingsAsync(string AuthUserName, string AuthPassword, string[] newSettings, object userState)
		{
			if ((this.SetRequestedSystemSettingsOperationCompleted == null))
			{
				this.SetRequestedSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRequestedSystemSettingsOperationCompleted);
			}
			this.InvokeAsync("SetRequestedSystemSettings", new object[] {
                    AuthUserName,
                    AuthPassword,
                    newSettings}, this.SetRequestedSystemSettingsOperationCompleted, userState);
		}

		private void OnSetRequestedSystemSettingsOperationCompleted(object arg)
		{
			if ((this.SetRequestedSystemSettingsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetRequestedSystemSettingsCompleted(this, new SetRequestedSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSpoolMessageCount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public MessageCountResult GetSpoolMessageCount(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("GetSpoolMessageCount", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((MessageCountResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSpoolMessageCount(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSpoolMessageCount", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public MessageCountResult EndGetSpoolMessageCount(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((MessageCountResult)(results[0]));
		}

		/// <remarks/>
		public void GetSpoolMessageCountAsync(string AuthUserName, string AuthPassword)
		{
			this.GetSpoolMessageCountAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void GetSpoolMessageCountAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.GetSpoolMessageCountOperationCompleted == null))
			{
				this.GetSpoolMessageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpoolMessageCountOperationCompleted);
			}
			this.InvokeAsync("GetSpoolMessageCount", new object[] {
                    AuthUserName,
                    AuthPassword}, this.GetSpoolMessageCountOperationCompleted, userState);
		}

		private void OnGetSpoolMessageCountOperationCompleted(object arg)
		{
			if ((this.GetSpoolMessageCountCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSpoolMessageCountCompleted(this, new GetSpoolMessageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListGreylistingFilters", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GreylistingFilterListResult ListGreylistingFilters(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListGreylistingFilters", new object[] {
                    authUsername,
                    authPassword});
			return ((GreylistingFilterListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListGreylistingFilters(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListGreylistingFilters", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public GreylistingFilterListResult EndListGreylistingFilters(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GreylistingFilterListResult)(results[0]));
		}

		/// <remarks/>
		public void ListGreylistingFiltersAsync(string authUsername, string authPassword)
		{
			this.ListGreylistingFiltersAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListGreylistingFiltersAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListGreylistingFiltersOperationCompleted == null))
			{
				this.ListGreylistingFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListGreylistingFiltersOperationCompleted);
			}
			this.InvokeAsync("ListGreylistingFilters", new object[] {
                    authUsername,
                    authPassword}, this.ListGreylistingFiltersOperationCompleted, userState);
		}

		private void OnListGreylistingFiltersOperationCompleted(object arg)
		{
			if ((this.ListGreylistingFiltersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListGreylistingFiltersCompleted(this, new ListGreylistingFiltersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListPortsAssignedToIP", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ServerPortListResult ListPortsAssignedToIP(string authUsername, string authPassword, string ipAddress)
		{
			object[] results = this.Invoke("ListPortsAssignedToIP", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress});
			return ((ServerPortListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListPortsAssignedToIP(string authUsername, string authPassword, string ipAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListPortsAssignedToIP", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress}, callback, asyncState);
		}

		/// <remarks/>
		public ServerPortListResult EndListPortsAssignedToIP(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ServerPortListResult)(results[0]));
		}

		/// <remarks/>
		public void ListPortsAssignedToIPAsync(string authUsername, string authPassword, string ipAddress)
		{
			this.ListPortsAssignedToIPAsync(authUsername, authPassword, ipAddress, null);
		}

		/// <remarks/>
		public void ListPortsAssignedToIPAsync(string authUsername, string authPassword, string ipAddress, object userState)
		{
			if ((this.ListPortsAssignedToIPOperationCompleted == null))
			{
				this.ListPortsAssignedToIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPortsAssignedToIPOperationCompleted);
			}
			this.InvokeAsync("ListPortsAssignedToIP", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress}, this.ListPortsAssignedToIPOperationCompleted, userState);
		}

		private void OnListPortsAssignedToIPOperationCompleted(object arg)
		{
			if ((this.ListPortsAssignedToIPCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListPortsAssignedToIPCompleted(this, new ListPortsAssignedToIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemovePortFromIP", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemovePortFromIP(string authUsername, string authPassword, string portID, string ipAddress)
		{
			object[] results = this.Invoke("RemovePortFromIP", new object[] {
                    authUsername,
                    authPassword,
                    portID,
                    ipAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemovePortFromIP(string authUsername, string authPassword, string portID, string ipAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemovePortFromIP", new object[] {
                    authUsername,
                    authPassword,
                    portID,
                    ipAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemovePortFromIP(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemovePortFromIPAsync(string authUsername, string authPassword, string portID, string ipAddress)
		{
			this.RemovePortFromIPAsync(authUsername, authPassword, portID, ipAddress, null);
		}

		/// <remarks/>
		public void RemovePortFromIPAsync(string authUsername, string authPassword, string portID, string ipAddress, object userState)
		{
			if ((this.RemovePortFromIPOperationCompleted == null))
			{
				this.RemovePortFromIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePortFromIPOperationCompleted);
			}
			this.InvokeAsync("RemovePortFromIP", new object[] {
                    authUsername,
                    authPassword,
                    portID,
                    ipAddress}, this.RemovePortFromIPOperationCompleted, userState);
		}

		private void OnRemovePortFromIPOperationCompleted(object arg)
		{
			if ((this.RemovePortFromIPCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemovePortFromIPCompleted(this, new RemovePortFromIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignPortToIP", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AssignPortToIP(string authUsername, string authPassword, string portID, string ipAddress)
		{
			object[] results = this.Invoke("AssignPortToIP", new object[] {
                    authUsername,
                    authPassword,
                    portID,
                    ipAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAssignPortToIP(string authUsername, string authPassword, string portID, string ipAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AssignPortToIP", new object[] {
                    authUsername,
                    authPassword,
                    portID,
                    ipAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAssignPortToIP(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AssignPortToIPAsync(string authUsername, string authPassword, string portID, string ipAddress)
		{
			this.AssignPortToIPAsync(authUsername, authPassword, portID, ipAddress, null);
		}

		/// <remarks/>
		public void AssignPortToIPAsync(string authUsername, string authPassword, string portID, string ipAddress, object userState)
		{
			if ((this.AssignPortToIPOperationCompleted == null))
			{
				this.AssignPortToIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignPortToIPOperationCompleted);
			}
			this.InvokeAsync("AssignPortToIP", new object[] {
                    authUsername,
                    authPassword,
                    portID,
                    ipAddress}, this.AssignPortToIPOperationCompleted, userState);
		}

		private void OnAssignPortToIPOperationCompleted(object arg)
		{
			if ((this.AssignPortToIPCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AssignPortToIPCompleted(this, new AssignPortToIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListGateways", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GatewayListResult ListGateways(string AuthUserName, string AuthPassword)
		{
			object[] results = this.Invoke("ListGateways", new object[] {
                    AuthUserName,
                    AuthPassword});
			return ((GatewayListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListGateways(string AuthUserName, string AuthPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListGateways", new object[] {
                    AuthUserName,
                    AuthPassword}, callback, asyncState);
		}

		/// <remarks/>
		public GatewayListResult EndListGateways(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GatewayListResult)(results[0]));
		}

		/// <remarks/>
		public void ListGatewaysAsync(string AuthUserName, string AuthPassword)
		{
			this.ListGatewaysAsync(AuthUserName, AuthPassword, null);
		}

		/// <remarks/>
		public void ListGatewaysAsync(string AuthUserName, string AuthPassword, object userState)
		{
			if ((this.ListGatewaysOperationCompleted == null))
			{
				this.ListGatewaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListGatewaysOperationCompleted);
			}
			this.InvokeAsync("ListGateways", new object[] {
                    AuthUserName,
                    AuthPassword}, this.ListGatewaysOperationCompleted, userState);
		}

		private void OnListGatewaysOperationCompleted(object arg)
		{
			if ((this.ListGatewaysCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListGatewaysCompleted(this, new ListGatewaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GatewayResult GetGateway(string AuthUserName, string AuthPassword, string guid)
		{
			object[] results = this.Invoke("GetGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid});
			return ((GatewayResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetGateway(string AuthUserName, string AuthPassword, string guid, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, callback, asyncState);
		}

		/// <remarks/>
		public GatewayResult EndGetGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GatewayResult)(results[0]));
		}

		/// <remarks/>
		public void GetGatewayAsync(string AuthUserName, string AuthPassword, string guid)
		{
			this.GetGatewayAsync(AuthUserName, AuthPassword, guid, null);
		}

		/// <remarks/>
		public void GetGatewayAsync(string AuthUserName, string AuthPassword, string guid, object userState)
		{
			if ((this.GetGatewayOperationCompleted == null))
			{
				this.GetGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGatewayOperationCompleted);
			}
			this.InvokeAsync("GetGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, this.GetGatewayOperationCompleted, userState);
		}

		private void OnGetGatewayOperationCompleted(object arg)
		{
			if ((this.GetGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetGatewayCompleted(this, new GetGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGlobalTrustedSenders", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public TrustedSenderListResult GetGlobalTrustedSenders(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetGlobalTrustedSenders", new object[] {
                    authUsername,
                    authPassword});
			return ((TrustedSenderListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetGlobalTrustedSenders(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetGlobalTrustedSenders", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public TrustedSenderListResult EndGetGlobalTrustedSenders(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((TrustedSenderListResult)(results[0]));
		}

		/// <remarks/>
		public void GetGlobalTrustedSendersAsync(string authUsername, string authPassword)
		{
			this.GetGlobalTrustedSendersAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetGlobalTrustedSendersAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetGlobalTrustedSendersOperationCompleted == null))
			{
				this.GetGlobalTrustedSendersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGlobalTrustedSendersOperationCompleted);
			}
			this.InvokeAsync("GetGlobalTrustedSenders", new object[] {
                    authUsername,
                    authPassword}, this.GetGlobalTrustedSendersOperationCompleted, userState);
		}

		private void OnGetGlobalTrustedSendersOperationCompleted(object arg)
		{
			if ((this.GetGlobalTrustedSendersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetGlobalTrustedSendersCompleted(this, new GetGlobalTrustedSendersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddGlobalTrustedSender", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddGlobalTrustedSender(string authUsername, string authPassword, string addressOrDomain)
		{
			object[] results = this.Invoke("AddGlobalTrustedSender", new object[] {
                    authUsername,
                    authPassword,
                    addressOrDomain});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddGlobalTrustedSender(string authUsername, string authPassword, string addressOrDomain, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddGlobalTrustedSender", new object[] {
                    authUsername,
                    authPassword,
                    addressOrDomain}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddGlobalTrustedSender(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddGlobalTrustedSenderAsync(string authUsername, string authPassword, string addressOrDomain)
		{
			this.AddGlobalTrustedSenderAsync(authUsername, authPassword, addressOrDomain, null);
		}

		/// <remarks/>
		public void AddGlobalTrustedSenderAsync(string authUsername, string authPassword, string addressOrDomain, object userState)
		{
			if ((this.AddGlobalTrustedSenderOperationCompleted == null))
			{
				this.AddGlobalTrustedSenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGlobalTrustedSenderOperationCompleted);
			}
			this.InvokeAsync("AddGlobalTrustedSender", new object[] {
                    authUsername,
                    authPassword,
                    addressOrDomain}, this.AddGlobalTrustedSenderOperationCompleted, userState);
		}

		private void OnAddGlobalTrustedSenderOperationCompleted(object arg)
		{
			if ((this.AddGlobalTrustedSenderCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddGlobalTrustedSenderCompleted(this, new AddGlobalTrustedSenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteGlobalTrustedSender", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteGlobalTrustedSender(string authUsername, string authPassword, string addressOrDomain)
		{
			object[] results = this.Invoke("DeleteGlobalTrustedSender", new object[] {
                    authUsername,
                    authPassword,
                    addressOrDomain});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteGlobalTrustedSender(string authUsername, string authPassword, string addressOrDomain, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteGlobalTrustedSender", new object[] {
                    authUsername,
                    authPassword,
                    addressOrDomain}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteGlobalTrustedSender(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteGlobalTrustedSenderAsync(string authUsername, string authPassword, string addressOrDomain)
		{
			this.DeleteGlobalTrustedSenderAsync(authUsername, authPassword, addressOrDomain, null);
		}

		/// <remarks/>
		public void DeleteGlobalTrustedSenderAsync(string authUsername, string authPassword, string addressOrDomain, object userState)
		{
			if ((this.DeleteGlobalTrustedSenderOperationCompleted == null))
			{
				this.DeleteGlobalTrustedSenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGlobalTrustedSenderOperationCompleted);
			}
			this.InvokeAsync("DeleteGlobalTrustedSender", new object[] {
                    authUsername,
                    authPassword,
                    addressOrDomain}, this.DeleteGlobalTrustedSenderOperationCompleted, userState);
		}

		private void OnDeleteGlobalTrustedSenderOperationCompleted(object arg)
		{
			if ((this.DeleteGlobalTrustedSenderCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteGlobalTrustedSenderCompleted(this, new DeleteGlobalTrustedSenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteGreylistingFilter", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteGreylistingFilter(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string countryCode)
		{
			object[] results = this.Invoke("DeleteGreylistingFilter", new object[] {
                    authUsername,
                    authPassword,
                    filterType,
                    ipRangeStart,
                    ipRangeEnd,
                    ipAddress,
                    countryCode});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteGreylistingFilter(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string countryCode, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteGreylistingFilter", new object[] {
                    authUsername,
                    authPassword,
                    filterType,
                    ipRangeStart,
                    ipRangeEnd,
                    ipAddress,
                    countryCode}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteGreylistingFilter(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteGreylistingFilterAsync(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string countryCode)
		{
			this.DeleteGreylistingFilterAsync(authUsername, authPassword, filterType, ipRangeStart, ipRangeEnd, ipAddress, countryCode, null);
		}

		/// <remarks/>
		public void DeleteGreylistingFilterAsync(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string countryCode, object userState)
		{
			if ((this.DeleteGreylistingFilterOperationCompleted == null))
			{
				this.DeleteGreylistingFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGreylistingFilterOperationCompleted);
			}
			this.InvokeAsync("DeleteGreylistingFilter", new object[] {
                    authUsername,
                    authPassword,
                    filterType,
                    ipRangeStart,
                    ipRangeEnd,
                    ipAddress,
                    countryCode}, this.DeleteGreylistingFilterOperationCompleted, userState);
		}

		private void OnDeleteGreylistingFilterOperationCompleted(object arg)
		{
			if ((this.DeleteGreylistingFilterCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteGreylistingFilterCompleted(this, new DeleteGreylistingFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWhitelistEntries", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public WhitelistListResult GetWhitelistEntries(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetWhitelistEntries", new object[] {
                    authUsername,
                    authPassword});
			return ((WhitelistListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetWhitelistEntries(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetWhitelistEntries", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public WhitelistListResult EndGetWhitelistEntries(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((WhitelistListResult)(results[0]));
		}

		/// <remarks/>
		public void GetWhitelistEntriesAsync(string authUsername, string authPassword)
		{
			this.GetWhitelistEntriesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetWhitelistEntriesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetWhitelistEntriesOperationCompleted == null))
			{
				this.GetWhitelistEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWhitelistEntriesOperationCompleted);
			}
			this.InvokeAsync("GetWhitelistEntries", new object[] {
                    authUsername,
                    authPassword}, this.GetWhitelistEntriesOperationCompleted, userState);
		}

		private void OnGetWhitelistEntriesOperationCompleted(object arg)
		{
			if ((this.GetWhitelistEntriesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetWhitelistEntriesCompleted(this, new GetWhitelistEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBlacklistEntries", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public BlacklistListResult GetBlacklistEntries(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetBlacklistEntries", new object[] {
                    authUsername,
                    authPassword});
			return ((BlacklistListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetBlacklistEntries(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetBlacklistEntries", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public BlacklistListResult EndGetBlacklistEntries(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((BlacklistListResult)(results[0]));
		}

		/// <remarks/>
		public void GetBlacklistEntriesAsync(string authUsername, string authPassword)
		{
			this.GetBlacklistEntriesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetBlacklistEntriesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetBlacklistEntriesOperationCompleted == null))
			{
				this.GetBlacklistEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlacklistEntriesOperationCompleted);
			}
			this.InvokeAsync("GetBlacklistEntries", new object[] {
                    authUsername,
                    authPassword}, this.GetBlacklistEntriesOperationCompleted, userState);
		}

		private void OnGetBlacklistEntriesOperationCompleted(object arg)
		{
			if ((this.GetBlacklistEntriesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetBlacklistEntriesCompleted(this, new GetBlacklistEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBlacklistEntry", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetBlacklistEntry(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool blacklistSMTP, bool blacklistPOP, bool blacklistIMAP, string description)
		{
			object[] results = this.Invoke("SetBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    blacklistSMTP,
                    blacklistPOP,
                    blacklistIMAP,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetBlacklistEntry(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool blacklistSMTP, bool blacklistPOP, bool blacklistIMAP, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    blacklistSMTP,
                    blacklistPOP,
                    blacklistIMAP,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetBlacklistEntry(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetBlacklistEntryAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool blacklistSMTP, bool blacklistPOP, bool blacklistIMAP, string description)
		{
			this.SetBlacklistEntryAsync(authUsername, authPassword, ipAddress, ipRangeStart, ipRangeEnd, blacklistSMTP, blacklistPOP, blacklistIMAP, description, null);
		}

		/// <remarks/>
		public void SetBlacklistEntryAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool blacklistSMTP, bool blacklistPOP, bool blacklistIMAP, string description, object userState)
		{
			if ((this.SetBlacklistEntryOperationCompleted == null))
			{
				this.SetBlacklistEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBlacklistEntryOperationCompleted);
			}
			this.InvokeAsync("SetBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    blacklistSMTP,
                    blacklistPOP,
                    blacklistIMAP,
                    description}, this.SetBlacklistEntryOperationCompleted, userState);
		}

		private void OnSetBlacklistEntryOperationCompleted(object arg)
		{
			if ((this.SetBlacklistEntryCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetBlacklistEntryCompleted(this, new SetBlacklistEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetWhitelistEntry", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetWhitelistEntry(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool whitelistSMTP, bool whitelistPOP, bool whitelistIMAP, string description)
		{
			object[] results = this.Invoke("SetWhitelistEntry", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    whitelistSMTP,
                    whitelistPOP,
                    whitelistIMAP,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetWhitelistEntry(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool whitelistSMTP, bool whitelistPOP, bool whitelistIMAP, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetWhitelistEntry", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    whitelistSMTP,
                    whitelistPOP,
                    whitelistIMAP,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetWhitelistEntry(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetWhitelistEntryAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool whitelistSMTP, bool whitelistPOP, bool whitelistIMAP, string description)
		{
			this.SetWhitelistEntryAsync(authUsername, authPassword, ipAddress, ipRangeStart, ipRangeEnd, whitelistSMTP, whitelistPOP, whitelistIMAP, description, null);
		}

		/// <remarks/>
		public void SetWhitelistEntryAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, bool whitelistSMTP, bool whitelistPOP, bool whitelistIMAP, string description, object userState)
		{
			if ((this.SetWhitelistEntryOperationCompleted == null))
			{
				this.SetWhitelistEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWhitelistEntryOperationCompleted);
			}
			this.InvokeAsync("SetWhitelistEntry", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    whitelistSMTP,
                    whitelistPOP,
                    whitelistIMAP,
                    description}, this.SetWhitelistEntryOperationCompleted, userState);
		}

		private void OnSetWhitelistEntryOperationCompleted(object arg)
		{
			if ((this.SetWhitelistEntryCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetWhitelistEntryCompleted(this, new SetWhitelistEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddGreylistingFilter", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddGreylistingFilter(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string description, string countryCode)
		{
			object[] results = this.Invoke("AddGreylistingFilter", new object[] {
                    authUsername,
                    authPassword,
                    filterType,
                    ipRangeStart,
                    ipRangeEnd,
                    ipAddress,
                    description,
                    countryCode});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddGreylistingFilter(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string description, string countryCode, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddGreylistingFilter", new object[] {
                    authUsername,
                    authPassword,
                    filterType,
                    ipRangeStart,
                    ipRangeEnd,
                    ipAddress,
                    description,
                    countryCode}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddGreylistingFilter(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddGreylistingFilterAsync(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string description, string countryCode)
		{
			this.AddGreylistingFilterAsync(authUsername, authPassword, filterType, ipRangeStart, ipRangeEnd, ipAddress, description, countryCode, null);
		}

		/// <remarks/>
		public void AddGreylistingFilterAsync(string authUsername, string authPassword, string filterType, string ipRangeStart, string ipRangeEnd, string ipAddress, string description, string countryCode, object userState)
		{
			if ((this.AddGreylistingFilterOperationCompleted == null))
			{
				this.AddGreylistingFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGreylistingFilterOperationCompleted);
			}
			this.InvokeAsync("AddGreylistingFilter", new object[] {
                    authUsername,
                    authPassword,
                    filterType,
                    ipRangeStart,
                    ipRangeEnd,
                    ipAddress,
                    description,
                    countryCode}, this.AddGreylistingFilterOperationCompleted, userState);
		}

		private void OnAddGreylistingFilterOperationCompleted(object arg)
		{
			if ((this.AddGreylistingFilterCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddGreylistingFilterCompleted(this, new AddGreylistingFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSmtpAuthenticationBypass", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSmtpAuthenticationBypass(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, string description)
		{
			object[] results = this.Invoke("AddSmtpAuthenticationBypass", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    description});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSmtpAuthenticationBypass(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, string description, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSmtpAuthenticationBypass", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    description}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSmtpAuthenticationBypass(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSmtpAuthenticationBypassAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, string description)
		{
			this.AddSmtpAuthenticationBypassAsync(authUsername, authPassword, ipAddress, ipRangeStart, ipRangeEnd, description, null);
		}

		/// <remarks/>
		public void AddSmtpAuthenticationBypassAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, string description, object userState)
		{
			if ((this.AddSmtpAuthenticationBypassOperationCompleted == null))
			{
				this.AddSmtpAuthenticationBypassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSmtpAuthenticationBypassOperationCompleted);
			}
			this.InvokeAsync("AddSmtpAuthenticationBypass", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd,
                    description}, this.AddSmtpAuthenticationBypassOperationCompleted, userState);
		}

		private void OnAddSmtpAuthenticationBypassOperationCompleted(object arg)
		{
			if ((this.AddSmtpAuthenticationBypassCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSmtpAuthenticationBypassCompleted(this, new AddSmtpAuthenticationBypassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSmtpAuthenticationBypass", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteSmtpAuthenticationBypass(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd)
		{
			object[] results = this.Invoke("DeleteSmtpAuthenticationBypass", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteSmtpAuthenticationBypass(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteSmtpAuthenticationBypass", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteSmtpAuthenticationBypass(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteSmtpAuthenticationBypassAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd)
		{
			this.DeleteSmtpAuthenticationBypassAsync(authUsername, authPassword, ipAddress, ipRangeStart, ipRangeEnd, null);
		}

		/// <remarks/>
		public void DeleteSmtpAuthenticationBypassAsync(string authUsername, string authPassword, string ipAddress, string ipRangeStart, string ipRangeEnd, object userState)
		{
			if ((this.DeleteSmtpAuthenticationBypassOperationCompleted == null))
			{
				this.DeleteSmtpAuthenticationBypassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSmtpAuthenticationBypassOperationCompleted);
			}
			this.InvokeAsync("DeleteSmtpAuthenticationBypass", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress,
                    ipRangeStart,
                    ipRangeEnd}, this.DeleteSmtpAuthenticationBypassOperationCompleted, userState);
		}

		private void OnDeleteSmtpAuthenticationBypassOperationCompleted(object arg)
		{
			if ((this.DeleteSmtpAuthenticationBypassCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteSmtpAuthenticationBypassCompleted(this, new DeleteSmtpAuthenticationBypassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSmtpAuthenticationBypasses", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SMTPAuthBypassListResult GetSmtpAuthenticationBypasses(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("GetSmtpAuthenticationBypasses", new object[] {
                    authUsername,
                    authPassword});
			return ((SMTPAuthBypassListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSmtpAuthenticationBypasses(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSmtpAuthenticationBypasses", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public SMTPAuthBypassListResult EndGetSmtpAuthenticationBypasses(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SMTPAuthBypassListResult)(results[0]));
		}

		/// <remarks/>
		public void GetSmtpAuthenticationBypassesAsync(string authUsername, string authPassword)
		{
			this.GetSmtpAuthenticationBypassesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void GetSmtpAuthenticationBypassesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.GetSmtpAuthenticationBypassesOperationCompleted == null))
			{
				this.GetSmtpAuthenticationBypassesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmtpAuthenticationBypassesOperationCompleted);
			}
			this.InvokeAsync("GetSmtpAuthenticationBypasses", new object[] {
                    authUsername,
                    authPassword}, this.GetSmtpAuthenticationBypassesOperationCompleted, userState);
		}

		private void OnGetSmtpAuthenticationBypassesOperationCompleted(object arg)
		{
			if ((this.GetSmtpAuthenticationBypassesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSmtpAuthenticationBypassesCompleted(this, new GetSmtpAuthenticationBypassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddGateway(string AuthUserName, string AuthPassword, string address, bool enabled)
		{
			object[] results = this.Invoke("AddGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    address,
                    enabled});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddGateway(string AuthUserName, string AuthPassword, string address, bool enabled, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    address,
                    enabled}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddGatewayAsync(string AuthUserName, string AuthPassword, string address, bool enabled)
		{
			this.AddGatewayAsync(AuthUserName, AuthPassword, address, enabled, null);
		}

		/// <remarks/>
		public void AddGatewayAsync(string AuthUserName, string AuthPassword, string address, bool enabled, object userState)
		{
			if ((this.AddGatewayOperationCompleted == null))
			{
				this.AddGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGatewayOperationCompleted);
			}
			this.InvokeAsync("AddGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    address,
                    enabled}, this.AddGatewayOperationCompleted, userState);
		}

		private void OnAddGatewayOperationCompleted(object arg)
		{
			if ((this.AddGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddGatewayCompleted(this, new AddGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSmarterMailGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSmarterMailGateway(string AuthUserName, string AuthPassword, string address, bool enabled, string smUrl, string smUserName, string smPassword)
		{
			object[] results = this.Invoke("AddSmarterMailGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    address,
                    enabled,
                    smUrl,
                    smUserName,
                    smPassword});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSmarterMailGateway(string AuthUserName, string AuthPassword, string address, bool enabled, string smUrl, string smUserName, string smPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSmarterMailGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    address,
                    enabled,
                    smUrl,
                    smUserName,
                    smPassword}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSmarterMailGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSmarterMailGatewayAsync(string AuthUserName, string AuthPassword, string address, bool enabled, string smUrl, string smUserName, string smPassword)
		{
			this.AddSmarterMailGatewayAsync(AuthUserName, AuthPassword, address, enabled, smUrl, smUserName, smPassword, null);
		}

		/// <remarks/>
		public void AddSmarterMailGatewayAsync(string AuthUserName, string AuthPassword, string address, bool enabled, string smUrl, string smUserName, string smPassword, object userState)
		{
			if ((this.AddSmarterMailGatewayOperationCompleted == null))
			{
				this.AddSmarterMailGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSmarterMailGatewayOperationCompleted);
			}
			this.InvokeAsync("AddSmarterMailGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    address,
                    enabled,
                    smUrl,
                    smUserName,
                    smPassword}, this.AddSmarterMailGatewayOperationCompleted, userState);
		}

		private void OnAddSmarterMailGatewayOperationCompleted(object arg)
		{
			if ((this.AddSmarterMailGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSmarterMailGatewayCompleted(this, new AddSmarterMailGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemoveGateway(string AuthUserName, string AuthPassword, string guid)
		{
			object[] results = this.Invoke("RemoveGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveGateway(string AuthUserName, string AuthPassword, string guid, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemoveGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemoveGatewayAsync(string AuthUserName, string AuthPassword, string guid)
		{
			this.RemoveGatewayAsync(AuthUserName, AuthPassword, guid, null);
		}

		/// <remarks/>
		public void RemoveGatewayAsync(string AuthUserName, string AuthPassword, string guid, object userState)
		{
			if ((this.RemoveGatewayOperationCompleted == null))
			{
				this.RemoveGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveGatewayOperationCompleted);
			}
			this.InvokeAsync("RemoveGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid}, this.RemoveGatewayOperationCompleted, userState);
		}

		private void OnRemoveGatewayOperationCompleted(object arg)
		{
			if ((this.RemoveGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveGatewayCompleted(this, new RemoveGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateGateway", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult UpdateGateway(string AuthUserName, string AuthPassword, string guid, string address, bool enabled, bool isSmarterMailServer, string smUrl, string smUserName, string smPassword)
		{
			object[] results = this.Invoke("UpdateGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid,
                    address,
                    enabled,
                    isSmarterMailServer,
                    smUrl,
                    smUserName,
                    smPassword});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateGateway(string AuthUserName, string AuthPassword, string guid, string address, bool enabled, bool isSmarterMailServer, string smUrl, string smUserName, string smPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid,
                    address,
                    enabled,
                    isSmarterMailServer,
                    smUrl,
                    smUserName,
                    smPassword}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndUpdateGateway(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void UpdateGatewayAsync(string AuthUserName, string AuthPassword, string guid, string address, bool enabled, bool isSmarterMailServer, string smUrl, string smUserName, string smPassword)
		{
			this.UpdateGatewayAsync(AuthUserName, AuthPassword, guid, address, enabled, isSmarterMailServer, smUrl, smUserName, smPassword, null);
		}

		/// <remarks/>
		public void UpdateGatewayAsync(string AuthUserName, string AuthPassword, string guid, string address, bool enabled, bool isSmarterMailServer, string smUrl, string smUserName, string smPassword, object userState)
		{
			if ((this.UpdateGatewayOperationCompleted == null))
			{
				this.UpdateGatewayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGatewayOperationCompleted);
			}
			this.InvokeAsync("UpdateGateway", new object[] {
                    AuthUserName,
                    AuthPassword,
                    guid,
                    address,
                    enabled,
                    isSmarterMailServer,
                    smUrl,
                    smUserName,
                    smPassword}, this.UpdateGatewayOperationCompleted, userState);
		}

		private void OnUpdateGatewayOperationCompleted(object arg)
		{
			if ((this.UpdateGatewayCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateGatewayCompleted(this, new UpdateGatewayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListSystemAdmins", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SystemAdminListResult ListSystemAdmins(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListSystemAdmins", new object[] {
                    authUsername,
                    authPassword});
			return ((SystemAdminListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListSystemAdmins(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListSystemAdmins", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public SystemAdminListResult EndListSystemAdmins(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SystemAdminListResult)(results[0]));
		}

		/// <remarks/>
		public void ListSystemAdminsAsync(string authUsername, string authPassword)
		{
			this.ListSystemAdminsAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListSystemAdminsAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListSystemAdminsOperationCompleted == null))
			{
				this.ListSystemAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSystemAdminsOperationCompleted);
			}
			this.InvokeAsync("ListSystemAdmins", new object[] {
                    authUsername,
                    authPassword}, this.ListSystemAdminsOperationCompleted, userState);
		}

		private void OnListSystemAdminsOperationCompleted(object arg)
		{
			if ((this.ListSystemAdminsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListSystemAdminsCompleted(this, new ListSystemAdminsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSystemAdminPassword", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult SetSystemAdminPassword(string authUsername, string authPassword, string systemAdminUsername, string newPassword)
		{
			object[] results = this.Invoke("SetSystemAdminPassword", new object[] {
                    authUsername,
                    authPassword,
                    systemAdminUsername,
                    newPassword});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginSetSystemAdminPassword(string authUsername, string authPassword, string systemAdminUsername, string newPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("SetSystemAdminPassword", new object[] {
                    authUsername,
                    authPassword,
                    systemAdminUsername,
                    newPassword}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndSetSystemAdminPassword(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void SetSystemAdminPasswordAsync(string authUsername, string authPassword, string systemAdminUsername, string newPassword)
		{
			this.SetSystemAdminPasswordAsync(authUsername, authPassword, systemAdminUsername, newPassword, null);
		}

		/// <remarks/>
		public void SetSystemAdminPasswordAsync(string authUsername, string authPassword, string systemAdminUsername, string newPassword, object userState)
		{
			if ((this.SetSystemAdminPasswordOperationCompleted == null))
			{
				this.SetSystemAdminPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemAdminPasswordOperationCompleted);
			}
			this.InvokeAsync("SetSystemAdminPassword", new object[] {
                    authUsername,
                    authPassword,
                    systemAdminUsername,
                    newPassword}, this.SetSystemAdminPasswordOperationCompleted, userState);
		}

		private void OnSetSystemAdminPasswordOperationCompleted(object arg)
		{
			if ((this.SetSystemAdminPasswordCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.SetSystemAdminPasswordCompleted(this, new SetSystemAdminPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSystemAdmin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteSystemAdmin(string authUsername, string authPassword, string systemAdminUsername)
		{
			object[] results = this.Invoke("DeleteSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    systemAdminUsername});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteSystemAdmin(string authUsername, string authPassword, string systemAdminUsername, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    systemAdminUsername}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteSystemAdmin(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteSystemAdminAsync(string authUsername, string authPassword, string systemAdminUsername)
		{
			this.DeleteSystemAdminAsync(authUsername, authPassword, systemAdminUsername, null);
		}

		/// <remarks/>
		public void DeleteSystemAdminAsync(string authUsername, string authPassword, string systemAdminUsername, object userState)
		{
			if ((this.DeleteSystemAdminOperationCompleted == null))
			{
				this.DeleteSystemAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSystemAdminOperationCompleted);
			}
			this.InvokeAsync("DeleteSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    systemAdminUsername}, this.DeleteSystemAdminOperationCompleted, userState);
		}

		private void OnDeleteSystemAdminOperationCompleted(object arg)
		{
			if ((this.DeleteSystemAdminCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteSystemAdminCompleted(this, new DeleteSystemAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSystemAdmin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddSystemAdmin(string authUsername, string authPassword, string newAdminUsername, string newAdminPassword, string newAdminDescription)
		{
			object[] results = this.Invoke("AddSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    newAdminUsername,
                    newAdminPassword,
                    newAdminDescription});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSystemAdmin(string authUsername, string authPassword, string newAdminUsername, string newAdminPassword, string newAdminDescription, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    newAdminUsername,
                    newAdminPassword,
                    newAdminDescription}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddSystemAdmin(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddSystemAdminAsync(string authUsername, string authPassword, string newAdminUsername, string newAdminPassword, string newAdminDescription)
		{
			this.AddSystemAdminAsync(authUsername, authPassword, newAdminUsername, newAdminPassword, newAdminDescription, null);
		}

		/// <remarks/>
		public void AddSystemAdminAsync(string authUsername, string authPassword, string newAdminUsername, string newAdminPassword, string newAdminDescription, object userState)
		{
			if ((this.AddSystemAdminOperationCompleted == null))
			{
				this.AddSystemAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSystemAdminOperationCompleted);
			}
			this.InvokeAsync("AddSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    newAdminUsername,
                    newAdminPassword,
                    newAdminDescription}, this.AddSystemAdminOperationCompleted, userState);
		}

		private void OnAddSystemAdminOperationCompleted(object arg)
		{
			if ((this.AddSystemAdminCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSystemAdminCompleted(this, new AddSystemAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddIPRestrictionToSystemAdmin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddIPRestrictionToSystemAdmin(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange, string restrictionDescription)
		{
			object[] results = this.Invoke("AddIPRestrictionToSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    adminUsername,
                    ipAddressOrRange,
                    restrictionDescription});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddIPRestrictionToSystemAdmin(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange, string restrictionDescription, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddIPRestrictionToSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    adminUsername,
                    ipAddressOrRange,
                    restrictionDescription}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddIPRestrictionToSystemAdmin(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddIPRestrictionToSystemAdminAsync(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange, string restrictionDescription)
		{
			this.AddIPRestrictionToSystemAdminAsync(authUsername, authPassword, adminUsername, ipAddressOrRange, restrictionDescription, null);
		}

		/// <remarks/>
		public void AddIPRestrictionToSystemAdminAsync(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange, string restrictionDescription, object userState)
		{
			if ((this.AddIPRestrictionToSystemAdminOperationCompleted == null))
			{
				this.AddIPRestrictionToSystemAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIPRestrictionToSystemAdminOperationCompleted);
			}
			this.InvokeAsync("AddIPRestrictionToSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    adminUsername,
                    ipAddressOrRange,
                    restrictionDescription}, this.AddIPRestrictionToSystemAdminOperationCompleted, userState);
		}

		private void OnAddIPRestrictionToSystemAdminOperationCompleted(object arg)
		{
			if ((this.AddIPRestrictionToSystemAdminCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddIPRestrictionToSystemAdminCompleted(this, new AddIPRestrictionToSystemAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveIPRestrictionFromSystemAdmin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult RemoveIPRestrictionFromSystemAdmin(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange)
		{
			object[] results = this.Invoke("RemoveIPRestrictionFromSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    adminUsername,
                    ipAddressOrRange});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRemoveIPRestrictionFromSystemAdmin(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RemoveIPRestrictionFromSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    adminUsername,
                    ipAddressOrRange}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndRemoveIPRestrictionFromSystemAdmin(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void RemoveIPRestrictionFromSystemAdminAsync(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange)
		{
			this.RemoveIPRestrictionFromSystemAdminAsync(authUsername, authPassword, adminUsername, ipAddressOrRange, null);
		}

		/// <remarks/>
		public void RemoveIPRestrictionFromSystemAdminAsync(string authUsername, string authPassword, string adminUsername, string ipAddressOrRange, object userState)
		{
			if ((this.RemoveIPRestrictionFromSystemAdminOperationCompleted == null))
			{
				this.RemoveIPRestrictionFromSystemAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveIPRestrictionFromSystemAdminOperationCompleted);
			}
			this.InvokeAsync("RemoveIPRestrictionFromSystemAdmin", new object[] {
                    authUsername,
                    authPassword,
                    adminUsername,
                    ipAddressOrRange}, this.RemoveIPRestrictionFromSystemAdminOperationCompleted, userState);
		}

		private void OnRemoveIPRestrictionFromSystemAdminOperationCompleted(object arg)
		{
			if ((this.RemoveIPRestrictionFromSystemAdminCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RemoveIPRestrictionFromSystemAdminCompleted(this, new RemoveIPRestrictionFromSystemAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddHostname", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddHostname(string authUsername, string authPassword, string hostname, string ipAddress)
		{
			object[] results = this.Invoke("AddHostname", new object[] {
                    authUsername,
                    authPassword,
                    hostname,
                    ipAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddHostname(string authUsername, string authPassword, string hostname, string ipAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddHostname", new object[] {
                    authUsername,
                    authPassword,
                    hostname,
                    ipAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddHostname(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddHostnameAsync(string authUsername, string authPassword, string hostname, string ipAddress)
		{
			this.AddHostnameAsync(authUsername, authPassword, hostname, ipAddress, null);
		}

		/// <remarks/>
		public void AddHostnameAsync(string authUsername, string authPassword, string hostname, string ipAddress, object userState)
		{
			if ((this.AddHostnameOperationCompleted == null))
			{
				this.AddHostnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostnameOperationCompleted);
			}
			this.InvokeAsync("AddHostname", new object[] {
                    authUsername,
                    authPassword,
                    hostname,
                    ipAddress}, this.AddHostnameOperationCompleted, userState);
		}

		private void OnAddHostnameOperationCompleted(object arg)
		{
			if ((this.AddHostnameCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddHostnameCompleted(this, new AddHostnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteHostname", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteHostname(string authUsername, string authPassword, string ipAddress)
		{
			object[] results = this.Invoke("DeleteHostname", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteHostname(string authUsername, string authPassword, string ipAddress, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteHostname", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteHostname(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteHostnameAsync(string authUsername, string authPassword, string ipAddress)
		{
			this.DeleteHostnameAsync(authUsername, authPassword, ipAddress, null);
		}

		/// <remarks/>
		public void DeleteHostnameAsync(string authUsername, string authPassword, string ipAddress, object userState)
		{
			if ((this.DeleteHostnameOperationCompleted == null))
			{
				this.DeleteHostnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHostnameOperationCompleted);
			}
			this.InvokeAsync("DeleteHostname", new object[] {
                    authUsername,
                    authPassword,
                    ipAddress}, this.DeleteHostnameOperationCompleted, userState);
		}

		private void OnDeleteHostnameOperationCompleted(object arg)
		{
			if ((this.DeleteHostnameCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteHostnameCompleted(this, new DeleteHostnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListHostnames", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public HostnameListResult ListHostnames(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListHostnames", new object[] {
                    authUsername,
                    authPassword});
			return ((HostnameListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListHostnames(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListHostnames", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public HostnameListResult EndListHostnames(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((HostnameListResult)(results[0]));
		}

		/// <remarks/>
		public void ListHostnamesAsync(string authUsername, string authPassword)
		{
			this.ListHostnamesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListHostnamesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListHostnamesOperationCompleted == null))
			{
				this.ListHostnamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListHostnamesOperationCompleted);
			}
			this.InvokeAsync("ListHostnames", new object[] {
                    authUsername,
                    authPassword}, this.ListHostnamesOperationCompleted, userState);
		}

		private void OnListHostnamesOperationCompleted(object arg)
		{
			if ((this.ListHostnamesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListHostnamesCompleted(this, new ListHostnamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFolderAutocleanRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddFolderAutocleanRule(string authUsername, string authPassword, string folder, bool enableRule, string type, int sizeBeforeAutoClean, int sizeAfterClean, int mailAgeInDays)
		{
			object[] results = this.Invoke("AddFolderAutocleanRule", new object[] {
                    authUsername,
                    authPassword,
                    folder,
                    enableRule,
                    type,
                    sizeBeforeAutoClean,
                    sizeAfterClean,
                    mailAgeInDays});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddFolderAutocleanRule(string authUsername, string authPassword, string folder, bool enableRule, string type, int sizeBeforeAutoClean, int sizeAfterClean, int mailAgeInDays, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddFolderAutocleanRule", new object[] {
                    authUsername,
                    authPassword,
                    folder,
                    enableRule,
                    type,
                    sizeBeforeAutoClean,
                    sizeAfterClean,
                    mailAgeInDays}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddFolderAutocleanRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddFolderAutocleanRuleAsync(string authUsername, string authPassword, string folder, bool enableRule, string type, int sizeBeforeAutoClean, int sizeAfterClean, int mailAgeInDays)
		{
			this.AddFolderAutocleanRuleAsync(authUsername, authPassword, folder, enableRule, type, sizeBeforeAutoClean, sizeAfterClean, mailAgeInDays, null);
		}

		/// <remarks/>
		public void AddFolderAutocleanRuleAsync(string authUsername, string authPassword, string folder, bool enableRule, string type, int sizeBeforeAutoClean, int sizeAfterClean, int mailAgeInDays, object userState)
		{
			if ((this.AddFolderAutocleanRuleOperationCompleted == null))
			{
				this.AddFolderAutocleanRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFolderAutocleanRuleOperationCompleted);
			}
			this.InvokeAsync("AddFolderAutocleanRule", new object[] {
                    authUsername,
                    authPassword,
                    folder,
                    enableRule,
                    type,
                    sizeBeforeAutoClean,
                    sizeAfterClean,
                    mailAgeInDays}, this.AddFolderAutocleanRuleOperationCompleted, userState);
		}

		private void OnAddFolderAutocleanRuleOperationCompleted(object arg)
		{
			if ((this.AddFolderAutocleanRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddFolderAutocleanRuleCompleted(this, new AddFolderAutocleanRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFolderAutoCleanRule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteFolderAutoCleanRule(string authUsername, string authPassword, string id)
		{
			object[] results = this.Invoke("DeleteFolderAutoCleanRule", new object[] {
                    authUsername,
                    authPassword,
                    id});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteFolderAutoCleanRule(string authUsername, string authPassword, string id, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteFolderAutoCleanRule", new object[] {
                    authUsername,
                    authPassword,
                    id}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteFolderAutoCleanRule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteFolderAutoCleanRuleAsync(string authUsername, string authPassword, string id)
		{
			this.DeleteFolderAutoCleanRuleAsync(authUsername, authPassword, id, null);
		}

		/// <remarks/>
		public void DeleteFolderAutoCleanRuleAsync(string authUsername, string authPassword, string id, object userState)
		{
			if ((this.DeleteFolderAutoCleanRuleOperationCompleted == null))
			{
				this.DeleteFolderAutoCleanRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderAutoCleanRuleOperationCompleted);
			}
			this.InvokeAsync("DeleteFolderAutoCleanRule", new object[] {
                    authUsername,
                    authPassword,
                    id}, this.DeleteFolderAutoCleanRuleOperationCompleted, userState);
		}

		private void OnDeleteFolderAutoCleanRuleOperationCompleted(object arg)
		{
			if ((this.DeleteFolderAutoCleanRuleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteFolderAutoCleanRuleCompleted(this, new DeleteFolderAutoCleanRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListFolderAutoCleanRules", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public FolderAutoCleanRuleListResult ListFolderAutoCleanRules(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListFolderAutoCleanRules", new object[] {
                    authUsername,
                    authPassword});
			return ((FolderAutoCleanRuleListResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListFolderAutoCleanRules(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListFolderAutoCleanRules", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public FolderAutoCleanRuleListResult EndListFolderAutoCleanRules(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((FolderAutoCleanRuleListResult)(results[0]));
		}

		/// <remarks/>
		public void ListFolderAutoCleanRulesAsync(string authUsername, string authPassword)
		{
			this.ListFolderAutoCleanRulesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListFolderAutoCleanRulesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListFolderAutoCleanRulesOperationCompleted == null))
			{
				this.ListFolderAutoCleanRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListFolderAutoCleanRulesOperationCompleted);
			}
			this.InvokeAsync("ListFolderAutoCleanRules", new object[] {
                    authUsername,
                    authPassword}, this.ListFolderAutoCleanRulesOperationCompleted, userState);
		}

		private void OnListFolderAutoCleanRulesOperationCompleted(object arg)
		{
			if ((this.ListFolderAutoCleanRulesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListFolderAutoCleanRulesCompleted(this, new ListFolderAutoCleanRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddForwardingBlacklistEntry", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult AddForwardingBlacklistEntry(string authUsername, string authPassword, string domainName)
		{
			object[] results = this.Invoke("AddForwardingBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    domainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddForwardingBlacklistEntry(string authUsername, string authPassword, string domainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddForwardingBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    domainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndAddForwardingBlacklistEntry(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void AddForwardingBlacklistEntryAsync(string authUsername, string authPassword, string domainName)
		{
			this.AddForwardingBlacklistEntryAsync(authUsername, authPassword, domainName, null);
		}

		/// <remarks/>
		public void AddForwardingBlacklistEntryAsync(string authUsername, string authPassword, string domainName, object userState)
		{
			if ((this.AddForwardingBlacklistEntryOperationCompleted == null))
			{
				this.AddForwardingBlacklistEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddForwardingBlacklistEntryOperationCompleted);
			}
			this.InvokeAsync("AddForwardingBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    domainName}, this.AddForwardingBlacklistEntryOperationCompleted, userState);
		}

		private void OnAddForwardingBlacklistEntryOperationCompleted(object arg)
		{
			if ((this.AddForwardingBlacklistEntryCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddForwardingBlacklistEntryCompleted(this, new AddForwardingBlacklistEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteForwardingBlacklistEntry", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public GenericResult DeleteForwardingBlacklistEntry(string authUsername, string authPassword, string domainName)
		{
			object[] results = this.Invoke("DeleteForwardingBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    domainName});
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteForwardingBlacklistEntry(string authUsername, string authPassword, string domainName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteForwardingBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    domainName}, callback, asyncState);
		}

		/// <remarks/>
		public GenericResult EndDeleteForwardingBlacklistEntry(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((GenericResult)(results[0]));
		}

		/// <remarks/>
		public void DeleteForwardingBlacklistEntryAsync(string authUsername, string authPassword, string domainName)
		{
			this.DeleteForwardingBlacklistEntryAsync(authUsername, authPassword, domainName, null);
		}

		/// <remarks/>
		public void DeleteForwardingBlacklistEntryAsync(string authUsername, string authPassword, string domainName, object userState)
		{
			if ((this.DeleteForwardingBlacklistEntryOperationCompleted == null))
			{
				this.DeleteForwardingBlacklistEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteForwardingBlacklistEntryOperationCompleted);
			}
			this.InvokeAsync("DeleteForwardingBlacklistEntry", new object[] {
                    authUsername,
                    authPassword,
                    domainName}, this.DeleteForwardingBlacklistEntryOperationCompleted, userState);
		}

		private void OnDeleteForwardingBlacklistEntryOperationCompleted(object arg)
		{
			if ((this.DeleteForwardingBlacklistEntryCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteForwardingBlacklistEntryCompleted(this, new DeleteForwardingBlacklistEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListForwardingBlacklistEntries", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ForwardingBlacklistRuleResult ListForwardingBlacklistEntries(string authUsername, string authPassword)
		{
			object[] results = this.Invoke("ListForwardingBlacklistEntries", new object[] {
                    authUsername,
                    authPassword});
			return ((ForwardingBlacklistRuleResult)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginListForwardingBlacklistEntries(string authUsername, string authPassword, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("ListForwardingBlacklistEntries", new object[] {
                    authUsername,
                    authPassword}, callback, asyncState);
		}

		/// <remarks/>
		public ForwardingBlacklistRuleResult EndListForwardingBlacklistEntries(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ForwardingBlacklistRuleResult)(results[0]));
		}

		/// <remarks/>
		public void ListForwardingBlacklistEntriesAsync(string authUsername, string authPassword)
		{
			this.ListForwardingBlacklistEntriesAsync(authUsername, authPassword, null);
		}

		/// <remarks/>
		public void ListForwardingBlacklistEntriesAsync(string authUsername, string authPassword, object userState)
		{
			if ((this.ListForwardingBlacklistEntriesOperationCompleted == null))
			{
				this.ListForwardingBlacklistEntriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListForwardingBlacklistEntriesOperationCompleted);
			}
			this.InvokeAsync("ListForwardingBlacklistEntries", new object[] {
                    authUsername,
                    authPassword}, this.ListForwardingBlacklistEntriesOperationCompleted, userState);
		}

		private void OnListForwardingBlacklistEntriesOperationCompleted(object arg)
		{
			if ((this.ListForwardingBlacklistEntriesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.ListForwardingBlacklistEntriesCompleted(this, new ListForwardingBlacklistEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class ForwardingBlacklistRuleResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] blacklistedDomainsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] BlacklistedDomains
		{
			get
			{
				return this.blacklistedDomainsField;
			}
			set
			{
				this.blacklistedDomainsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class FolderAutoCleanRuleResult
	{

		private bool enabledField;

		private string idField;

		private int sizeBeforeCleanInMBField;

		private int sizeAfterCleanInMBField;

		private int mailAgeInDaysField;

		private string typeField;

		/// <remarks/>
		public bool Enabled
		{
			get
			{
				return this.enabledField;
			}
			set
			{
				this.enabledField = value;
			}
		}

		/// <remarks/>
		public string ID
		{
			get
			{
				return this.idField;
			}
			set
			{
				this.idField = value;
			}
		}

		/// <remarks/>
		public int SizeBeforeCleanInMB
		{
			get
			{
				return this.sizeBeforeCleanInMBField;
			}
			set
			{
				this.sizeBeforeCleanInMBField = value;
			}
		}

		/// <remarks/>
		public int SizeAfterCleanInMB
		{
			get
			{
				return this.sizeAfterCleanInMBField;
			}
			set
			{
				this.sizeAfterCleanInMBField = value;
			}
		}

		/// <remarks/>
		public int MailAgeInDays
		{
			get
			{
				return this.mailAgeInDaysField;
			}
			set
			{
				this.mailAgeInDaysField = value;
			}
		}

		/// <remarks/>
		public string Type
		{
			get
			{
				return this.typeField;
			}
			set
			{
				this.typeField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class FolderAutoCleanRuleListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private FolderAutoCleanRuleResult[] rulesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public FolderAutoCleanRuleResult[] Rules
		{
			get
			{
				return this.rulesField;
			}
			set
			{
				this.rulesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class HostnameResult
	{

		private string iPAddressField;

		private string hostnameField;

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public string Hostname
		{
			get
			{
				return this.hostnameField;
			}
			set
			{
				this.hostnameField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class HostnameListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private HostnameResult[] hostnamesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public HostnameResult[] Hostnames
		{
			get
			{
				return this.hostnamesField;
			}
			set
			{
				this.hostnamesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SystemAdminResult
	{

		private string idField;

		private string usernameField;

		private bool isPrimaryAdminField;

		private bool restrictedByIpField;

		private System.DateTime dateCreatedField;

		private string descriptionField;

		/// <remarks/>
		public string ID
		{
			get
			{
				return this.idField;
			}
			set
			{
				this.idField = value;
			}
		}

		/// <remarks/>
		public string Username
		{
			get
			{
				return this.usernameField;
			}
			set
			{
				this.usernameField = value;
			}
		}

		/// <remarks/>
		public bool IsPrimaryAdmin
		{
			get
			{
				return this.isPrimaryAdminField;
			}
			set
			{
				this.isPrimaryAdminField = value;
			}
		}

		/// <remarks/>
		public bool RestrictedByIp
		{
			get
			{
				return this.restrictedByIpField;
			}
			set
			{
				this.restrictedByIpField = value;
			}
		}

		/// <remarks/>
		public System.DateTime DateCreated
		{
			get
			{
				return this.dateCreatedField;
			}
			set
			{
				this.dateCreatedField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SystemAdminListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private SystemAdminResult[] adminsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public SystemAdminResult[] Admins
		{
			get
			{
				return this.adminsField;
			}
			set
			{
				this.adminsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SMTPAuthBypassResult
	{

		private string iPAddressField;

		private string iPRangeStartField;

		private string iPRangeEndField;

		private string descriptionField;

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public string IPRangeStart
		{
			get
			{
				return this.iPRangeStartField;
			}
			set
			{
				this.iPRangeStartField = value;
			}
		}

		/// <remarks/>
		public string IPRangeEnd
		{
			get
			{
				return this.iPRangeEndField;
			}
			set
			{
				this.iPRangeEndField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SMTPAuthBypassListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private SMTPAuthBypassResult[] entriesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public SMTPAuthBypassResult[] Entries
		{
			get
			{
				return this.entriesField;
			}
			set
			{
				this.entriesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class BlacklistResult
	{

		private string iPAddressField;

		private string iPRangeStartField;

		private string iPRangeEndField;

		private string descriptionField;

		private bool pOPBlacklistedField;

		private bool iMAPBlacklistedField;

		private bool sMTPBlacklistedField;

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public string IPRangeStart
		{
			get
			{
				return this.iPRangeStartField;
			}
			set
			{
				this.iPRangeStartField = value;
			}
		}

		/// <remarks/>
		public string IPRangeEnd
		{
			get
			{
				return this.iPRangeEndField;
			}
			set
			{
				this.iPRangeEndField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		public bool POPBlacklisted
		{
			get
			{
				return this.pOPBlacklistedField;
			}
			set
			{
				this.pOPBlacklistedField = value;
			}
		}

		/// <remarks/>
		public bool IMAPBlacklisted
		{
			get
			{
				return this.iMAPBlacklistedField;
			}
			set
			{
				this.iMAPBlacklistedField = value;
			}
		}

		/// <remarks/>
		public bool SMTPBlacklisted
		{
			get
			{
				return this.sMTPBlacklistedField;
			}
			set
			{
				this.sMTPBlacklistedField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class BlacklistListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private BlacklistResult[] entriesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public BlacklistResult[] Entries
		{
			get
			{
				return this.entriesField;
			}
			set
			{
				this.entriesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class WhitelistResult
	{

		private string iPAddressField;

		private string iPRangeStartField;

		private string iPRangeEndField;

		private string descriptionField;

		private bool pOPWhitelistedField;

		private bool iMAPWhitelistedField;

		private bool sMTPWhitelistedField;

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public string IPRangeStart
		{
			get
			{
				return this.iPRangeStartField;
			}
			set
			{
				this.iPRangeStartField = value;
			}
		}

		/// <remarks/>
		public string IPRangeEnd
		{
			get
			{
				return this.iPRangeEndField;
			}
			set
			{
				this.iPRangeEndField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		public bool POPWhitelisted
		{
			get
			{
				return this.pOPWhitelistedField;
			}
			set
			{
				this.pOPWhitelistedField = value;
			}
		}

		/// <remarks/>
		public bool IMAPWhitelisted
		{
			get
			{
				return this.iMAPWhitelistedField;
			}
			set
			{
				this.iMAPWhitelistedField = value;
			}
		}

		/// <remarks/>
		public bool SMTPWhitelisted
		{
			get
			{
				return this.sMTPWhitelistedField;
			}
			set
			{
				this.sMTPWhitelistedField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class WhitelistListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private WhitelistResult[] entriesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public WhitelistResult[] Entries
		{
			get
			{
				return this.entriesField;
			}
			set
			{
				this.entriesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class TrustedSenderListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] trustedSendersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] TrustedSenders
		{
			get
			{
				return this.trustedSendersField;
			}
			set
			{
				this.trustedSendersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class GatewayResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string guidField;

		private string gatewayAddressField;

		private bool enabledField;

		private bool isSmarterMailServerField;

		private string smUrlField;

		private string smUserNameField;

		private string smPasswordField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string guid
		{
			get
			{
				return this.guidField;
			}
			set
			{
				this.guidField = value;
			}
		}

		/// <remarks/>
		public string gatewayAddress
		{
			get
			{
				return this.gatewayAddressField;
			}
			set
			{
				this.gatewayAddressField = value;
			}
		}

		/// <remarks/>
		public bool enabled
		{
			get
			{
				return this.enabledField;
			}
			set
			{
				this.enabledField = value;
			}
		}

		/// <remarks/>
		public bool isSmarterMailServer
		{
			get
			{
				return this.isSmarterMailServerField;
			}
			set
			{
				this.isSmarterMailServerField = value;
			}
		}

		/// <remarks/>
		public string smUrl
		{
			get
			{
				return this.smUrlField;
			}
			set
			{
				this.smUrlField = value;
			}
		}

		/// <remarks/>
		public string smUserName
		{
			get
			{
				return this.smUserNameField;
			}
			set
			{
				this.smUserNameField = value;
			}
		}

		/// <remarks/>
		public string smPassword
		{
			get
			{
				return this.smPasswordField;
			}
			set
			{
				this.smPasswordField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class GatewayListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private GatewayResult[] gatewaysField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public GatewayResult[] gateways
		{
			get
			{
				return this.gatewaysField;
			}
			set
			{
				this.gatewaysField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class GreylistingFilterResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string filterTypeField;

		private string iPRangeStartField;

		private string iPRangeEndField;

		private string iPAddressField;

		private string descriptionField;

		private string countryCodeField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string FilterType
		{
			get
			{
				return this.filterTypeField;
			}
			set
			{
				this.filterTypeField = value;
			}
		}

		/// <remarks/>
		public string IPRangeStart
		{
			get
			{
				return this.iPRangeStartField;
			}
			set
			{
				this.iPRangeStartField = value;
			}
		}

		/// <remarks/>
		public string IPRangeEnd
		{
			get
			{
				return this.iPRangeEndField;
			}
			set
			{
				this.iPRangeEndField = value;
			}
		}

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		public string CountryCode
		{
			get
			{
				return this.countryCodeField;
			}
			set
			{
				this.countryCodeField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class GreylistingFilterListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private GreylistingFilterResult[] filtersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public GreylistingFilterResult[] Filters
		{
			get
			{
				return this.filtersField;
			}
			set
			{
				this.filtersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class MessageCountResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private int messageCountField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public int messageCount
		{
			get
			{
				return this.messageCountField;
			}
			set
			{
				this.messageCountField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class RequestSettingsResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string[] keyValuePairsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string[] KeyValuePairs
		{
			get
			{
				return this.keyValuePairsField;
			}
			set
			{
				this.keyValuePairsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SpamAssassinServerResult
	{

		private string nameField;

		private string iPAddressField;

		private int portField;

		private int consecutiveFailuresField;

		private bool enabledField;

		private int totalConnectionsField;

		/// <remarks/>
		public string Name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public int Port
		{
			get
			{
				return this.portField;
			}
			set
			{
				this.portField = value;
			}
		}

		/// <remarks/>
		public int ConsecutiveFailures
		{
			get
			{
				return this.consecutiveFailuresField;
			}
			set
			{
				this.consecutiveFailuresField = value;
			}
		}

		/// <remarks/>
		public bool Enabled
		{
			get
			{
				return this.enabledField;
			}
			set
			{
				this.enabledField = value;
			}
		}

		/// <remarks/>
		public int TotalConnections
		{
			get
			{
				return this.totalConnectionsField;
			}
			set
			{
				this.totalConnectionsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SpamAssassinServerListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private SpamAssassinServerResult[] serversField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public SpamAssassinServerResult[] Servers
		{
			get
			{
				return this.serversField;
			}
			set
			{
				this.serversField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class InternalSpammerNotificationAbuseDetectionRuleResult
	{

		private int timeframeField;

		private int messagesBeforeNotifyField;

		private string emailAddressToNotifyField;

		private string descriptionField;

		/// <remarks/>
		public int Timeframe
		{
			get
			{
				return this.timeframeField;
			}
			set
			{
				this.timeframeField = value;
			}
		}

		/// <remarks/>
		public int MessagesBeforeNotify
		{
			get
			{
				return this.messagesBeforeNotifyField;
			}
			set
			{
				this.messagesBeforeNotifyField = value;
			}
		}

		/// <remarks/>
		public string EmailAddressToNotify
		{
			get
			{
				return this.emailAddressToNotifyField;
			}
			set
			{
				this.emailAddressToNotifyField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class InternalSpammerNotificationAbuseDetectionRulesListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private InternalSpammerNotificationAbuseDetectionRuleResult[] rulesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public InternalSpammerNotificationAbuseDetectionRuleResult[] Rules
		{
			get
			{
				return this.rulesField;
			}
			set
			{
				this.rulesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class HarvestingAbuseDetectionRuleResult
	{

		private int timeframeField;

		private int badSessionsBeforeBlockField;

		private int timeToBlockField;

		private string descriptionField;

		/// <remarks/>
		public int Timeframe
		{
			get
			{
				return this.timeframeField;
			}
			set
			{
				this.timeframeField = value;
			}
		}

		/// <remarks/>
		public int BadSessionsBeforeBlock
		{
			get
			{
				return this.badSessionsBeforeBlockField;
			}
			set
			{
				this.badSessionsBeforeBlockField = value;
			}
		}

		/// <remarks/>
		public int TimeToBlock
		{
			get
			{
				return this.timeToBlockField;
			}
			set
			{
				this.timeToBlockField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class HarvestingAbuseDetectionRulesListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private HarvestingAbuseDetectionRuleResult[] rulesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public HarvestingAbuseDetectionRuleResult[] Rules
		{
			get
			{
				return this.rulesField;
			}
			set
			{
				this.rulesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DOSAbuseDetectionRuleResult
	{

		private string serviceField;

		private int timeframeField;

		private int connectionsBeforeBlockField;

		private int timeToBlockField;

		private string descriptionField;

		/// <remarks/>
		public string Service
		{
			get
			{
				return this.serviceField;
			}
			set
			{
				this.serviceField = value;
			}
		}

		/// <remarks/>
		public int Timeframe
		{
			get
			{
				return this.timeframeField;
			}
			set
			{
				this.timeframeField = value;
			}
		}

		/// <remarks/>
		public int ConnectionsBeforeBlock
		{
			get
			{
				return this.connectionsBeforeBlockField;
			}
			set
			{
				this.connectionsBeforeBlockField = value;
			}
		}

		/// <remarks/>
		public int TimeToBlock
		{
			get
			{
				return this.timeToBlockField;
			}
			set
			{
				this.timeToBlockField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class DOSAbuseDetectionRulesListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private DOSAbuseDetectionRuleResult[] rulesField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public DOSAbuseDetectionRuleResult[] Rules
		{
			get
			{
				return this.rulesField;
			}
			set
			{
				this.rulesField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class IncomingGatewayListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private IncomingGatewayAttributes[] incGatewaysField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
		public IncomingGatewayAttributes[] incGateways
		{
			get
			{
				return this.incGatewaysField;
			}
			set
			{
				this.incGatewaysField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class IncomingGatewayAttributes
	{

		private string guidField;

		private string gatewayModeField;

		private string iPAddressField;

		private string iPStartRangeField;

		private string iPEndRangeField;

		private string userVerifyTypeField;

		private string webserviceURLField;

		private string domainVerifyTypeField;

		private string[] domainsToForwardField;

		private bool enableSpamActionsField;

		private string spamLowActionField;

		private string spamLowArgsField;

		private string spamMedActionField;

		private string spamMedArgsField;

		private string spamHighActionField;

		private string spamHighArgsField;

		private bool smarterMailModeField;

		private string smarterMailURLField;

		private string authSmarterMailUserNameField;

		private string authSmarterMailPasswordField;

		/// <remarks/>
		public string guid
		{
			get
			{
				return this.guidField;
			}
			set
			{
				this.guidField = value;
			}
		}

		/// <remarks/>
		public string gatewayMode
		{
			get
			{
				return this.gatewayModeField;
			}
			set
			{
				this.gatewayModeField = value;
			}
		}

		/// <remarks/>
		public string IPAddress
		{
			get
			{
				return this.iPAddressField;
			}
			set
			{
				this.iPAddressField = value;
			}
		}

		/// <remarks/>
		public string IPStartRange
		{
			get
			{
				return this.iPStartRangeField;
			}
			set
			{
				this.iPStartRangeField = value;
			}
		}

		/// <remarks/>
		public string IPEndRange
		{
			get
			{
				return this.iPEndRangeField;
			}
			set
			{
				this.iPEndRangeField = value;
			}
		}

		/// <remarks/>
		public string userVerifyType
		{
			get
			{
				return this.userVerifyTypeField;
			}
			set
			{
				this.userVerifyTypeField = value;
			}
		}

		/// <remarks/>
		public string webserviceURL
		{
			get
			{
				return this.webserviceURLField;
			}
			set
			{
				this.webserviceURLField = value;
			}
		}

		/// <remarks/>
		public string domainVerifyType
		{
			get
			{
				return this.domainVerifyTypeField;
			}
			set
			{
				this.domainVerifyTypeField = value;
			}
		}

		/// <remarks/>
		public string[] domainsToForward
		{
			get
			{
				return this.domainsToForwardField;
			}
			set
			{
				this.domainsToForwardField = value;
			}
		}

		/// <remarks/>
		public bool enableSpamActions
		{
			get
			{
				return this.enableSpamActionsField;
			}
			set
			{
				this.enableSpamActionsField = value;
			}
		}

		/// <remarks/>
		public string spamLowAction
		{
			get
			{
				return this.spamLowActionField;
			}
			set
			{
				this.spamLowActionField = value;
			}
		}

		/// <remarks/>
		public string spamLowArgs
		{
			get
			{
				return this.spamLowArgsField;
			}
			set
			{
				this.spamLowArgsField = value;
			}
		}

		/// <remarks/>
		public string spamMedAction
		{
			get
			{
				return this.spamMedActionField;
			}
			set
			{
				this.spamMedActionField = value;
			}
		}

		/// <remarks/>
		public string spamMedArgs
		{
			get
			{
				return this.spamMedArgsField;
			}
			set
			{
				this.spamMedArgsField = value;
			}
		}

		/// <remarks/>
		public string spamHighAction
		{
			get
			{
				return this.spamHighActionField;
			}
			set
			{
				this.spamHighActionField = value;
			}
		}

		/// <remarks/>
		public string spamHighArgs
		{
			get
			{
				return this.spamHighArgsField;
			}
			set
			{
				this.spamHighArgsField = value;
			}
		}

		/// <remarks/>
		public bool smarterMailMode
		{
			get
			{
				return this.smarterMailModeField;
			}
			set
			{
				this.smarterMailModeField = value;
			}
		}

		/// <remarks/>
		public string smarterMailURL
		{
			get
			{
				return this.smarterMailURLField;
			}
			set
			{
				this.smarterMailURLField = value;
			}
		}

		/// <remarks/>
		public string authSmarterMailUserName
		{
			get
			{
				return this.authSmarterMailUserNameField;
			}
			set
			{
				this.authSmarterMailUserNameField = value;
			}
		}

		/// <remarks/>
		public string authSmarterMailPassword
		{
			get
			{
				return this.authSmarterMailPasswordField;
			}
			set
			{
				this.authSmarterMailPasswordField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class IncomingGatewayResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private IncomingGatewayAttributes gatewayField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public IncomingGatewayAttributes gateway
		{
			get
			{
				return this.gatewayField;
			}
			set
			{
				this.gatewayField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SMTPBlockedSenderResult
	{

		private string blockedSenderField;

		private string descriptionField;

		/// <remarks/>
		public string BlockedSender
		{
			get
			{
				return this.blockedSenderField;
			}
			set
			{
				this.blockedSenderField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class SMTPBlockedSenderListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private SMTPBlockedSenderResult[] sMTPBlockedSendersField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public SMTPBlockedSenderResult[] SMTPBlockedSenders
		{
			get
			{
				return this.sMTPBlockedSendersField;
			}
			set
			{
				this.sMTPBlockedSendersField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class AddServerPortResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string newIDField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string NewID
		{
			get
			{
				return this.newIDField;
			}
			set
			{
				this.newIDField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class ServerPortResult
	{

		private string idField;

		private string protocolField;

		private string encryptionField;

		private string certificatePathField;

		private string nameField;

		private int portField;

		private string descriptionField;

		/// <remarks/>
		public string ID
		{
			get
			{
				return this.idField;
			}
			set
			{
				this.idField = value;
			}
		}

		/// <remarks/>
		public string Protocol
		{
			get
			{
				return this.protocolField;
			}
			set
			{
				this.protocolField = value;
			}
		}

		/// <remarks/>
		public string Encryption
		{
			get
			{
				return this.encryptionField;
			}
			set
			{
				this.encryptionField = value;
			}
		}

		/// <remarks/>
		public string CertificatePath
		{
			get
			{
				return this.certificatePathField;
			}
			set
			{
				this.certificatePathField = value;
			}
		}

		/// <remarks/>
		public string Name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public int Port
		{
			get
			{
				return this.portField;
			}
			set
			{
				this.portField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class ServerPortListResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private ServerPortResult[] portsField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public ServerPortResult[] Ports
		{
			get
			{
				return this.portsField;
			}
			set
			{
				this.portsField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
	public partial class EditionResult
	{

		private bool resultField;

		private int resultCodeField;

		private string messageField;

		private string editionField;

		/// <remarks/>
		public bool Result
		{
			get
			{
				return this.resultField;
			}
			set
			{
				this.resultField = value;
			}
		}

		/// <remarks/>
		public int ResultCode
		{
			get
			{
				return this.resultCodeField;
			}
			set
			{
				this.resultCodeField = value;
			}
		}

		/// <remarks/>
		public string Message
		{
			get
			{
				return this.messageField;
			}
			set
			{
				this.messageField = value;
			}
		}

		/// <remarks/>
		public string Edition
		{
			get
			{
				return this.editionField;
			}
			set
			{
				this.editionField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void StartServicesCompletedEventHandler(object sender, StartServicesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class StartServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal StartServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void StopServicesCompletedEventHandler(object sender, StopServicesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class StopServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal StopServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RequestStatusCompletedEventHandler(object sender, RequestStatusCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public RequestStatusResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((RequestStatusResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetEditionCompletedEventHandler(object sender, GetEditionCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetEditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetEditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public EditionResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((EditionResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteServerPortCompletedEventHandler(object sender, DeleteServerPortCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteServerPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteServerPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListServerPortsCompletedEventHandler(object sender, ListServerPortsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListServerPortsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListServerPortsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ServerPortListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ServerPortListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddServerPortCompletedEventHandler(object sender, AddServerPortCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddServerPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddServerPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public AddServerPortResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((AddServerPortResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetSMTPBlockedSendersCompletedEventHandler(object sender, GetSMTPBlockedSendersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSMTPBlockedSendersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSMTPBlockedSendersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SMTPBlockedSenderListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SMTPBlockedSenderListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddDOSAbuseDetectionRuleCompletedEventHandler(object sender, AddDOSAbuseDetectionRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddDOSAbuseDetectionRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddDOSAbuseDetectionRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddHarvestingAbuseDetectionRuleCompletedEventHandler(object sender, AddHarvestingAbuseDetectionRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddHarvestingAbuseDetectionRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddHarvestingAbuseDetectionRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddIncomingGatewayCompletedEventHandler(object sender, AddIncomingGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddIncomingGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddIncomingGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetIncomingGatewayCompletedEventHandler(object sender, GetIncomingGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetIncomingGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetIncomingGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public IncomingGatewayResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((IncomingGatewayResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListIncomingGatewaysCompletedEventHandler(object sender, ListIncomingGatewaysCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListIncomingGatewaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListIncomingGatewaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public IncomingGatewayListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((IncomingGatewayListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateIncomingGatewayCompletedEventHandler(object sender, UpdateIncomingGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateIncomingGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateIncomingGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveIncomingGatewayCompletedEventHandler(object sender, RemoveIncomingGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemoveIncomingGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemoveIncomingGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddInternalSpammerNotificationAbuseDetectionRuleCompletedEventHandler(object sender, AddInternalSpammerNotificationAbuseDetectionRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddInternalSpammerNotificationAbuseDetectionRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddInternalSpammerNotificationAbuseDetectionRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteAbuseDetectionRuleCompletedEventHandler(object sender, DeleteAbuseDetectionRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteAbuseDetectionRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteAbuseDetectionRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetDOSAbuseDetectionRulesCompletedEventHandler(object sender, GetDOSAbuseDetectionRulesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDOSAbuseDetectionRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDOSAbuseDetectionRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DOSAbuseDetectionRulesListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DOSAbuseDetectionRulesListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetHarvestingAbuseDetectionRulesCompletedEventHandler(object sender, GetHarvestingAbuseDetectionRulesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetHarvestingAbuseDetectionRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetHarvestingAbuseDetectionRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public HarvestingAbuseDetectionRulesListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((HarvestingAbuseDetectionRulesListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetInternalSpammerNotificationAbuseDetectionRulesCompletedEventHandler(object sender, GetInternalSpammerNotificationAbuseDetectionRulesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetInternalSpammerNotificationAbuseDetectionRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetInternalSpammerNotificationAbuseDetectionRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public InternalSpammerNotificationAbuseDetectionRulesListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((InternalSpammerNotificationAbuseDetectionRulesListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSMTPBlockedSenderCompletedEventHandler(object sender, AddSMTPBlockedSenderCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSMTPBlockedSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSMTPBlockedSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteSpamAssassinServerCompletedEventHandler(object sender, DeleteSpamAssassinServerCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteSpamAssassinServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteSpamAssassinServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSpamAssassinServerCompletedEventHandler(object sender, AddSpamAssassinServerCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSpamAssassinServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSpamAssassinServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListSpamAssassinServersCompletedEventHandler(object sender, ListSpamAssassinServersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListSpamAssassinServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListSpamAssassinServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SpamAssassinServerListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SpamAssassinServerListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetRequestedSystemSettingsCompletedEventHandler(object sender, GetRequestedSystemSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRequestedSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRequestedSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public RequestSettingsResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((RequestSettingsResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetRequestedSystemSettingsCompletedEventHandler(object sender, SetRequestedSystemSettingsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetRequestedSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetRequestedSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetSpoolMessageCountCompletedEventHandler(object sender, GetSpoolMessageCountCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSpoolMessageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSpoolMessageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public MessageCountResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((MessageCountResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListGreylistingFiltersCompletedEventHandler(object sender, ListGreylistingFiltersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListGreylistingFiltersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListGreylistingFiltersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GreylistingFilterListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GreylistingFilterListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListPortsAssignedToIPCompletedEventHandler(object sender, ListPortsAssignedToIPCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListPortsAssignedToIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListPortsAssignedToIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ServerPortListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ServerPortListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemovePortFromIPCompletedEventHandler(object sender, RemovePortFromIPCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemovePortFromIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemovePortFromIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AssignPortToIPCompletedEventHandler(object sender, AssignPortToIPCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AssignPortToIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AssignPortToIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListGatewaysCompletedEventHandler(object sender, ListGatewaysCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListGatewaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListGatewaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GatewayListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GatewayListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetGatewayCompletedEventHandler(object sender, GetGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GatewayResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GatewayResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetGlobalTrustedSendersCompletedEventHandler(object sender, GetGlobalTrustedSendersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetGlobalTrustedSendersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetGlobalTrustedSendersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public TrustedSenderListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((TrustedSenderListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddGlobalTrustedSenderCompletedEventHandler(object sender, AddGlobalTrustedSenderCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddGlobalTrustedSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddGlobalTrustedSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteGlobalTrustedSenderCompletedEventHandler(object sender, DeleteGlobalTrustedSenderCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteGlobalTrustedSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteGlobalTrustedSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteGreylistingFilterCompletedEventHandler(object sender, DeleteGreylistingFilterCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteGreylistingFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteGreylistingFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetWhitelistEntriesCompletedEventHandler(object sender, GetWhitelistEntriesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetWhitelistEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetWhitelistEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public WhitelistListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((WhitelistListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetBlacklistEntriesCompletedEventHandler(object sender, GetBlacklistEntriesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetBlacklistEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetBlacklistEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public BlacklistListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((BlacklistListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetBlacklistEntryCompletedEventHandler(object sender, SetBlacklistEntryCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetBlacklistEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetBlacklistEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetWhitelistEntryCompletedEventHandler(object sender, SetWhitelistEntryCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetWhitelistEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetWhitelistEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddGreylistingFilterCompletedEventHandler(object sender, AddGreylistingFilterCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddGreylistingFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddGreylistingFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSmtpAuthenticationBypassCompletedEventHandler(object sender, AddSmtpAuthenticationBypassCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSmtpAuthenticationBypassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSmtpAuthenticationBypassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteSmtpAuthenticationBypassCompletedEventHandler(object sender, DeleteSmtpAuthenticationBypassCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteSmtpAuthenticationBypassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteSmtpAuthenticationBypassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void GetSmtpAuthenticationBypassesCompletedEventHandler(object sender, GetSmtpAuthenticationBypassesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSmtpAuthenticationBypassesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSmtpAuthenticationBypassesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SMTPAuthBypassListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SMTPAuthBypassListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddGatewayCompletedEventHandler(object sender, AddGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSmarterMailGatewayCompletedEventHandler(object sender, AddSmarterMailGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSmarterMailGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSmarterMailGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveGatewayCompletedEventHandler(object sender, RemoveGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemoveGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemoveGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void UpdateGatewayCompletedEventHandler(object sender, UpdateGatewayCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateGatewayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateGatewayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListSystemAdminsCompletedEventHandler(object sender, ListSystemAdminsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListSystemAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListSystemAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SystemAdminListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SystemAdminListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void SetSystemAdminPasswordCompletedEventHandler(object sender, SetSystemAdminPasswordCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class SetSystemAdminPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal SetSystemAdminPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteSystemAdminCompletedEventHandler(object sender, DeleteSystemAdminCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteSystemAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteSystemAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddSystemAdminCompletedEventHandler(object sender, AddSystemAdminCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSystemAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSystemAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddIPRestrictionToSystemAdminCompletedEventHandler(object sender, AddIPRestrictionToSystemAdminCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddIPRestrictionToSystemAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddIPRestrictionToSystemAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void RemoveIPRestrictionFromSystemAdminCompletedEventHandler(object sender, RemoveIPRestrictionFromSystemAdminCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RemoveIPRestrictionFromSystemAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RemoveIPRestrictionFromSystemAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddHostnameCompletedEventHandler(object sender, AddHostnameCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddHostnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddHostnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteHostnameCompletedEventHandler(object sender, DeleteHostnameCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteHostnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteHostnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListHostnamesCompletedEventHandler(object sender, ListHostnamesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListHostnamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListHostnamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public HostnameListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((HostnameListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddFolderAutocleanRuleCompletedEventHandler(object sender, AddFolderAutocleanRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddFolderAutocleanRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddFolderAutocleanRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteFolderAutoCleanRuleCompletedEventHandler(object sender, DeleteFolderAutoCleanRuleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteFolderAutoCleanRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteFolderAutoCleanRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListFolderAutoCleanRulesCompletedEventHandler(object sender, ListFolderAutoCleanRulesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListFolderAutoCleanRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListFolderAutoCleanRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public FolderAutoCleanRuleListResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((FolderAutoCleanRuleListResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void AddForwardingBlacklistEntryCompletedEventHandler(object sender, AddForwardingBlacklistEntryCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddForwardingBlacklistEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddForwardingBlacklistEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void DeleteForwardingBlacklistEntryCompletedEventHandler(object sender, DeleteForwardingBlacklistEntryCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteForwardingBlacklistEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteForwardingBlacklistEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public GenericResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((GenericResult)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	public delegate void ListForwardingBlacklistEntriesCompletedEventHandler(object sender, ListForwardingBlacklistEntriesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class ListForwardingBlacklistEntriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal ListForwardingBlacklistEntriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ForwardingBlacklistRuleResult Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ForwardingBlacklistRuleResult)(this.results[0]));
			}
		}
	}

}
