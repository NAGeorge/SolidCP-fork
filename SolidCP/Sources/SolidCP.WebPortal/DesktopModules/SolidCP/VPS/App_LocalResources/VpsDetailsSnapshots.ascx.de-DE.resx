<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnApply.OnClientClick" xml:space="preserve">
    <value>if(this.disabled) return false;if(!confirm('Wollen Sie diesen Snapshot auf den VPS anwenden? Daten, die seit der Snapshoterstellung geändert oder erstellt wurden, gehen dabei verloren! ')) return false;ShowProgressDialog('Snapshot wird angewandt...');</value>
  </data>
  <data name="btnDelete.OnClientClick" xml:space="preserve">
    <value>if(this.disabled) return false;if(!confirm('Wollen Sie diesen Snapshot komplett löschen?')) return false;ShowProgressDialog('Snapshot wird gelöscht...');</value>
  </data>
  <data name="btnDeleteSubtree.OnClientClick" xml:space="preserve">
    <value>if(!confirm('Sind Sie sicher, dass Sie diesen Snapshot und alle seine Unterbereiche löschen wollen?')) return false;ShowProgressDialog('Snapshot und dessen Unterbereiche werden gelöscht...');</value>
  </data>
  <data name="btnRenameSnapshot.OnClientClick" xml:space="preserve">
    <value>ShowProgressDialog('Snapshot wird umbenannt...', 'RenameSnapshotModal');</value>
  </data>
  <data name="btnTakeSnapshot.OnClientClick" xml:space="preserve">
    <value>ShowProgressDialog('Snapshot wird erstellt...');</value>
  </data>
  <data name="Now.Text" xml:space="preserve">
    <value>Jetzt</value>
  </data>
  <data name="locNoSnapshots.Text" xml:space="preserve">
    <value>Dieser virtuelle Server hat keine Snapshots.</value>
  </data>
  <data name="btnApply.Text" xml:space="preserve">
    <value>Anwenden</value>
  </data>
  <data name="btnCancelRename.Text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="btnDeleteSubtree.Text" xml:space="preserve">
    <value>Unterstruktur löschen</value>
  </data>
  <data name="btnRename.Text" xml:space="preserve">
    <value>Umbenennen</value>
  </data>
  <data name="btnRenameSnapshot.Text" xml:space="preserve">
    <value>Umbenennen</value>
  </data>
  <data name="FormComments.Text" xml:space="preserve">
    <value>&lt;p&gt;Einen &lt;b&gt;Schnappschuss&lt;/b&gt; zu machen ist fast wie ein Bild des gegenwärtigen VPS-Zustands aufzunehmen: seine Konfiguration, Speicher und Festplatte.&lt;/p&gt;&lt;p&gt;Schnappschüsse können als Sicherungs-/Wiederherstellungspunkte beim Installieren neuer Software verwendet werden oder um den VPS zu Entwicklungs- oder Testzwecken zu nutzen. Wenn irgendwas schiefgelaufen ist gibt es die Möglichkeit zu Wiederholen und einen Schnappschuß mit funktionierender Konfiguration &lt;b&gt;"An(zu)wenden"&lt;/b&gt;.&lt;/p&gt;&lt;p&gt;Der &lt;b&gt;"Umbenennen"&lt;/b&gt;-Knopf erlaubt Schnappschußumbenennung und damit Vergabe eines aussagekräftigen Namens, z.B. "Vor Anwendung des Servicepacks".&lt;/p&gt;</value>
  </data>
  <data name="locCreated.Text" xml:space="preserve">
    <value>Erstellt:</value>
  </data>
  <data name="locQuota.Text" xml:space="preserve">
    <value>Anzahl an Snapshots:</value>
  </data>
  <data name="locRenameSnapshot.Text" xml:space="preserve">
    <value>Snapshot umbenennen</value>
  </data>
  <data name="locTitle.Text" xml:space="preserve">
    <value>Snapshots</value>
  </data>
  <data name="btnCancelRenameText.Text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="btnRenameSnapshotText.Text" xml:space="preserve">
    <value>Umbenennen</value>
  </data>
  <data name="btnTakeSnapshotText.Text" xml:space="preserve">
    <value>Snapshot erstellen</value>
  </data>
  <data name="btnDeleteText.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
</root>