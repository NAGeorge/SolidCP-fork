<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancelPFXUploadText.Text" xml:space="preserve">
    <value>Cancel Upload</value>
  </data>
  <data name="btnCancelRequestText.Text" xml:space="preserve">
    <value>Cancel request</value>
  </data>
  <data name="btnCSR.Text" xml:space="preserve">
    <value>Generate CSR</value>
  </data>
  <data name="btnCSRCancelText.Text" xml:space="preserve">
    <value>Cancel CSR Generation</value>
  </data>
  <data name="btnCSRText.Text" xml:space="preserve">
    <value>Generate CSR</value>
  </data>
  <data name="btnDelete.OnClientClick" xml:space="preserve">
    <value>return confirm('Remove SSL from this web site?');</value>
  </data>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Delete Certificate</value>
  </data>
  <data name="btnDeleteText.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="btnExport.Text" xml:space="preserve">
    <value>Export Certificate</value>
  </data>
  <data name="btnExportModal.Text" xml:space="preserve">
    <value>Export Certificate</value>
  </data>
  <data name="btnExportModalText.Text" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="btnExportText.Text" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="btnImport.Text" xml:space="preserve">
    <value>Import Existing Certificate</value>
  </data>
  <data name="btnImportText.Text" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="btnInstallCertificate.Text" xml:space="preserve">
    <value>Install Certificate</value>
  </data>
  <data name="btnInstallCertificateText.Text" xml:space="preserve">
    <value>Install</value>
  </data>
  <data name="btnInstallConfirm.Text" xml:space="preserve">
    <value>Are you sure? Your current installed certificate will be deleted.</value>
  </data>
  <data name="btnInstallPFX.Text" xml:space="preserve">
    <value>Install Certificate</value>
  </data>
  <data name="btnInstallPFXText.Text" xml:space="preserve">
    <value>Install</value>
  </data>
  <data name="btnLetsEncrypt.OnClientClick" xml:space="preserve">
    <value>ShowProgressDialog('Generating, validating and installing certificate...');</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="btnLetsEncrypt.Text" xml:space="preserve">
    <value>Create and install Let's Encrypt certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="btnPFXExportCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnPFXExportCancelText.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnRegenCSR.Text" xml:space="preserve">
    <value>Generate New CSR</value>
  </data>
  <data name="btnRegenCSRText.Text" xml:space="preserve">
    <value>Generate New CSR</value>
  </data>
  <data name="btnRenCSR.Text" xml:space="preserve">
    <value>Generate Renewal CSR</value>
  </data>
  <data name="btnRenCSRText" xml:space="preserve">
    <value>Generate Renewal CSR</value>
  </data>
  <data name="btnRenew.Text" xml:space="preserve">
    <value>Renew Certificate</value>
  </data>
  <data name="btnRenewText.Text" xml:space="preserve">
    <value>Renew</value>
  </data>
  <data name="btnRenew.OnClientClick" xml:space="preserve">
    <value>return confirm('Renew SSL for this web site?');</value>
  </data>
  <data name="btnShowpnlCSR.Text" xml:space="preserve">
    <value>Generate CSR</value>
  </data>
  <data name="btnShowpnlCSRText.Text" xml:space="preserve">
    <value>Generate CSR</value>
  </data>
  <data name="btnShowUpload.Text" xml:space="preserve">
    <value>Upload Certificate</value>
  </data>
  <data name="btnShowUploadText.Text" xml:space="preserve">
    <value>Upload Certificate</value>
  </data>
  <data name="GenerateCSR.Text" xml:space="preserve">
    <value>Generate CSR</value>
  </data>
  <data name="headerInstalledCertificate.Text" xml:space="preserve">
    <value>Certificate Info</value>
  </data>
  <data name="headerPFXPassword.Text" xml:space="preserve">
    <value>Enter a password for the PFX</value>
  </data>
  <data name="InstallCSRCertificate.Text" xml:space="preserve">
    <value>Paste your certificate from your CA into to the text area below and click on “Install Certificate” button.</value>
  </data>
  <data name="InstallCSRDescription.Text" xml:space="preserve">
    <value>A CSR for your Website was generated successfully and is shown below. Copy the text below and paste it to a CA to request the certificate.</value>
  </data>
  <data name="InstallCSRHeading.Text" xml:space="preserve">
    <value>Install Certificate</value>
  </data>
  <data name="InstallLeCert.Text" xml:space="preserve">
    <value>Install Free Let's Encrypt SSL Certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="InstallLeCertCancel.Text" xml:space="preserve">
    <value>Cancel Install</value>
  </data>
  <data name="lblPFXInstallPassword.Text" xml:space="preserve">
    <value>PFX Password</value>
  </data>
  <data name="LEInstallFailed.Text" xml:space="preserve">
    <value>Unable to obtain a Let's Encrypt SSL Certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LENoSiteSelected.Text" xml:space="preserve">
    <value>You must specify at least one URL to assign to the certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LERenewFailed.Text" xml:space="preserve">
    <value>Unable to renew Let's Encrypt SSL Certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptContactDesc.Text" xml:space="preserve">
    <value>Contact Email Address</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptDescription.Text" xml:space="preserve">
    <value>Let's Encrypt is a public Certificate Authority (CA) which provides free domain level validation ("DV" or "PositiveSSL") SSL Certificates for your website(s).  Let's Encrypt Certificates are recognized by all major browsers using modern encyption protocols.</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptHeading.Text" xml:space="preserve">
    <value>Let's Encrypt SSL Certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptTermsNotice1.Text" xml:space="preserve">
    <value>Your clicking of the install button indicates your acceptance of the </value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptTermsNotice2.Text" xml:space="preserve">
    <value>Let's Encrypt Terms of Service</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptTermsNotice3.Text" xml:space="preserve">
    <value> and acknowledgement that your certificate, once issued will renew every </value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LetsEncryptTermsNotice4.Text" xml:space="preserve">
    <value> days.</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="LEValidity.Text" xml:space="preserve">
    <value>Your certificate is valid for :</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="lnkLetsEncryptTOS.Text" xml:space="preserve">
    <value>Read Let's Encrypt Terms Of Services</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="SelectHostName.Text" xml:space="preserve">
    <value>Certificate Subject Name</value>
  </data>
  <data name="SelectHostNames.Text" xml:space="preserve">
    <value>Subject Alternative Name (SAN's)</value>
  </data>
  <data name="PfxPassword.Text" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="PfxPasswordConfirmation.Text" xml:space="preserve">
    <value>Confirm:</value>
  </data>
  <data name="RenewLeCert.Text" xml:space="preserve">
    <value>Renew Let's Encrypt SSL Certificate</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="SelectCertType.Text" xml:space="preserve">
    <value>Select Certificate Type:</value>
  </data>
  <data name="SelectLECertInclusion.Text" xml:space="preserve">
    <value>Select the website(s) to include on the certificate:</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="sslBitLength.Text" xml:space="preserve">
    <value>Bit Length:</value>
  </data>
  <data name="sslCertificate.Text" xml:space="preserve">
    <value>Certificate</value>
  </data>
  <data name="sslCity.Text" xml:space="preserve">
    <value>City/Locality:</value>
  </data>
  <data name="sslCountry.Text" xml:space="preserve">
    <value>Country:</value>
  </data>
  <data name="sslCSR.Text" xml:space="preserve">
    <value>CSR</value>
  </data>
  <data name="sslDomain.Text" xml:space="preserve">
    <value>Domain:</value>
  </data>
  <data name="sslSAN.Text" xml:space="preserve">
    <value>SAN's:</value>
  </data>
  <data name="sslExpiry.Text" xml:space="preserve">
    <value>Expiration Date:</value>
  </data>
  <data name="SSLGenereateRenewal.HeaderText" xml:space="preserve">
    <value>Generate Renewal Request</value>
  </data>
  <data name="SSLImportDescription.Text" xml:space="preserve">
    <value>A SSL certificate has been detected on the website that is not managed by SolidCP. Click the button below
        to import the certificate settings</value>
  </data>
  <data name="SSLImportHeading.Text" xml:space="preserve">
    <value>Existing certificate detected</value>
  </data>
  <data name="sslIncludewww.Text" xml:space="preserve">
    <value>include www.</value>
  </data>
  <data name="SSLInstalledNewDescription.Text" xml:space="preserve">
    <value>A certificate is already installed on this website. You can create a new request or upload a new certificate, however the current certificate will be removed. If you need to renew the current certificate, click the renew button on the Installed Certificate tab.</value>
  </data>
  <data name="SSLInstalledNewHeading.Text" xml:space="preserve">
    <value>Install New certificate</value>
  </data>
  <data name="sslLEBitLength.Text" xml:space="preserve">
    <value>Bit Length:</value>
  </data>
  <data name="SSLNotInstalledDescription.Text" xml:space="preserve">
    <value>A SSL Certificate is not installed on this Website. You can install a free Let's Encrypt SSL Certificate, or you may use a purchased SSL Certificate.  In order to use a purchased SSL you will need to first generate a Certificate-Signing Request (CSR) by clicking "Generate CSR" button below and then give it to a certificate supplier (CA) that will provide you with the certificate. If you already have a complete certificate installed on a different server you may choose to upload it as a .pfx file by clicking "Upload Certificate" button.</value>
    <comment>LetsEncrypt</comment>
  </data>
  <data name="SSLNotInstalledHeading.Text" xml:space="preserve">
    <value>SSL not installed</value>
  </data>
  <data name="sslOrganization.Text" xml:space="preserve">
    <value>Organization:</value>
  </data>
  <data name="sslOrganizationUnit.Text" xml:space="preserve">
    <value>Organization Unit:</value>
  </data>
  <data name="SSLSSLStateReq.ErrorMessage" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="sslState.Text" xml:space="preserve">
    <value>State/Province:</value>
  </data>
  <data name="sslWildcard.Text" xml:space="preserve">
    <value>Wildcard certificate (covers all sub-domains)</value>
  </data>
  <data name="tabInstalled.Text" xml:space="preserve">
    <value>Installed Certificate</value>
  </data>
  <data name="tabNewCertificate.HeaderText" xml:space="preserve">
    <value>New Certificate</value>
  </data>
  <data name="tabPendingCertificate.HeaderText" xml:space="preserve">
    <value>Pending Request</value>
  </data>
  <data name="valtxtPFXPass.ErrorMessage" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="valtxtPFXPassConfirm.ErrorMessage" xml:space="preserve">
    <value>Passwords do not match</value>
  </data>
</root>