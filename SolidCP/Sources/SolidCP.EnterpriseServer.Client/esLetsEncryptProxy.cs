// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

using SolidCP.Providers;
using SolidCP.Providers.Common;
using SolidCP.Providers.ResultObjects;
using SolidCP.Providers.Web;
//using SolidCP.Providers.Web.LetsEncrypt;

namespace SolidCP.EnterpriseServer
{
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using System.Data;
    using System.IO;
    using SolidCP.Providers.LetsEncrypt;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "esLetsEncryptSoap", Namespace = "http://smbsaas/solidcp/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esLetsEncryptProxy : Microsoft.Web.Services3.WebServicesClientProtocol  
    {
        public esLetsEncryptProxy()
        {
            this.Url = "http://127.0.0.1:9002/esLetsEncrypt.asmx";
        }

        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/doRegisterLetsEncryptProxy", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [WebMethod(MessageName = "doRegisterLetsEncryptProxy")]
        public ResultObject doRegisterLetsEncryptProxy(LERequest request)
        {
            object[] results = this.Invoke("esRegisterLetsEncrypt", new object[] {
                        request});
            return ((ResultObject)(results[0]));
/*
            var t = this.MemberwiseClone();
            try
            {
                object[] results = this.Invoke("esRegisterLetsEncrypt", new object[] {
                        request});
                return ((ResultObject)(results[0]));
            }
            catch (Exception ex)
            {
                var f = File.CreateText(@"C:\inetpub\logs\log.txt");
                f.WriteLine( ex.ToString() );
                f.WriteLine( t.ToString() );
                f.Flush();
                f.Close();
                return new ResultObject();
            }
 */
        }


        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/doRenewLetsEncrypt", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
//        [WebMethod(MessageName = "doRenewLetsEncrypt")]
        public ResultObject doRenewLetsEncrypt(SSLCertificate cert, int siteId)
        {
            object[] results = this.Invoke("esRenewLetsEncrypt", new object[] {
                        cert,
                        siteId});
            return ((ResultObject)(results[0]));
        }


        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/doRemoveLetsEncrypt", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [WebMethod(MessageName = "doRemoveLetsEncrypt")]
        public bool doRemoveLetsEncrypt(int siteId)
        {
            object[] results = this.Invoke("doRemoveLetsEncrypt", new object[] {
                        siteId});
            return ((bool)results[0]);
        }

    }


}