//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.7905
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace SolidCP.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using SolidCP.Providers.RemoteDesktopServices;
    using SolidCP.Providers.Common;
    using SolidCP.EnterpriseServer.Base.RDS;
    using SolidCP.Providers.HostedSolution;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esRemoteDesktopServicesSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    public partial class esRemoteDesktopServices : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRdsCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationRdsCollectionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRdsCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditRdsCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditRdsCollectionSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRdsCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFreeRdsServersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationRdsServersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationFreeRdsServersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRDServerNewConnectionAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionRdsServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationRdsServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRdsServerToCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRdsServerToOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRdsServerFromCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRdsServerFromOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUsersToRdsCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionRemoteApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRemoteApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteApplicationToCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRemoteApplicationFromCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRemoteApplicationsToRdsCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationRdsUsersCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationRdsServersCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrganizationRdsCollectionsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsUserSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogOffRdsUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionSessionHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShutDownRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestartRdsServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCollectionLocalAdminsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRdsCollectionLocalAdminsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallSessionHostsCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCertificateByServiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsCertificateByItemIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRdsCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsSetupLetterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendRdsSetupLetterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsServerSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRdsServerSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShadowSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteDesktopServiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRdsMessagesByCollectionIdOperationCompleted;
        
        /// <remarks/>
        public esRemoteDesktopServices() {
            this.Url = "http://127.0.0.1:9002/esRemoteDesktopServices.asmx";
        }
        
        /// <remarks/>
        public event GetRdsCollectionCompletedEventHandler GetRdsCollectionCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionSettingsCompletedEventHandler GetRdsCollectionSettingsCompleted;
        
        /// <remarks/>
        public event GetOrganizationRdsCollectionsCompletedEventHandler GetOrganizationRdsCollectionsCompleted;
        
        /// <remarks/>
        public event AddRdsCollectionCompletedEventHandler AddRdsCollectionCompleted;
        
        /// <remarks/>
        public event EditRdsCollectionCompletedEventHandler EditRdsCollectionCompleted;
        
        /// <remarks/>
        public event EditRdsCollectionSettingsCompletedEventHandler EditRdsCollectionSettingsCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionsPagedCompletedEventHandler GetRdsCollectionsPagedCompleted;
        
        /// <remarks/>
        public event RemoveRdsCollectionCompletedEventHandler RemoveRdsCollectionCompleted;
        
        /// <remarks/>
        public event GetRdsServersPagedCompletedEventHandler GetRdsServersPagedCompleted;
        
        /// <remarks/>
        public event GetFreeRdsServersPagedCompletedEventHandler GetFreeRdsServersPagedCompleted;
        
        /// <remarks/>
        public event GetOrganizationRdsServersPagedCompletedEventHandler GetOrganizationRdsServersPagedCompleted;
        
        /// <remarks/>
        public event GetOrganizationFreeRdsServersPagedCompletedEventHandler GetOrganizationFreeRdsServersPagedCompleted;
        
        /// <remarks/>
        public event GetRdsServerCompletedEventHandler GetRdsServerCompleted;
        
        /// <remarks/>
        public event SetRDServerNewConnectionAllowedCompletedEventHandler SetRDServerNewConnectionAllowedCompleted;
        
        /// <remarks/>
        public event GetCollectionRdsServersCompletedEventHandler GetCollectionRdsServersCompleted;
        
        /// <remarks/>
        public event GetOrganizationRdsServersCompletedEventHandler GetOrganizationRdsServersCompleted;
        
        /// <remarks/>
        public event AddRdsServerCompletedEventHandler AddRdsServerCompleted;
        
        /// <remarks/>
        public event AddRdsServerToCollectionCompletedEventHandler AddRdsServerToCollectionCompleted;
        
        /// <remarks/>
        public event AddRdsServerToOrganizationCompletedEventHandler AddRdsServerToOrganizationCompleted;
        
        /// <remarks/>
        public event RemoveRdsServerCompletedEventHandler RemoveRdsServerCompleted;
        
        /// <remarks/>
        public event RemoveRdsServerFromCollectionCompletedEventHandler RemoveRdsServerFromCollectionCompleted;
        
        /// <remarks/>
        public event RemoveRdsServerFromOrganizationCompletedEventHandler RemoveRdsServerFromOrganizationCompleted;
        
        /// <remarks/>
        public event UpdateRdsServerCompletedEventHandler UpdateRdsServerCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionUsersCompletedEventHandler GetRdsCollectionUsersCompleted;
        
        /// <remarks/>
        public event SetUsersToRdsCollectionCompletedEventHandler SetUsersToRdsCollectionCompleted;
        
        /// <remarks/>
        public event GetCollectionRemoteApplicationsCompletedEventHandler GetCollectionRemoteApplicationsCompleted;
        
        /// <remarks/>
        public event GetAvailableRemoteApplicationsCompletedEventHandler GetAvailableRemoteApplicationsCompleted;
        
        /// <remarks/>
        public event AddRemoteApplicationToCollectionCompletedEventHandler AddRemoteApplicationToCollectionCompleted;
        
        /// <remarks/>
        public event RemoveRemoteApplicationFromCollectionCompletedEventHandler RemoveRemoteApplicationFromCollectionCompleted;
        
        /// <remarks/>
        public event SetRemoteApplicationsToRdsCollectionCompletedEventHandler SetRemoteApplicationsToRdsCollectionCompleted;
        
        /// <remarks/>
        public event GetOrganizationRdsUsersCountCompletedEventHandler GetOrganizationRdsUsersCountCompleted;
        
        /// <remarks/>
        public event GetOrganizationRdsServersCountCompletedEventHandler GetOrganizationRdsServersCountCompleted;
        
        /// <remarks/>
        public event GetOrganizationRdsCollectionsCountCompletedEventHandler GetOrganizationRdsCollectionsCountCompleted;
        
        /// <remarks/>
        public event GetApplicationUsersCompletedEventHandler GetApplicationUsersCompleted;
        
        /// <remarks/>
        public event SetApplicationUsersCompletedEventHandler SetApplicationUsersCompleted;
        
        /// <remarks/>
        public event GetRdsUserSessionsCompletedEventHandler GetRdsUserSessionsCompleted;
        
        /// <remarks/>
        public event LogOffRdsUserCompletedEventHandler LogOffRdsUserCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionSessionHostsCompletedEventHandler GetRdsCollectionSessionHostsCompleted;
        
        /// <remarks/>
        public event GetRdsServerInfoCompletedEventHandler GetRdsServerInfoCompleted;
        
        /// <remarks/>
        public event GetRdsServerStatusCompletedEventHandler GetRdsServerStatusCompleted;
        
        /// <remarks/>
        public event ShutDownRdsServerCompletedEventHandler ShutDownRdsServerCompleted;
        
        /// <remarks/>
        public event RestartRdsServerCompletedEventHandler RestartRdsServerCompleted;
        
        /// <remarks/>
        public event GetRdsCollectionLocalAdminsCompletedEventHandler GetRdsCollectionLocalAdminsCompleted;
        
        /// <remarks/>
        public event SaveRdsCollectionLocalAdminsCompletedEventHandler SaveRdsCollectionLocalAdminsCompleted;
        
        /// <remarks/>
        public event InstallSessionHostsCertificateCompletedEventHandler InstallSessionHostsCertificateCompleted;
        
        /// <remarks/>
        public event GetRdsCertificateByServiceIdCompletedEventHandler GetRdsCertificateByServiceIdCompleted;
        
        /// <remarks/>
        public event GetRdsCertificateByItemIdCompletedEventHandler GetRdsCertificateByItemIdCompleted;
        
        /// <remarks/>
        public event AddRdsCertificateCompletedEventHandler AddRdsCertificateCompleted;
        
        /// <remarks/>
        public event GetRdsServicesCompletedEventHandler GetRdsServicesCompleted;
        
        /// <remarks/>
        public event GetRdsSetupLetterCompletedEventHandler GetRdsSetupLetterCompleted;
        
        /// <remarks/>
        public event SendRdsSetupLetterCompletedEventHandler SendRdsSetupLetterCompleted;
        
        /// <remarks/>
        public event GetRdsServerSettingsCompletedEventHandler GetRdsServerSettingsCompleted;
        
        /// <remarks/>
        public event UpdateRdsServerSettingsCompletedEventHandler UpdateRdsServerSettingsCompleted;
        
        /// <remarks/>
        public event ShadowSessionCompletedEventHandler ShadowSessionCompleted;
        
        /// <remarks/>
        public event ImportCollectionCompletedEventHandler ImportCollectionCompleted;
        
        /// <remarks/>
        public event GetRemoteDesktopServiceIdCompletedEventHandler GetRemoteDesktopServiceIdCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event GetRdsMessagesByCollectionIdCompletedEventHandler GetRdsMessagesByCollectionIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCollection GetRdsCollection(int collectionId) {
            object[] results = this.Invoke("GetRdsCollection", new object[] {
                        collectionId});
            return ((RdsCollection)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollection(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollection", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCollection EndGetRdsCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCollection)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionAsync(int collectionId) {
            this.GetRdsCollectionAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionAsync(int collectionId, object userState) {
            if ((this.GetRdsCollectionOperationCompleted == null)) {
                this.GetRdsCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollection", new object[] {
                        collectionId}, this.GetRdsCollectionOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionOperationCompleted(object arg) {
            if ((this.GetRdsCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionCompleted(this, new GetRdsCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCollectionSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCollectionSettings GetRdsCollectionSettings(int collectionId) {
            object[] results = this.Invoke("GetRdsCollectionSettings", new object[] {
                        collectionId});
            return ((RdsCollectionSettings)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionSettings(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionSettings", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCollectionSettings EndGetRdsCollectionSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCollectionSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionSettingsAsync(int collectionId) {
            this.GetRdsCollectionSettingsAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionSettingsAsync(int collectionId, object userState) {
            if ((this.GetRdsCollectionSettingsOperationCompleted == null)) {
                this.GetRdsCollectionSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionSettingsOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionSettings", new object[] {
                        collectionId}, this.GetRdsCollectionSettingsOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionSettingsOperationCompleted(object arg) {
            if ((this.GetRdsCollectionSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionSettingsCompleted(this, new GetRdsCollectionSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationRdsCollections", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCollection[] GetOrganizationRdsCollections(int itemId) {
            object[] results = this.Invoke("GetOrganizationRdsCollections", new object[] {
                        itemId});
            return ((RdsCollection[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationRdsCollections(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationRdsCollections", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCollection[] EndGetOrganizationRdsCollections(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCollection[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationRdsCollectionsAsync(int itemId) {
            this.GetOrganizationRdsCollectionsAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationRdsCollectionsAsync(int itemId, object userState) {
            if ((this.GetOrganizationRdsCollectionsOperationCompleted == null)) {
                this.GetOrganizationRdsCollectionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationRdsCollectionsOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationRdsCollections", new object[] {
                        itemId}, this.GetOrganizationRdsCollectionsOperationCompleted, userState);
        }
        
        private void OnGetOrganizationRdsCollectionsOperationCompleted(object arg) {
            if ((this.GetOrganizationRdsCollectionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationRdsCollectionsCompleted(this, new GetOrganizationRdsCollectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddRdsCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRdsCollection(int itemId, RdsCollection collection) {
            object[] results = this.Invoke("AddRdsCollection", new object[] {
                        itemId,
                        collection});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRdsCollection(int itemId, RdsCollection collection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRdsCollection", new object[] {
                        itemId,
                        collection}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddRdsCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddRdsCollectionAsync(int itemId, RdsCollection collection) {
            this.AddRdsCollectionAsync(itemId, collection, null);
        }
        
        /// <remarks/>
        public void AddRdsCollectionAsync(int itemId, RdsCollection collection, object userState) {
            if ((this.AddRdsCollectionOperationCompleted == null)) {
                this.AddRdsCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRdsCollectionOperationCompleted);
            }
            this.InvokeAsync("AddRdsCollection", new object[] {
                        itemId,
                        collection}, this.AddRdsCollectionOperationCompleted, userState);
        }
        
        private void OnAddRdsCollectionOperationCompleted(object arg) {
            if ((this.AddRdsCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRdsCollectionCompleted(this, new AddRdsCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EditRdsCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject EditRdsCollection(int itemId, RdsCollection collection) {
            object[] results = this.Invoke("EditRdsCollection", new object[] {
                        itemId,
                        collection});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditRdsCollection(int itemId, RdsCollection collection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditRdsCollection", new object[] {
                        itemId,
                        collection}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndEditRdsCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void EditRdsCollectionAsync(int itemId, RdsCollection collection) {
            this.EditRdsCollectionAsync(itemId, collection, null);
        }
        
        /// <remarks/>
        public void EditRdsCollectionAsync(int itemId, RdsCollection collection, object userState) {
            if ((this.EditRdsCollectionOperationCompleted == null)) {
                this.EditRdsCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditRdsCollectionOperationCompleted);
            }
            this.InvokeAsync("EditRdsCollection", new object[] {
                        itemId,
                        collection}, this.EditRdsCollectionOperationCompleted, userState);
        }
        
        private void OnEditRdsCollectionOperationCompleted(object arg) {
            if ((this.EditRdsCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditRdsCollectionCompleted(this, new EditRdsCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EditRdsCollectionSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject EditRdsCollectionSettings(int itemId, RdsCollection collection) {
            object[] results = this.Invoke("EditRdsCollectionSettings", new object[] {
                        itemId,
                        collection});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditRdsCollectionSettings(int itemId, RdsCollection collection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditRdsCollectionSettings", new object[] {
                        itemId,
                        collection}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndEditRdsCollectionSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void EditRdsCollectionSettingsAsync(int itemId, RdsCollection collection) {
            this.EditRdsCollectionSettingsAsync(itemId, collection, null);
        }
        
        /// <remarks/>
        public void EditRdsCollectionSettingsAsync(int itemId, RdsCollection collection, object userState) {
            if ((this.EditRdsCollectionSettingsOperationCompleted == null)) {
                this.EditRdsCollectionSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditRdsCollectionSettingsOperationCompleted);
            }
            this.InvokeAsync("EditRdsCollectionSettings", new object[] {
                        itemId,
                        collection}, this.EditRdsCollectionSettingsOperationCompleted, userState);
        }
        
        private void OnEditRdsCollectionSettingsOperationCompleted(object arg) {
            if ((this.EditRdsCollectionSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditRdsCollectionSettingsCompleted(this, new EditRdsCollectionSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCollectionsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCollectionPaged GetRdsCollectionsPaged(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetRdsCollectionsPaged", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((RdsCollectionPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionsPaged(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionsPaged", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCollectionPaged EndGetRdsCollectionsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCollectionPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionsPagedAsync(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetRdsCollectionsPagedAsync(itemId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionsPagedAsync(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetRdsCollectionsPagedOperationCompleted == null)) {
                this.GetRdsCollectionsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionsPagedOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionsPaged", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRdsCollectionsPagedOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionsPagedOperationCompleted(object arg) {
            if ((this.GetRdsCollectionsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionsPagedCompleted(this, new GetRdsCollectionsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RemoveRdsCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RemoveRdsCollection(int itemId, RdsCollection collection) {
            object[] results = this.Invoke("RemoveRdsCollection", new object[] {
                        itemId,
                        collection});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRdsCollection(int itemId, RdsCollection collection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRdsCollection", new object[] {
                        itemId,
                        collection}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndRemoveRdsCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRdsCollectionAsync(int itemId, RdsCollection collection) {
            this.RemoveRdsCollectionAsync(itemId, collection, null);
        }
        
        /// <remarks/>
        public void RemoveRdsCollectionAsync(int itemId, RdsCollection collection, object userState) {
            if ((this.RemoveRdsCollectionOperationCompleted == null)) {
                this.RemoveRdsCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRdsCollectionOperationCompleted);
            }
            this.InvokeAsync("RemoveRdsCollection", new object[] {
                        itemId,
                        collection}, this.RemoveRdsCollectionOperationCompleted, userState);
        }
        
        private void OnRemoveRdsCollectionOperationCompleted(object arg) {
            if ((this.RemoveRdsCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRdsCollectionCompleted(this, new RemoveRdsCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsServersPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServersPaged GetRdsServersPaged(string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetRdsServersPaged", new object[] {
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServersPaged(string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServersPaged", new object[] {
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServersPaged EndGetRdsServersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServersPagedAsync(string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetRdsServersPagedAsync(filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetRdsServersPagedAsync(string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetRdsServersPagedOperationCompleted == null)) {
                this.GetRdsServersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServersPagedOperationCompleted);
            }
            this.InvokeAsync("GetRdsServersPaged", new object[] {
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRdsServersPagedOperationCompleted, userState);
        }
        
        private void OnGetRdsServersPagedOperationCompleted(object arg) {
            if ((this.GetRdsServersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServersPagedCompleted(this, new GetRdsServersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFreeRdsServersPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServersPaged GetFreeRdsServersPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetFreeRdsServersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFreeRdsServersPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFreeRdsServersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServersPaged EndGetFreeRdsServersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetFreeRdsServersPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetFreeRdsServersPagedAsync(packageId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetFreeRdsServersPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetFreeRdsServersPagedOperationCompleted == null)) {
                this.GetFreeRdsServersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFreeRdsServersPagedOperationCompleted);
            }
            this.InvokeAsync("GetFreeRdsServersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetFreeRdsServersPagedOperationCompleted, userState);
        }
        
        private void OnGetFreeRdsServersPagedOperationCompleted(object arg) {
            if ((this.GetFreeRdsServersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFreeRdsServersPagedCompleted(this, new GetFreeRdsServersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationRdsServersPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServersPaged GetOrganizationRdsServersPaged(int itemId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> collectionId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetOrganizationRdsServersPaged", new object[] {
                        itemId,
                        collectionId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationRdsServersPaged(int itemId, System.Nullable<int> collectionId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationRdsServersPaged", new object[] {
                        itemId,
                        collectionId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServersPaged EndGetOrganizationRdsServersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationRdsServersPagedAsync(int itemId, System.Nullable<int> collectionId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetOrganizationRdsServersPagedAsync(itemId, collectionId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetOrganizationRdsServersPagedAsync(int itemId, System.Nullable<int> collectionId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetOrganizationRdsServersPagedOperationCompleted == null)) {
                this.GetOrganizationRdsServersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationRdsServersPagedOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationRdsServersPaged", new object[] {
                        itemId,
                        collectionId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetOrganizationRdsServersPagedOperationCompleted, userState);
        }
        
        private void OnGetOrganizationRdsServersPagedOperationCompleted(object arg) {
            if ((this.GetOrganizationRdsServersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationRdsServersPagedCompleted(this, new GetOrganizationRdsServersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationFreeRdsServersPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServersPaged GetOrganizationFreeRdsServersPaged(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetOrganizationFreeRdsServersPaged", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationFreeRdsServersPaged(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationFreeRdsServersPaged", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServersPaged EndGetOrganizationFreeRdsServersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServersPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationFreeRdsServersPagedAsync(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetOrganizationFreeRdsServersPagedAsync(itemId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetOrganizationFreeRdsServersPagedAsync(int itemId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetOrganizationFreeRdsServersPagedOperationCompleted == null)) {
                this.GetOrganizationFreeRdsServersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationFreeRdsServersPagedOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationFreeRdsServersPaged", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetOrganizationFreeRdsServersPagedOperationCompleted, userState);
        }
        
        private void OnGetOrganizationFreeRdsServersPagedOperationCompleted(object arg) {
            if ((this.GetOrganizationFreeRdsServersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationFreeRdsServersPagedCompleted(this, new GetOrganizationFreeRdsServersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServer GetRdsServer(int rdsSeverId) {
            object[] results = this.Invoke("GetRdsServer", new object[] {
                        rdsSeverId});
            return ((RdsServer)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServer(int rdsSeverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServer", new object[] {
                        rdsSeverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServer EndGetRdsServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServer)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServerAsync(int rdsSeverId) {
            this.GetRdsServerAsync(rdsSeverId, null);
        }
        
        /// <remarks/>
        public void GetRdsServerAsync(int rdsSeverId, object userState) {
            if ((this.GetRdsServerOperationCompleted == null)) {
                this.GetRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServerOperationCompleted);
            }
            this.InvokeAsync("GetRdsServer", new object[] {
                        rdsSeverId}, this.GetRdsServerOperationCompleted, userState);
        }
        
        private void OnGetRdsServerOperationCompleted(object arg) {
            if ((this.GetRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServerCompleted(this, new GetRdsServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetRDServerNewConnectionAllowed", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetRDServerNewConnectionAllowed(int itemId, string newConnectionAllowed, int rdsSeverId) {
            object[] results = this.Invoke("SetRDServerNewConnectionAllowed", new object[] {
                        itemId,
                        newConnectionAllowed,
                        rdsSeverId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetRDServerNewConnectionAllowed(int itemId, string newConnectionAllowed, int rdsSeverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetRDServerNewConnectionAllowed", new object[] {
                        itemId,
                        newConnectionAllowed,
                        rdsSeverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetRDServerNewConnectionAllowed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetRDServerNewConnectionAllowedAsync(int itemId, string newConnectionAllowed, int rdsSeverId) {
            this.SetRDServerNewConnectionAllowedAsync(itemId, newConnectionAllowed, rdsSeverId, null);
        }
        
        /// <remarks/>
        public void SetRDServerNewConnectionAllowedAsync(int itemId, string newConnectionAllowed, int rdsSeverId, object userState) {
            if ((this.SetRDServerNewConnectionAllowedOperationCompleted == null)) {
                this.SetRDServerNewConnectionAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRDServerNewConnectionAllowedOperationCompleted);
            }
            this.InvokeAsync("SetRDServerNewConnectionAllowed", new object[] {
                        itemId,
                        newConnectionAllowed,
                        rdsSeverId}, this.SetRDServerNewConnectionAllowedOperationCompleted, userState);
        }
        
        private void OnSetRDServerNewConnectionAllowedOperationCompleted(object arg) {
            if ((this.SetRDServerNewConnectionAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRDServerNewConnectionAllowedCompleted(this, new SetRDServerNewConnectionAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCollectionRdsServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServer[] GetCollectionRdsServers(int collectionId) {
            object[] results = this.Invoke("GetCollectionRdsServers", new object[] {
                        collectionId});
            return ((RdsServer[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCollectionRdsServers(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCollectionRdsServers", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServer[] EndGetCollectionRdsServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServer[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionRdsServersAsync(int collectionId) {
            this.GetCollectionRdsServersAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetCollectionRdsServersAsync(int collectionId, object userState) {
            if ((this.GetCollectionRdsServersOperationCompleted == null)) {
                this.GetCollectionRdsServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionRdsServersOperationCompleted);
            }
            this.InvokeAsync("GetCollectionRdsServers", new object[] {
                        collectionId}, this.GetCollectionRdsServersOperationCompleted, userState);
        }
        
        private void OnGetCollectionRdsServersOperationCompleted(object arg) {
            if ((this.GetCollectionRdsServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionRdsServersCompleted(this, new GetCollectionRdsServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationRdsServers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServer[] GetOrganizationRdsServers(int itemId) {
            object[] results = this.Invoke("GetOrganizationRdsServers", new object[] {
                        itemId});
            return ((RdsServer[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationRdsServers(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationRdsServers", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServer[] EndGetOrganizationRdsServers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServer[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationRdsServersAsync(int itemId) {
            this.GetOrganizationRdsServersAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationRdsServersAsync(int itemId, object userState) {
            if ((this.GetOrganizationRdsServersOperationCompleted == null)) {
                this.GetOrganizationRdsServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationRdsServersOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationRdsServers", new object[] {
                        itemId}, this.GetOrganizationRdsServersOperationCompleted, userState);
        }
        
        private void OnGetOrganizationRdsServersOperationCompleted(object arg) {
            if ((this.GetOrganizationRdsServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationRdsServersCompleted(this, new GetOrganizationRdsServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddRdsServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddRdsServer(RdsServer rdsServer) {
            object[] results = this.Invoke("AddRdsServer", new object[] {
                        rdsServer});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRdsServer(RdsServer rdsServer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRdsServer", new object[] {
                        rdsServer}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddRdsServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddRdsServerAsync(RdsServer rdsServer) {
            this.AddRdsServerAsync(rdsServer, null);
        }
        
        /// <remarks/>
        public void AddRdsServerAsync(RdsServer rdsServer, object userState) {
            if ((this.AddRdsServerOperationCompleted == null)) {
                this.AddRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRdsServerOperationCompleted);
            }
            this.InvokeAsync("AddRdsServer", new object[] {
                        rdsServer}, this.AddRdsServerOperationCompleted, userState);
        }
        
        private void OnAddRdsServerOperationCompleted(object arg) {
            if ((this.AddRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRdsServerCompleted(this, new AddRdsServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddRdsServerToCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddRdsServerToCollection(int itemId, RdsServer rdsServer, RdsCollection rdsCollection) {
            object[] results = this.Invoke("AddRdsServerToCollection", new object[] {
                        itemId,
                        rdsServer,
                        rdsCollection});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRdsServerToCollection(int itemId, RdsServer rdsServer, RdsCollection rdsCollection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRdsServerToCollection", new object[] {
                        itemId,
                        rdsServer,
                        rdsCollection}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddRdsServerToCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddRdsServerToCollectionAsync(int itemId, RdsServer rdsServer, RdsCollection rdsCollection) {
            this.AddRdsServerToCollectionAsync(itemId, rdsServer, rdsCollection, null);
        }
        
        /// <remarks/>
        public void AddRdsServerToCollectionAsync(int itemId, RdsServer rdsServer, RdsCollection rdsCollection, object userState) {
            if ((this.AddRdsServerToCollectionOperationCompleted == null)) {
                this.AddRdsServerToCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRdsServerToCollectionOperationCompleted);
            }
            this.InvokeAsync("AddRdsServerToCollection", new object[] {
                        itemId,
                        rdsServer,
                        rdsCollection}, this.AddRdsServerToCollectionOperationCompleted, userState);
        }
        
        private void OnAddRdsServerToCollectionOperationCompleted(object arg) {
            if ((this.AddRdsServerToCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRdsServerToCollectionCompleted(this, new AddRdsServerToCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddRdsServerToOrganization", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddRdsServerToOrganization(int itemId, int serverId) {
            object[] results = this.Invoke("AddRdsServerToOrganization", new object[] {
                        itemId,
                        serverId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRdsServerToOrganization(int itemId, int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRdsServerToOrganization", new object[] {
                        itemId,
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddRdsServerToOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddRdsServerToOrganizationAsync(int itemId, int serverId) {
            this.AddRdsServerToOrganizationAsync(itemId, serverId, null);
        }
        
        /// <remarks/>
        public void AddRdsServerToOrganizationAsync(int itemId, int serverId, object userState) {
            if ((this.AddRdsServerToOrganizationOperationCompleted == null)) {
                this.AddRdsServerToOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRdsServerToOrganizationOperationCompleted);
            }
            this.InvokeAsync("AddRdsServerToOrganization", new object[] {
                        itemId,
                        serverId}, this.AddRdsServerToOrganizationOperationCompleted, userState);
        }
        
        private void OnAddRdsServerToOrganizationOperationCompleted(object arg) {
            if ((this.AddRdsServerToOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRdsServerToOrganizationCompleted(this, new AddRdsServerToOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RemoveRdsServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RemoveRdsServer(int rdsServerId) {
            object[] results = this.Invoke("RemoveRdsServer", new object[] {
                        rdsServerId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRdsServer(int rdsServerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRdsServer", new object[] {
                        rdsServerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndRemoveRdsServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRdsServerAsync(int rdsServerId) {
            this.RemoveRdsServerAsync(rdsServerId, null);
        }
        
        /// <remarks/>
        public void RemoveRdsServerAsync(int rdsServerId, object userState) {
            if ((this.RemoveRdsServerOperationCompleted == null)) {
                this.RemoveRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRdsServerOperationCompleted);
            }
            this.InvokeAsync("RemoveRdsServer", new object[] {
                        rdsServerId}, this.RemoveRdsServerOperationCompleted, userState);
        }
        
        private void OnRemoveRdsServerOperationCompleted(object arg) {
            if ((this.RemoveRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRdsServerCompleted(this, new RemoveRdsServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RemoveRdsServerFromCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RemoveRdsServerFromCollection(int itemId, RdsServer rdsServer, RdsCollection rdsCollection) {
            object[] results = this.Invoke("RemoveRdsServerFromCollection", new object[] {
                        itemId,
                        rdsServer,
                        rdsCollection});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRdsServerFromCollection(int itemId, RdsServer rdsServer, RdsCollection rdsCollection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRdsServerFromCollection", new object[] {
                        itemId,
                        rdsServer,
                        rdsCollection}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndRemoveRdsServerFromCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRdsServerFromCollectionAsync(int itemId, RdsServer rdsServer, RdsCollection rdsCollection) {
            this.RemoveRdsServerFromCollectionAsync(itemId, rdsServer, rdsCollection, null);
        }
        
        /// <remarks/>
        public void RemoveRdsServerFromCollectionAsync(int itemId, RdsServer rdsServer, RdsCollection rdsCollection, object userState) {
            if ((this.RemoveRdsServerFromCollectionOperationCompleted == null)) {
                this.RemoveRdsServerFromCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRdsServerFromCollectionOperationCompleted);
            }
            this.InvokeAsync("RemoveRdsServerFromCollection", new object[] {
                        itemId,
                        rdsServer,
                        rdsCollection}, this.RemoveRdsServerFromCollectionOperationCompleted, userState);
        }
        
        private void OnRemoveRdsServerFromCollectionOperationCompleted(object arg) {
            if ((this.RemoveRdsServerFromCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRdsServerFromCollectionCompleted(this, new RemoveRdsServerFromCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RemoveRdsServerFromOrganization", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RemoveRdsServerFromOrganization(int itemId, int rdsServerId) {
            object[] results = this.Invoke("RemoveRdsServerFromOrganization", new object[] {
                        itemId,
                        rdsServerId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRdsServerFromOrganization(int itemId, int rdsServerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRdsServerFromOrganization", new object[] {
                        itemId,
                        rdsServerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndRemoveRdsServerFromOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRdsServerFromOrganizationAsync(int itemId, int rdsServerId) {
            this.RemoveRdsServerFromOrganizationAsync(itemId, rdsServerId, null);
        }
        
        /// <remarks/>
        public void RemoveRdsServerFromOrganizationAsync(int itemId, int rdsServerId, object userState) {
            if ((this.RemoveRdsServerFromOrganizationOperationCompleted == null)) {
                this.RemoveRdsServerFromOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRdsServerFromOrganizationOperationCompleted);
            }
            this.InvokeAsync("RemoveRdsServerFromOrganization", new object[] {
                        itemId,
                        rdsServerId}, this.RemoveRdsServerFromOrganizationOperationCompleted, userState);
        }
        
        private void OnRemoveRdsServerFromOrganizationOperationCompleted(object arg) {
            if ((this.RemoveRdsServerFromOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRdsServerFromOrganizationCompleted(this, new RemoveRdsServerFromOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateRdsServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdateRdsServer(RdsServer rdsServer) {
            object[] results = this.Invoke("UpdateRdsServer", new object[] {
                        rdsServer});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateRdsServer(RdsServer rdsServer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateRdsServer", new object[] {
                        rdsServer}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdateRdsServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRdsServerAsync(RdsServer rdsServer) {
            this.UpdateRdsServerAsync(rdsServer, null);
        }
        
        /// <remarks/>
        public void UpdateRdsServerAsync(RdsServer rdsServer, object userState) {
            if ((this.UpdateRdsServerOperationCompleted == null)) {
                this.UpdateRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRdsServerOperationCompleted);
            }
            this.InvokeAsync("UpdateRdsServer", new object[] {
                        rdsServer}, this.UpdateRdsServerOperationCompleted, userState);
        }
        
        private void OnUpdateRdsServerOperationCompleted(object arg) {
            if ((this.UpdateRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRdsServerCompleted(this, new UpdateRdsServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCollectionUsers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser[] GetRdsCollectionUsers(int collectionId) {
            object[] results = this.Invoke("GetRdsCollectionUsers", new object[] {
                        collectionId});
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionUsers(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionUsers", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUser[] EndGetRdsCollectionUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionUsersAsync(int collectionId) {
            this.GetRdsCollectionUsersAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionUsersAsync(int collectionId, object userState) {
            if ((this.GetRdsCollectionUsersOperationCompleted == null)) {
                this.GetRdsCollectionUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionUsersOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionUsers", new object[] {
                        collectionId}, this.GetRdsCollectionUsersOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionUsersOperationCompleted(object arg) {
            if ((this.GetRdsCollectionUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionUsersCompleted(this, new GetRdsCollectionUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetUsersToRdsCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetUsersToRdsCollection(int itemId, int collectionId, OrganizationUser[] users) {
            object[] results = this.Invoke("SetUsersToRdsCollection", new object[] {
                        itemId,
                        collectionId,
                        users});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUsersToRdsCollection(int itemId, int collectionId, OrganizationUser[] users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUsersToRdsCollection", new object[] {
                        itemId,
                        collectionId,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetUsersToRdsCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetUsersToRdsCollectionAsync(int itemId, int collectionId, OrganizationUser[] users) {
            this.SetUsersToRdsCollectionAsync(itemId, collectionId, users, null);
        }
        
        /// <remarks/>
        public void SetUsersToRdsCollectionAsync(int itemId, int collectionId, OrganizationUser[] users, object userState) {
            if ((this.SetUsersToRdsCollectionOperationCompleted == null)) {
                this.SetUsersToRdsCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUsersToRdsCollectionOperationCompleted);
            }
            this.InvokeAsync("SetUsersToRdsCollection", new object[] {
                        itemId,
                        collectionId,
                        users}, this.SetUsersToRdsCollectionOperationCompleted, userState);
        }
        
        private void OnSetUsersToRdsCollectionOperationCompleted(object arg) {
            if ((this.SetUsersToRdsCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUsersToRdsCollectionCompleted(this, new SetUsersToRdsCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCollectionRemoteApplications", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RemoteApplication[] GetCollectionRemoteApplications(int itemId, string collectionName) {
            object[] results = this.Invoke("GetCollectionRemoteApplications", new object[] {
                        itemId,
                        collectionName});
            return ((RemoteApplication[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCollectionRemoteApplications(int itemId, string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCollectionRemoteApplications", new object[] {
                        itemId,
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RemoteApplication[] EndGetCollectionRemoteApplications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RemoteApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionRemoteApplicationsAsync(int itemId, string collectionName) {
            this.GetCollectionRemoteApplicationsAsync(itemId, collectionName, null);
        }
        
        /// <remarks/>
        public void GetCollectionRemoteApplicationsAsync(int itemId, string collectionName, object userState) {
            if ((this.GetCollectionRemoteApplicationsOperationCompleted == null)) {
                this.GetCollectionRemoteApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionRemoteApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetCollectionRemoteApplications", new object[] {
                        itemId,
                        collectionName}, this.GetCollectionRemoteApplicationsOperationCompleted, userState);
        }
        
        private void OnGetCollectionRemoteApplicationsOperationCompleted(object arg) {
            if ((this.GetCollectionRemoteApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionRemoteApplicationsCompleted(this, new GetCollectionRemoteApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetAvailableRemoteApplications", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StartMenuApp[] GetAvailableRemoteApplications(int itemId, string collectionName) {
            object[] results = this.Invoke("GetAvailableRemoteApplications", new object[] {
                        itemId,
                        collectionName});
            return ((StartMenuApp[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableRemoteApplications(int itemId, string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableRemoteApplications", new object[] {
                        itemId,
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public StartMenuApp[] EndGetAvailableRemoteApplications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StartMenuApp[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRemoteApplicationsAsync(int itemId, string collectionName) {
            this.GetAvailableRemoteApplicationsAsync(itemId, collectionName, null);
        }
        
        /// <remarks/>
        public void GetAvailableRemoteApplicationsAsync(int itemId, string collectionName, object userState) {
            if ((this.GetAvailableRemoteApplicationsOperationCompleted == null)) {
                this.GetAvailableRemoteApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRemoteApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRemoteApplications", new object[] {
                        itemId,
                        collectionName}, this.GetAvailableRemoteApplicationsOperationCompleted, userState);
        }
        
        private void OnGetAvailableRemoteApplicationsOperationCompleted(object arg) {
            if ((this.GetAvailableRemoteApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRemoteApplicationsCompleted(this, new GetAvailableRemoteApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddRemoteApplicationToCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddRemoteApplicationToCollection(int itemId, RdsCollection collection, RemoteApplication application) {
            object[] results = this.Invoke("AddRemoteApplicationToCollection", new object[] {
                        itemId,
                        collection,
                        application});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRemoteApplicationToCollection(int itemId, RdsCollection collection, RemoteApplication application, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRemoteApplicationToCollection", new object[] {
                        itemId,
                        collection,
                        application}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddRemoteApplicationToCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteApplicationToCollectionAsync(int itemId, RdsCollection collection, RemoteApplication application) {
            this.AddRemoteApplicationToCollectionAsync(itemId, collection, application, null);
        }
        
        /// <remarks/>
        public void AddRemoteApplicationToCollectionAsync(int itemId, RdsCollection collection, RemoteApplication application, object userState) {
            if ((this.AddRemoteApplicationToCollectionOperationCompleted == null)) {
                this.AddRemoteApplicationToCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteApplicationToCollectionOperationCompleted);
            }
            this.InvokeAsync("AddRemoteApplicationToCollection", new object[] {
                        itemId,
                        collection,
                        application}, this.AddRemoteApplicationToCollectionOperationCompleted, userState);
        }
        
        private void OnAddRemoteApplicationToCollectionOperationCompleted(object arg) {
            if ((this.AddRemoteApplicationToCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteApplicationToCollectionCompleted(this, new AddRemoteApplicationToCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RemoveRemoteApplicationFromCollectio" +
            "n", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RemoveRemoteApplicationFromCollection(int itemId, RdsCollection collection, RemoteApplication application) {
            object[] results = this.Invoke("RemoveRemoteApplicationFromCollection", new object[] {
                        itemId,
                        collection,
                        application});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveRemoteApplicationFromCollection(int itemId, RdsCollection collection, RemoteApplication application, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveRemoteApplicationFromCollection", new object[] {
                        itemId,
                        collection,
                        application}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndRemoveRemoteApplicationFromCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRemoteApplicationFromCollectionAsync(int itemId, RdsCollection collection, RemoteApplication application) {
            this.RemoveRemoteApplicationFromCollectionAsync(itemId, collection, application, null);
        }
        
        /// <remarks/>
        public void RemoveRemoteApplicationFromCollectionAsync(int itemId, RdsCollection collection, RemoteApplication application, object userState) {
            if ((this.RemoveRemoteApplicationFromCollectionOperationCompleted == null)) {
                this.RemoveRemoteApplicationFromCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRemoteApplicationFromCollectionOperationCompleted);
            }
            this.InvokeAsync("RemoveRemoteApplicationFromCollection", new object[] {
                        itemId,
                        collection,
                        application}, this.RemoveRemoteApplicationFromCollectionOperationCompleted, userState);
        }
        
        private void OnRemoveRemoteApplicationFromCollectionOperationCompleted(object arg) {
            if ((this.RemoveRemoteApplicationFromCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRemoteApplicationFromCollectionCompleted(this, new RemoveRemoteApplicationFromCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetRemoteApplicationsToRdsCollection" +
            "", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetRemoteApplicationsToRdsCollection(int itemId, int collectionId, RemoteApplication[] remoteApps) {
            object[] results = this.Invoke("SetRemoteApplicationsToRdsCollection", new object[] {
                        itemId,
                        collectionId,
                        remoteApps});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetRemoteApplicationsToRdsCollection(int itemId, int collectionId, RemoteApplication[] remoteApps, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetRemoteApplicationsToRdsCollection", new object[] {
                        itemId,
                        collectionId,
                        remoteApps}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetRemoteApplicationsToRdsCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetRemoteApplicationsToRdsCollectionAsync(int itemId, int collectionId, RemoteApplication[] remoteApps) {
            this.SetRemoteApplicationsToRdsCollectionAsync(itemId, collectionId, remoteApps, null);
        }
        
        /// <remarks/>
        public void SetRemoteApplicationsToRdsCollectionAsync(int itemId, int collectionId, RemoteApplication[] remoteApps, object userState) {
            if ((this.SetRemoteApplicationsToRdsCollectionOperationCompleted == null)) {
                this.SetRemoteApplicationsToRdsCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRemoteApplicationsToRdsCollectionOperationCompleted);
            }
            this.InvokeAsync("SetRemoteApplicationsToRdsCollection", new object[] {
                        itemId,
                        collectionId,
                        remoteApps}, this.SetRemoteApplicationsToRdsCollectionOperationCompleted, userState);
        }
        
        private void OnSetRemoteApplicationsToRdsCollectionOperationCompleted(object arg) {
            if ((this.SetRemoteApplicationsToRdsCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRemoteApplicationsToRdsCollectionCompleted(this, new SetRemoteApplicationsToRdsCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationRdsUsersCount", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOrganizationRdsUsersCount(int itemId) {
            object[] results = this.Invoke("GetOrganizationRdsUsersCount", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationRdsUsersCount(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationRdsUsersCount", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetOrganizationRdsUsersCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationRdsUsersCountAsync(int itemId) {
            this.GetOrganizationRdsUsersCountAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationRdsUsersCountAsync(int itemId, object userState) {
            if ((this.GetOrganizationRdsUsersCountOperationCompleted == null)) {
                this.GetOrganizationRdsUsersCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationRdsUsersCountOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationRdsUsersCount", new object[] {
                        itemId}, this.GetOrganizationRdsUsersCountOperationCompleted, userState);
        }
        
        private void OnGetOrganizationRdsUsersCountOperationCompleted(object arg) {
            if ((this.GetOrganizationRdsUsersCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationRdsUsersCountCompleted(this, new GetOrganizationRdsUsersCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationRdsServersCount", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOrganizationRdsServersCount(int itemId) {
            object[] results = this.Invoke("GetOrganizationRdsServersCount", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationRdsServersCount(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationRdsServersCount", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetOrganizationRdsServersCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationRdsServersCountAsync(int itemId) {
            this.GetOrganizationRdsServersCountAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationRdsServersCountAsync(int itemId, object userState) {
            if ((this.GetOrganizationRdsServersCountOperationCompleted == null)) {
                this.GetOrganizationRdsServersCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationRdsServersCountOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationRdsServersCount", new object[] {
                        itemId}, this.GetOrganizationRdsServersCountOperationCompleted, userState);
        }
        
        private void OnGetOrganizationRdsServersCountOperationCompleted(object arg) {
            if ((this.GetOrganizationRdsServersCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationRdsServersCountCompleted(this, new GetOrganizationRdsServersCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOrganizationRdsCollectionsCount", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOrganizationRdsCollectionsCount(int itemId) {
            object[] results = this.Invoke("GetOrganizationRdsCollectionsCount", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizationRdsCollectionsCount(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizationRdsCollectionsCount", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetOrganizationRdsCollectionsCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationRdsCollectionsCountAsync(int itemId) {
            this.GetOrganizationRdsCollectionsCountAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationRdsCollectionsCountAsync(int itemId, object userState) {
            if ((this.GetOrganizationRdsCollectionsCountOperationCompleted == null)) {
                this.GetOrganizationRdsCollectionsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationRdsCollectionsCountOperationCompleted);
            }
            this.InvokeAsync("GetOrganizationRdsCollectionsCount", new object[] {
                        itemId}, this.GetOrganizationRdsCollectionsCountOperationCompleted, userState);
        }
        
        private void OnGetOrganizationRdsCollectionsCountOperationCompleted(object arg) {
            if ((this.GetOrganizationRdsCollectionsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationRdsCollectionsCountCompleted(this, new GetOrganizationRdsCollectionsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetApplicationUsers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetApplicationUsers(int itemId, int collectionId, RemoteApplication remoteApp) {
            object[] results = this.Invoke("GetApplicationUsers", new object[] {
                        itemId,
                        collectionId,
                        remoteApp});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationUsers(int itemId, int collectionId, RemoteApplication remoteApp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetApplicationUsers", new object[] {
                        itemId,
                        collectionId,
                        remoteApp}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetApplicationUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationUsersAsync(int itemId, int collectionId, RemoteApplication remoteApp) {
            this.GetApplicationUsersAsync(itemId, collectionId, remoteApp, null);
        }
        
        /// <remarks/>
        public void GetApplicationUsersAsync(int itemId, int collectionId, RemoteApplication remoteApp, object userState) {
            if ((this.GetApplicationUsersOperationCompleted == null)) {
                this.GetApplicationUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationUsersOperationCompleted);
            }
            this.InvokeAsync("GetApplicationUsers", new object[] {
                        itemId,
                        collectionId,
                        remoteApp}, this.GetApplicationUsersOperationCompleted, userState);
        }
        
        private void OnGetApplicationUsersOperationCompleted(object arg) {
            if ((this.GetApplicationUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationUsersCompleted(this, new GetApplicationUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetApplicationUsers", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetApplicationUsers(int itemId, int collectionId, RemoteApplication remoteApp, string[] users) {
            object[] results = this.Invoke("SetApplicationUsers", new object[] {
                        itemId,
                        collectionId,
                        remoteApp,
                        users});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetApplicationUsers(int itemId, int collectionId, RemoteApplication remoteApp, string[] users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetApplicationUsers", new object[] {
                        itemId,
                        collectionId,
                        remoteApp,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetApplicationUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetApplicationUsersAsync(int itemId, int collectionId, RemoteApplication remoteApp, string[] users) {
            this.SetApplicationUsersAsync(itemId, collectionId, remoteApp, users, null);
        }
        
        /// <remarks/>
        public void SetApplicationUsersAsync(int itemId, int collectionId, RemoteApplication remoteApp, string[] users, object userState) {
            if ((this.SetApplicationUsersOperationCompleted == null)) {
                this.SetApplicationUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationUsersOperationCompleted);
            }
            this.InvokeAsync("SetApplicationUsers", new object[] {
                        itemId,
                        collectionId,
                        remoteApp,
                        users}, this.SetApplicationUsersOperationCompleted, userState);
        }
        
        private void OnSetApplicationUsersOperationCompleted(object arg) {
            if ((this.SetApplicationUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationUsersCompleted(this, new SetApplicationUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsUserSessions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsUserSession[] GetRdsUserSessions(int collectionId) {
            object[] results = this.Invoke("GetRdsUserSessions", new object[] {
                        collectionId});
            return ((RdsUserSession[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsUserSessions(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsUserSessions", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsUserSession[] EndGetRdsUserSessions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsUserSession[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsUserSessionsAsync(int collectionId) {
            this.GetRdsUserSessionsAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsUserSessionsAsync(int collectionId, object userState) {
            if ((this.GetRdsUserSessionsOperationCompleted == null)) {
                this.GetRdsUserSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsUserSessionsOperationCompleted);
            }
            this.InvokeAsync("GetRdsUserSessions", new object[] {
                        collectionId}, this.GetRdsUserSessionsOperationCompleted, userState);
        }
        
        private void OnGetRdsUserSessionsOperationCompleted(object arg) {
            if ((this.GetRdsUserSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsUserSessionsCompleted(this, new GetRdsUserSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/LogOffRdsUser", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject LogOffRdsUser(int itemId, string unifiedSessionId, string hostServer) {
            object[] results = this.Invoke("LogOffRdsUser", new object[] {
                        itemId,
                        unifiedSessionId,
                        hostServer});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogOffRdsUser(int itemId, string unifiedSessionId, string hostServer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogOffRdsUser", new object[] {
                        itemId,
                        unifiedSessionId,
                        hostServer}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndLogOffRdsUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void LogOffRdsUserAsync(int itemId, string unifiedSessionId, string hostServer) {
            this.LogOffRdsUserAsync(itemId, unifiedSessionId, hostServer, null);
        }
        
        /// <remarks/>
        public void LogOffRdsUserAsync(int itemId, string unifiedSessionId, string hostServer, object userState) {
            if ((this.LogOffRdsUserOperationCompleted == null)) {
                this.LogOffRdsUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogOffRdsUserOperationCompleted);
            }
            this.InvokeAsync("LogOffRdsUser", new object[] {
                        itemId,
                        unifiedSessionId,
                        hostServer}, this.LogOffRdsUserOperationCompleted, userState);
        }
        
        private void OnLogOffRdsUserOperationCompleted(object arg) {
            if ((this.LogOffRdsUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogOffRdsUserCompleted(this, new LogOffRdsUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCollectionSessionHosts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRdsCollectionSessionHosts(int collectionId) {
            object[] results = this.Invoke("GetRdsCollectionSessionHosts", new object[] {
                        collectionId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionSessionHosts(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionSessionHosts", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetRdsCollectionSessionHosts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionSessionHostsAsync(int collectionId) {
            this.GetRdsCollectionSessionHostsAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionSessionHostsAsync(int collectionId, object userState) {
            if ((this.GetRdsCollectionSessionHostsOperationCompleted == null)) {
                this.GetRdsCollectionSessionHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionSessionHostsOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionSessionHosts", new object[] {
                        collectionId}, this.GetRdsCollectionSessionHostsOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionSessionHostsOperationCompleted(object arg) {
            if ((this.GetRdsCollectionSessionHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionSessionHostsCompleted(this, new GetRdsCollectionSessionHostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsServerInfo", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServerInfo GetRdsServerInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> itemId, string fqdnName) {
            object[] results = this.Invoke("GetRdsServerInfo", new object[] {
                        itemId,
                        fqdnName});
            return ((RdsServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServerInfo(System.Nullable<int> itemId, string fqdnName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServerInfo", new object[] {
                        itemId,
                        fqdnName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServerInfo EndGetRdsServerInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServerInfoAsync(System.Nullable<int> itemId, string fqdnName) {
            this.GetRdsServerInfoAsync(itemId, fqdnName, null);
        }
        
        /// <remarks/>
        public void GetRdsServerInfoAsync(System.Nullable<int> itemId, string fqdnName, object userState) {
            if ((this.GetRdsServerInfoOperationCompleted == null)) {
                this.GetRdsServerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServerInfoOperationCompleted);
            }
            this.InvokeAsync("GetRdsServerInfo", new object[] {
                        itemId,
                        fqdnName}, this.GetRdsServerInfoOperationCompleted, userState);
        }
        
        private void OnGetRdsServerInfoOperationCompleted(object arg) {
            if ((this.GetRdsServerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServerInfoCompleted(this, new GetRdsServerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsServerStatus", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRdsServerStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> itemId, string fqdnName) {
            object[] results = this.Invoke("GetRdsServerStatus", new object[] {
                        itemId,
                        fqdnName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServerStatus(System.Nullable<int> itemId, string fqdnName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServerStatus", new object[] {
                        itemId,
                        fqdnName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRdsServerStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServerStatusAsync(System.Nullable<int> itemId, string fqdnName) {
            this.GetRdsServerStatusAsync(itemId, fqdnName, null);
        }
        
        /// <remarks/>
        public void GetRdsServerStatusAsync(System.Nullable<int> itemId, string fqdnName, object userState) {
            if ((this.GetRdsServerStatusOperationCompleted == null)) {
                this.GetRdsServerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServerStatusOperationCompleted);
            }
            this.InvokeAsync("GetRdsServerStatus", new object[] {
                        itemId,
                        fqdnName}, this.GetRdsServerStatusOperationCompleted, userState);
        }
        
        private void OnGetRdsServerStatusOperationCompleted(object arg) {
            if ((this.GetRdsServerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServerStatusCompleted(this, new GetRdsServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ShutDownRdsServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ShutDownRdsServer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> itemId, string fqdnName) {
            object[] results = this.Invoke("ShutDownRdsServer", new object[] {
                        itemId,
                        fqdnName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShutDownRdsServer(System.Nullable<int> itemId, string fqdnName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShutDownRdsServer", new object[] {
                        itemId,
                        fqdnName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndShutDownRdsServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void ShutDownRdsServerAsync(System.Nullable<int> itemId, string fqdnName) {
            this.ShutDownRdsServerAsync(itemId, fqdnName, null);
        }
        
        /// <remarks/>
        public void ShutDownRdsServerAsync(System.Nullable<int> itemId, string fqdnName, object userState) {
            if ((this.ShutDownRdsServerOperationCompleted == null)) {
                this.ShutDownRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShutDownRdsServerOperationCompleted);
            }
            this.InvokeAsync("ShutDownRdsServer", new object[] {
                        itemId,
                        fqdnName}, this.ShutDownRdsServerOperationCompleted, userState);
        }
        
        private void OnShutDownRdsServerOperationCompleted(object arg) {
            if ((this.ShutDownRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShutDownRdsServerCompleted(this, new ShutDownRdsServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RestartRdsServer", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RestartRdsServer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> itemId, string fqdnName) {
            object[] results = this.Invoke("RestartRdsServer", new object[] {
                        itemId,
                        fqdnName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRestartRdsServer(System.Nullable<int> itemId, string fqdnName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RestartRdsServer", new object[] {
                        itemId,
                        fqdnName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndRestartRdsServer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void RestartRdsServerAsync(System.Nullable<int> itemId, string fqdnName) {
            this.RestartRdsServerAsync(itemId, fqdnName, null);
        }
        
        /// <remarks/>
        public void RestartRdsServerAsync(System.Nullable<int> itemId, string fqdnName, object userState) {
            if ((this.RestartRdsServerOperationCompleted == null)) {
                this.RestartRdsServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestartRdsServerOperationCompleted);
            }
            this.InvokeAsync("RestartRdsServer", new object[] {
                        itemId,
                        fqdnName}, this.RestartRdsServerOperationCompleted, userState);
        }
        
        private void OnRestartRdsServerOperationCompleted(object arg) {
            if ((this.RestartRdsServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestartRdsServerCompleted(this, new RestartRdsServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCollectionLocalAdmins", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser[] GetRdsCollectionLocalAdmins(int collectionId) {
            object[] results = this.Invoke("GetRdsCollectionLocalAdmins", new object[] {
                        collectionId});
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCollectionLocalAdmins(int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCollectionLocalAdmins", new object[] {
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUser[] EndGetRdsCollectionLocalAdmins(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCollectionLocalAdminsAsync(int collectionId) {
            this.GetRdsCollectionLocalAdminsAsync(collectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsCollectionLocalAdminsAsync(int collectionId, object userState) {
            if ((this.GetRdsCollectionLocalAdminsOperationCompleted == null)) {
                this.GetRdsCollectionLocalAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCollectionLocalAdminsOperationCompleted);
            }
            this.InvokeAsync("GetRdsCollectionLocalAdmins", new object[] {
                        collectionId}, this.GetRdsCollectionLocalAdminsOperationCompleted, userState);
        }
        
        private void OnGetRdsCollectionLocalAdminsOperationCompleted(object arg) {
            if ((this.GetRdsCollectionLocalAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCollectionLocalAdminsCompleted(this, new GetRdsCollectionLocalAdminsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SaveRdsCollectionLocalAdmins", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SaveRdsCollectionLocalAdmins(OrganizationUser[] users, int collectionId) {
            object[] results = this.Invoke("SaveRdsCollectionLocalAdmins", new object[] {
                        users,
                        collectionId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveRdsCollectionLocalAdmins(OrganizationUser[] users, int collectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveRdsCollectionLocalAdmins", new object[] {
                        users,
                        collectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSaveRdsCollectionLocalAdmins(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRdsCollectionLocalAdminsAsync(OrganizationUser[] users, int collectionId) {
            this.SaveRdsCollectionLocalAdminsAsync(users, collectionId, null);
        }
        
        /// <remarks/>
        public void SaveRdsCollectionLocalAdminsAsync(OrganizationUser[] users, int collectionId, object userState) {
            if ((this.SaveRdsCollectionLocalAdminsOperationCompleted == null)) {
                this.SaveRdsCollectionLocalAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRdsCollectionLocalAdminsOperationCompleted);
            }
            this.InvokeAsync("SaveRdsCollectionLocalAdmins", new object[] {
                        users,
                        collectionId}, this.SaveRdsCollectionLocalAdminsOperationCompleted, userState);
        }
        
        private void OnSaveRdsCollectionLocalAdminsOperationCompleted(object arg) {
            if ((this.SaveRdsCollectionLocalAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRdsCollectionLocalAdminsCompleted(this, new SaveRdsCollectionLocalAdminsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallSessionHostsCertificate", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject InstallSessionHostsCertificate(RdsServer rdsServer) {
            object[] results = this.Invoke("InstallSessionHostsCertificate", new object[] {
                        rdsServer});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallSessionHostsCertificate(RdsServer rdsServer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallSessionHostsCertificate", new object[] {
                        rdsServer}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndInstallSessionHostsCertificate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void InstallSessionHostsCertificateAsync(RdsServer rdsServer) {
            this.InstallSessionHostsCertificateAsync(rdsServer, null);
        }
        
        /// <remarks/>
        public void InstallSessionHostsCertificateAsync(RdsServer rdsServer, object userState) {
            if ((this.InstallSessionHostsCertificateOperationCompleted == null)) {
                this.InstallSessionHostsCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallSessionHostsCertificateOperationCompleted);
            }
            this.InvokeAsync("InstallSessionHostsCertificate", new object[] {
                        rdsServer}, this.InstallSessionHostsCertificateOperationCompleted, userState);
        }
        
        private void OnInstallSessionHostsCertificateOperationCompleted(object arg) {
            if ((this.InstallSessionHostsCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallSessionHostsCertificateCompleted(this, new InstallSessionHostsCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCertificateByServiceId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCertificate GetRdsCertificateByServiceId(int serviceId) {
            object[] results = this.Invoke("GetRdsCertificateByServiceId", new object[] {
                        serviceId});
            return ((RdsCertificate)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCertificateByServiceId(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCertificateByServiceId", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCertificate EndGetRdsCertificateByServiceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCertificate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCertificateByServiceIdAsync(int serviceId) {
            this.GetRdsCertificateByServiceIdAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetRdsCertificateByServiceIdAsync(int serviceId, object userState) {
            if ((this.GetRdsCertificateByServiceIdOperationCompleted == null)) {
                this.GetRdsCertificateByServiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCertificateByServiceIdOperationCompleted);
            }
            this.InvokeAsync("GetRdsCertificateByServiceId", new object[] {
                        serviceId}, this.GetRdsCertificateByServiceIdOperationCompleted, userState);
        }
        
        private void OnGetRdsCertificateByServiceIdOperationCompleted(object arg) {
            if ((this.GetRdsCertificateByServiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCertificateByServiceIdCompleted(this, new GetRdsCertificateByServiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsCertificateByItemId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsCertificate GetRdsCertificateByItemId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> itemId) {
            object[] results = this.Invoke("GetRdsCertificateByItemId", new object[] {
                        itemId});
            return ((RdsCertificate)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsCertificateByItemId(System.Nullable<int> itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsCertificateByItemId", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsCertificate EndGetRdsCertificateByItemId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsCertificate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsCertificateByItemIdAsync(System.Nullable<int> itemId) {
            this.GetRdsCertificateByItemIdAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetRdsCertificateByItemIdAsync(System.Nullable<int> itemId, object userState) {
            if ((this.GetRdsCertificateByItemIdOperationCompleted == null)) {
                this.GetRdsCertificateByItemIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsCertificateByItemIdOperationCompleted);
            }
            this.InvokeAsync("GetRdsCertificateByItemId", new object[] {
                        itemId}, this.GetRdsCertificateByItemIdOperationCompleted, userState);
        }
        
        private void OnGetRdsCertificateByItemIdOperationCompleted(object arg) {
            if ((this.GetRdsCertificateByItemIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsCertificateByItemIdCompleted(this, new GetRdsCertificateByItemIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddRdsCertificate", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddRdsCertificate(RdsCertificate certificate) {
            object[] results = this.Invoke("AddRdsCertificate", new object[] {
                        certificate});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRdsCertificate(RdsCertificate certificate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRdsCertificate", new object[] {
                        certificate}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddRdsCertificate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddRdsCertificateAsync(RdsCertificate certificate) {
            this.AddRdsCertificateAsync(certificate, null);
        }
        
        /// <remarks/>
        public void AddRdsCertificateAsync(RdsCertificate certificate, object userState) {
            if ((this.AddRdsCertificateOperationCompleted == null)) {
                this.AddRdsCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRdsCertificateOperationCompleted);
            }
            this.InvokeAsync("AddRdsCertificate", new object[] {
                        certificate}, this.AddRdsCertificateOperationCompleted, userState);
        }
        
        private void OnAddRdsCertificateOperationCompleted(object arg) {
            if ((this.AddRdsCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRdsCertificateCompleted(this, new AddRdsCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsServices", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServiceInfo[] GetRdsServices() {
            object[] results = this.Invoke("GetRdsServices", new object[0]);
            return ((ServiceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServices(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServices", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceInfo[] EndGetRdsServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServicesAsync() {
            this.GetRdsServicesAsync(null);
        }
        
        /// <remarks/>
        public void GetRdsServicesAsync(object userState) {
            if ((this.GetRdsServicesOperationCompleted == null)) {
                this.GetRdsServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServicesOperationCompleted);
            }
            this.InvokeAsync("GetRdsServices", new object[0], this.GetRdsServicesOperationCompleted, userState);
        }
        
        private void OnGetRdsServicesOperationCompleted(object arg) {
            if ((this.GetRdsServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServicesCompleted(this, new GetRdsServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsSetupLetter", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRdsSetupLetter(int itemId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> accountId) {
            object[] results = this.Invoke("GetRdsSetupLetter", new object[] {
                        itemId,
                        accountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsSetupLetter(int itemId, System.Nullable<int> accountId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsSetupLetter", new object[] {
                        itemId,
                        accountId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRdsSetupLetter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsSetupLetterAsync(int itemId, System.Nullable<int> accountId) {
            this.GetRdsSetupLetterAsync(itemId, accountId, null);
        }
        
        /// <remarks/>
        public void GetRdsSetupLetterAsync(int itemId, System.Nullable<int> accountId, object userState) {
            if ((this.GetRdsSetupLetterOperationCompleted == null)) {
                this.GetRdsSetupLetterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsSetupLetterOperationCompleted);
            }
            this.InvokeAsync("GetRdsSetupLetter", new object[] {
                        itemId,
                        accountId}, this.GetRdsSetupLetterOperationCompleted, userState);
        }
        
        private void OnGetRdsSetupLetterOperationCompleted(object arg) {
            if ((this.GetRdsSetupLetterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsSetupLetterCompleted(this, new GetRdsSetupLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SendRdsSetupLetter", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendRdsSetupLetter(int itemId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> accountId, string to, string cc) {
            object[] results = this.Invoke("SendRdsSetupLetter", new object[] {
                        itemId,
                        accountId,
                        to,
                        cc});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendRdsSetupLetter(int itemId, System.Nullable<int> accountId, string to, string cc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendRdsSetupLetter", new object[] {
                        itemId,
                        accountId,
                        to,
                        cc}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSendRdsSetupLetter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendRdsSetupLetterAsync(int itemId, System.Nullable<int> accountId, string to, string cc) {
            this.SendRdsSetupLetterAsync(itemId, accountId, to, cc, null);
        }
        
        /// <remarks/>
        public void SendRdsSetupLetterAsync(int itemId, System.Nullable<int> accountId, string to, string cc, object userState) {
            if ((this.SendRdsSetupLetterOperationCompleted == null)) {
                this.SendRdsSetupLetterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendRdsSetupLetterOperationCompleted);
            }
            this.InvokeAsync("SendRdsSetupLetter", new object[] {
                        itemId,
                        accountId,
                        to,
                        cc}, this.SendRdsSetupLetterOperationCompleted, userState);
        }
        
        private void OnSendRdsSetupLetterOperationCompleted(object arg) {
            if ((this.SendRdsSetupLetterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendRdsSetupLetterCompleted(this, new SendRdsSetupLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsServerSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsServerSettings GetRdsServerSettings(int serverId, string settingsName) {
            object[] results = this.Invoke("GetRdsServerSettings", new object[] {
                        serverId,
                        settingsName});
            return ((RdsServerSettings)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsServerSettings(int serverId, string settingsName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsServerSettings", new object[] {
                        serverId,
                        settingsName}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsServerSettings EndGetRdsServerSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsServerSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsServerSettingsAsync(int serverId, string settingsName) {
            this.GetRdsServerSettingsAsync(serverId, settingsName, null);
        }
        
        /// <remarks/>
        public void GetRdsServerSettingsAsync(int serverId, string settingsName, object userState) {
            if ((this.GetRdsServerSettingsOperationCompleted == null)) {
                this.GetRdsServerSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsServerSettingsOperationCompleted);
            }
            this.InvokeAsync("GetRdsServerSettings", new object[] {
                        serverId,
                        settingsName}, this.GetRdsServerSettingsOperationCompleted, userState);
        }
        
        private void OnGetRdsServerSettingsOperationCompleted(object arg) {
            if ((this.GetRdsServerSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsServerSettingsCompleted(this, new GetRdsServerSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateRdsServerSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateRdsServerSettings(int serverId, string settingsName, RdsServerSettings settings) {
            object[] results = this.Invoke("UpdateRdsServerSettings", new object[] {
                        serverId,
                        settingsName,
                        settings});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateRdsServerSettings(int serverId, string settingsName, RdsServerSettings settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateRdsServerSettings", new object[] {
                        serverId,
                        settingsName,
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateRdsServerSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRdsServerSettingsAsync(int serverId, string settingsName, RdsServerSettings settings) {
            this.UpdateRdsServerSettingsAsync(serverId, settingsName, settings, null);
        }
        
        /// <remarks/>
        public void UpdateRdsServerSettingsAsync(int serverId, string settingsName, RdsServerSettings settings, object userState) {
            if ((this.UpdateRdsServerSettingsOperationCompleted == null)) {
                this.UpdateRdsServerSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRdsServerSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateRdsServerSettings", new object[] {
                        serverId,
                        settingsName,
                        settings}, this.UpdateRdsServerSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateRdsServerSettingsOperationCompleted(object arg) {
            if ((this.UpdateRdsServerSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRdsServerSettingsCompleted(this, new UpdateRdsServerSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ShadowSession", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ShadowSession(int itemId, string sessionId, bool control, string fqdName) {
            object[] results = this.Invoke("ShadowSession", new object[] {
                        itemId,
                        sessionId,
                        control,
                        fqdName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginShadowSession(int itemId, string sessionId, bool control, string fqdName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ShadowSession", new object[] {
                        itemId,
                        sessionId,
                        control,
                        fqdName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndShadowSession(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void ShadowSessionAsync(int itemId, string sessionId, bool control, string fqdName) {
            this.ShadowSessionAsync(itemId, sessionId, control, fqdName, null);
        }
        
        /// <remarks/>
        public void ShadowSessionAsync(int itemId, string sessionId, bool control, string fqdName, object userState) {
            if ((this.ShadowSessionOperationCompleted == null)) {
                this.ShadowSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShadowSessionOperationCompleted);
            }
            this.InvokeAsync("ShadowSession", new object[] {
                        itemId,
                        sessionId,
                        control,
                        fqdName}, this.ShadowSessionOperationCompleted, userState);
        }
        
        private void OnShadowSessionOperationCompleted(object arg) {
            if ((this.ShadowSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShadowSessionCompleted(this, new ShadowSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ImportCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ImportCollection(int itemId, string collectionName) {
            object[] results = this.Invoke("ImportCollection", new object[] {
                        itemId,
                        collectionName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginImportCollection(int itemId, string collectionName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ImportCollection", new object[] {
                        itemId,
                        collectionName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndImportCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void ImportCollectionAsync(int itemId, string collectionName) {
            this.ImportCollectionAsync(itemId, collectionName, null);
        }
        
        /// <remarks/>
        public void ImportCollectionAsync(int itemId, string collectionName, object userState) {
            if ((this.ImportCollectionOperationCompleted == null)) {
                this.ImportCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCollectionOperationCompleted);
            }
            this.InvokeAsync("ImportCollection", new object[] {
                        itemId,
                        collectionName}, this.ImportCollectionOperationCompleted, userState);
        }
        
        private void OnImportCollectionOperationCompleted(object arg) {
            if ((this.ImportCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCollectionCompleted(this, new ImportCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRemoteDesktopServiceId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRemoteDesktopServiceId(int itemId) {
            object[] results = this.Invoke("GetRemoteDesktopServiceId", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRemoteDesktopServiceId(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRemoteDesktopServiceId", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRemoteDesktopServiceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteDesktopServiceIdAsync(int itemId) {
            this.GetRemoteDesktopServiceIdAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetRemoteDesktopServiceIdAsync(int itemId, object userState) {
            if ((this.GetRemoteDesktopServiceIdOperationCompleted == null)) {
                this.GetRemoteDesktopServiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteDesktopServiceIdOperationCompleted);
            }
            this.InvokeAsync("GetRemoteDesktopServiceId", new object[] {
                        itemId}, this.GetRemoteDesktopServiceIdOperationCompleted, userState);
        }
        
        private void OnGetRemoteDesktopServiceIdOperationCompleted(object arg) {
            if ((this.GetRemoteDesktopServiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteDesktopServiceIdCompleted(this, new GetRemoteDesktopServiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SendMessage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SendMessage(RdsMessageRecipient[] recipients, string text, int itemId, int rdsCollectionId, string userName) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        recipients,
                        text,
                        itemId,
                        rdsCollectionId,
                        userName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMessage(RdsMessageRecipient[] recipients, string text, int itemId, int rdsCollectionId, string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMessage", new object[] {
                        recipients,
                        text,
                        itemId,
                        rdsCollectionId,
                        userName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSendMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(RdsMessageRecipient[] recipients, string text, int itemId, int rdsCollectionId, string userName) {
            this.SendMessageAsync(recipients, text, itemId, rdsCollectionId, userName, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(RdsMessageRecipient[] recipients, string text, int itemId, int rdsCollectionId, string userName, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        recipients,
                        text,
                        itemId,
                        rdsCollectionId,
                        userName}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRdsMessagesByCollectionId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RdsMessage[] GetRdsMessagesByCollectionId(int rdsCollectionId) {
            object[] results = this.Invoke("GetRdsMessagesByCollectionId", new object[] {
                        rdsCollectionId});
            return ((RdsMessage[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRdsMessagesByCollectionId(int rdsCollectionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRdsMessagesByCollectionId", new object[] {
                        rdsCollectionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public RdsMessage[] EndGetRdsMessagesByCollectionId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RdsMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRdsMessagesByCollectionIdAsync(int rdsCollectionId) {
            this.GetRdsMessagesByCollectionIdAsync(rdsCollectionId, null);
        }
        
        /// <remarks/>
        public void GetRdsMessagesByCollectionIdAsync(int rdsCollectionId, object userState) {
            if ((this.GetRdsMessagesByCollectionIdOperationCompleted == null)) {
                this.GetRdsMessagesByCollectionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRdsMessagesByCollectionIdOperationCompleted);
            }
            this.InvokeAsync("GetRdsMessagesByCollectionId", new object[] {
                        rdsCollectionId}, this.GetRdsMessagesByCollectionIdOperationCompleted, userState);
        }
        
        private void OnGetRdsMessagesByCollectionIdOperationCompleted(object arg) {
            if ((this.GetRdsMessagesByCollectionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRdsMessagesByCollectionIdCompleted(this, new GetRdsMessagesByCollectionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionCompletedEventHandler(object sender, GetRdsCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionSettingsCompletedEventHandler(object sender, GetRdsCollectionSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCollectionSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCollectionSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationRdsCollectionsCompletedEventHandler(object sender, GetOrganizationRdsCollectionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationRdsCollectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationRdsCollectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCollection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCollection[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRdsCollectionCompletedEventHandler(object sender, AddRdsCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRdsCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRdsCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void EditRdsCollectionCompletedEventHandler(object sender, EditRdsCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditRdsCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditRdsCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void EditRdsCollectionSettingsCompletedEventHandler(object sender, EditRdsCollectionSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditRdsCollectionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditRdsCollectionSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionsPagedCompletedEventHandler(object sender, GetRdsCollectionsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCollectionPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCollectionPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRdsCollectionCompletedEventHandler(object sender, RemoveRdsCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRdsCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRdsCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServersPagedCompletedEventHandler(object sender, GetRdsServersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServersPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServersPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetFreeRdsServersPagedCompletedEventHandler(object sender, GetFreeRdsServersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFreeRdsServersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFreeRdsServersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServersPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServersPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationRdsServersPagedCompletedEventHandler(object sender, GetOrganizationRdsServersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationRdsServersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationRdsServersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServersPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServersPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationFreeRdsServersPagedCompletedEventHandler(object sender, GetOrganizationFreeRdsServersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationFreeRdsServersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationFreeRdsServersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServersPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServersPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServerCompletedEventHandler(object sender, GetRdsServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetRDServerNewConnectionAllowedCompletedEventHandler(object sender, SetRDServerNewConnectionAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRDServerNewConnectionAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRDServerNewConnectionAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCollectionRdsServersCompletedEventHandler(object sender, GetCollectionRdsServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionRdsServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionRdsServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationRdsServersCompletedEventHandler(object sender, GetOrganizationRdsServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationRdsServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationRdsServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRdsServerCompletedEventHandler(object sender, AddRdsServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRdsServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRdsServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRdsServerToCollectionCompletedEventHandler(object sender, AddRdsServerToCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRdsServerToCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRdsServerToCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRdsServerToOrganizationCompletedEventHandler(object sender, AddRdsServerToOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRdsServerToOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRdsServerToOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRdsServerCompletedEventHandler(object sender, RemoveRdsServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRdsServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRdsServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRdsServerFromCollectionCompletedEventHandler(object sender, RemoveRdsServerFromCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRdsServerFromCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRdsServerFromCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRdsServerFromOrganizationCompletedEventHandler(object sender, RemoveRdsServerFromOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRdsServerFromOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRdsServerFromOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateRdsServerCompletedEventHandler(object sender, UpdateRdsServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRdsServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRdsServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionUsersCompletedEventHandler(object sender, GetRdsCollectionUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetUsersToRdsCollectionCompletedEventHandler(object sender, SetUsersToRdsCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUsersToRdsCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUsersToRdsCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCollectionRemoteApplicationsCompletedEventHandler(object sender, GetCollectionRemoteApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionRemoteApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionRemoteApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RemoteApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RemoteApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAvailableRemoteApplicationsCompletedEventHandler(object sender, GetAvailableRemoteApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRemoteApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRemoteApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StartMenuApp[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StartMenuApp[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRemoteApplicationToCollectionCompletedEventHandler(object sender, AddRemoteApplicationToCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteApplicationToCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteApplicationToCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveRemoteApplicationFromCollectionCompletedEventHandler(object sender, RemoveRemoteApplicationFromCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRemoteApplicationFromCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRemoteApplicationFromCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetRemoteApplicationsToRdsCollectionCompletedEventHandler(object sender, SetRemoteApplicationsToRdsCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRemoteApplicationsToRdsCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRemoteApplicationsToRdsCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationRdsUsersCountCompletedEventHandler(object sender, GetOrganizationRdsUsersCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationRdsUsersCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationRdsUsersCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationRdsServersCountCompletedEventHandler(object sender, GetOrganizationRdsServersCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationRdsServersCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationRdsServersCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetOrganizationRdsCollectionsCountCompletedEventHandler(object sender, GetOrganizationRdsCollectionsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationRdsCollectionsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationRdsCollectionsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetApplicationUsersCompletedEventHandler(object sender, GetApplicationUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetApplicationUsersCompletedEventHandler(object sender, SetApplicationUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetApplicationUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetApplicationUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsUserSessionsCompletedEventHandler(object sender, GetRdsUserSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsUserSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsUserSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsUserSession[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsUserSession[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void LogOffRdsUserCompletedEventHandler(object sender, LogOffRdsUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogOffRdsUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogOffRdsUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionSessionHostsCompletedEventHandler(object sender, GetRdsCollectionSessionHostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionSessionHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionSessionHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServerInfoCompletedEventHandler(object sender, GetRdsServerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServerStatusCompletedEventHandler(object sender, GetRdsServerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShutDownRdsServerCompletedEventHandler(object sender, ShutDownRdsServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShutDownRdsServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShutDownRdsServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RestartRdsServerCompletedEventHandler(object sender, RestartRdsServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RestartRdsServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RestartRdsServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCollectionLocalAdminsCompletedEventHandler(object sender, GetRdsCollectionLocalAdminsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCollectionLocalAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCollectionLocalAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveRdsCollectionLocalAdminsCompletedEventHandler(object sender, SaveRdsCollectionLocalAdminsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRdsCollectionLocalAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRdsCollectionLocalAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InstallSessionHostsCertificateCompletedEventHandler(object sender, InstallSessionHostsCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallSessionHostsCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallSessionHostsCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCertificateByServiceIdCompletedEventHandler(object sender, GetRdsCertificateByServiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCertificateByServiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCertificateByServiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCertificate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCertificate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsCertificateByItemIdCompletedEventHandler(object sender, GetRdsCertificateByItemIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsCertificateByItemIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsCertificateByItemIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsCertificate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsCertificate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddRdsCertificateCompletedEventHandler(object sender, AddRdsCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRdsCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRdsCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServicesCompletedEventHandler(object sender, GetRdsServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsSetupLetterCompletedEventHandler(object sender, GetRdsSetupLetterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsSetupLetterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsSetupLetterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SendRdsSetupLetterCompletedEventHandler(object sender, SendRdsSetupLetterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendRdsSetupLetterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendRdsSetupLetterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsServerSettingsCompletedEventHandler(object sender, GetRdsServerSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsServerSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsServerSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsServerSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsServerSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateRdsServerSettingsCompletedEventHandler(object sender, UpdateRdsServerSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRdsServerSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRdsServerSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ShadowSessionCompletedEventHandler(object sender, ShadowSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShadowSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShadowSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ImportCollectionCompletedEventHandler(object sender, ImportCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRemoteDesktopServiceIdCompletedEventHandler(object sender, GetRemoteDesktopServiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteDesktopServiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteDesktopServiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRdsMessagesByCollectionIdCompletedEventHandler(object sender, GetRdsMessagesByCollectionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRdsMessagesByCollectionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRdsMessagesByCollectionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RdsMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RdsMessage[])(this.results[0]));
            }
        }
    }
}
