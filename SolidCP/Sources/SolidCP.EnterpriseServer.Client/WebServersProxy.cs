// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

using SolidCP.Providers;
using SolidCP.Providers.Common;
using SolidCP.Providers.ResultObjects;
using SolidCP.Providers.Web;

namespace SolidCP.EnterpriseServer
{
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using System.Data;
    using System.Threading;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "esWebServersSoap", Namespace = "http://smbsaas/solidcp/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esWebServers : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback DeleteHeliconApeUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeGroupsOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeGroupOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeGroupOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteHeliconApeGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GetZooApplicationsOperationCompleted;

        private System.Threading.SendOrPostCallback SetZooEnvironmentVariableOperationCompleted;

        private System.Threading.SendOrPostCallback SetZooConsoleEnabledOperationCompleted;

        private System.Threading.SendOrPostCallback SetZooConsoleDisabledOperationCompleted;

        private System.Threading.SendOrPostCallback GrantWebManagementAccessOperationCompleted;

        private System.Threading.SendOrPostCallback RevokeWebManagementAccessOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeWebManagementAccessPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback CertificateRequestOperationCompleted;

        private System.Threading.SendOrPostCallback InstallCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback InstallLetsEncryptCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback RenewLetsEncryptCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback InstallPfxOperationCompleted;

        private System.Threading.SendOrPostCallback GetPendingCertificatesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSSLCertificateByIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteCertOperationCompleted;

        private System.Threading.SendOrPostCallback CheckSSLForWebsiteOperationCompleted;

        private System.Threading.SendOrPostCallback CheckSSLForDomainOperationCompleted;

        private System.Threading.SendOrPostCallback ExportCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback GetCertificatesForSiteOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback ImportCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback CheckCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteCertificateRequestOperationCompleted;

        private System.Threading.SendOrPostCallback GetRawWebSitesPagedOperationCompleted;

        private System.Threading.SendOrPostCallback GetWebSitesOperationCompleted;

        private System.Threading.SendOrPostCallback GetWebSiteOperationCompleted;

        private System.Threading.SendOrPostCallback GetWebSitePointersOperationCompleted;

        private System.Threading.SendOrPostCallback AddWebSitePointerOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteWebSitePointerOperationCompleted;

        private System.Threading.SendOrPostCallback AddWebSiteOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateWebSiteOperationCompleted;

        private System.Threading.SendOrPostCallback InstallFrontPageOperationCompleted;

        private System.Threading.SendOrPostCallback UninstallFrontPageOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeFrontPagePasswordOperationCompleted;

        private System.Threading.SendOrPostCallback RepairWebSiteOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteWebSiteOperationCompleted;

        private System.Threading.SendOrPostCallback SwitchWebSiteToDedicatedIPOperationCompleted;

        private System.Threading.SendOrPostCallback SwitchWebSiteToSharedIPOperationCompleted;

        private System.Threading.SendOrPostCallback AddVirtualDirectoryOperationCompleted;
        private System.Threading.SendOrPostCallback UpdateVirtualDirectoryOperationCompleted;
        private System.Threading.SendOrPostCallback GetVirtualDirectoriesOperationCompleted;
        private System.Threading.SendOrPostCallback GetVirtualDirectoryOperationCompleted;
        private System.Threading.SendOrPostCallback DeleteVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback AddAppVirtualDirectoryOperationCompleted;
        private System.Threading.SendOrPostCallback UpdateAppVirtualDirectoryOperationCompleted;
        private System.Threading.SendOrPostCallback GetAppVirtualDirectoriesOperationCompleted;
        private System.Threading.SendOrPostCallback GetAppVirtualDirectoryOperationCompleted;
        private System.Threading.SendOrPostCallback DeleteAppVirtualDirectoryOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeSiteStateOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeAppPoolStateOperationCompleted;

        private System.Threading.SendOrPostCallback GetAppPoolStateOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteStateOperationCompleted;

        private System.Threading.SendOrPostCallback GetSharedSSLDomainsOperationCompleted;

        private System.Threading.SendOrPostCallback GetRawSSLFoldersPagedOperationCompleted;

        private System.Threading.SendOrPostCallback GetSharedSSLFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetSharedSSLFolderOperationCompleted;

        private System.Threading.SendOrPostCallback AddSharedSSLFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSharedSSLFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSharedSSLFolderOperationCompleted;

        private System.Threading.SendOrPostCallback InstallSecuredFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback UninstallSecuredFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecuredFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecuredFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSecuredFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSecuredFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecuredUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecuredUserOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSecuredUserOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSecuredUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecuredGroupsOperationCompleted;

        private System.Threading.SendOrPostCallback GetSecuredGroupOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateSecuredGroupOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSecuredGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GrantWebDeployPublishingAccessOperationCompleted;

        private System.Threading.SendOrPostCallback SaveWebDeployPublishingProfileOperationCompleted;

        private System.Threading.SendOrPostCallback RevokeWebDeployPublishingAccessOperationCompleted;

        private System.Threading.SendOrPostCallback GetWebDeployPublishingProfileOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeWebDeployPublishingPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeStatusOperationCompleted;

        private System.Threading.SendOrPostCallback InstallHeliconApeOperationCompleted;

        private System.Threading.SendOrPostCallback EnableHeliconApeOperationCompleted;

        private System.Threading.SendOrPostCallback DisableHeliconApeOperationCompleted;

        private System.Threading.SendOrPostCallback EnableHeliconApeGloballyOperationCompleted;

        private System.Threading.SendOrPostCallback DisableHeliconApeGloballyOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeFoldersOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeHttpdFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeFolderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeHttpdFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteHeliconApeFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetHeliconApeUserOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateHeliconApeUserOperationCompleted;

        /// <remarks/>
        public esWebServers()
        {
            this.Url = "http://127.0.0.1:9002/esWebServers.asmx";
        }

        /// <remarks/>
        public event DeleteHeliconApeUserCompletedEventHandler DeleteHeliconApeUserCompleted;

        /// <remarks/>
        public event GetHeliconApeGroupsCompletedEventHandler GetHeliconApeGroupsCompleted;

        /// <remarks/>
        public event GetHeliconApeGroupCompletedEventHandler GetHeliconApeGroupCompleted;

        /// <remarks/>
        public event UpdateHeliconApeGroupCompletedEventHandler UpdateHeliconApeGroupCompleted;

        /// <remarks/>
        public event DeleteHeliconApeGroupCompletedEventHandler DeleteHeliconApeGroupCompleted;

        /// <remarks/>
        public event GetZooApplicationsCompletedEventHandler GetZooApplicationsCompleted;

        /// <remarks/>
        public event SetZooEnvironmentVariableCompletedEventHandler SetZooEnvironmentVariableCompleted;

        /// <remarks/>
        public event SetZooConsoleEnabledCompletedEventHandler SetZooConsoleEnabledCompleted;

        /// <remarks/>
        public event SetZooConsoleDisabledCompletedEventHandler SetZooConsoleDisabledCompleted;

        /// <remarks/>
        public event GrantWebManagementAccessCompletedEventHandler GrantWebManagementAccessCompleted;

        /// <remarks/>
        public event RevokeWebManagementAccessCompletedEventHandler RevokeWebManagementAccessCompleted;

        /// <remarks/>
        public event ChangeWebManagementAccessPasswordCompletedEventHandler ChangeWebManagementAccessPasswordCompleted;

        /// <remarks/>
        public event CertificateRequestCompletedEventHandler CertificateRequestCompleted;

        /// <remarks/>
        public event InstallCertificateCompletedEventHandler InstallCertificateCompleted;

        // RB Added for LetsEncrypt
        public event InstallLetsEncryptCertificateCompletedEventHandler InstallLetsEncryptCertificateCompleted;

        public event RenewLetsEncryptCertificateCompletedEventHandler RenewLetsEncryptCertificateCompleted;

        /// <remarks/>
        public event InstallPfxCompletedEventHandler InstallPfxCompleted;

        /// <remarks/>
        public event GetPendingCertificatesCompletedEventHandler GetPendingCertificatesCompleted;

        /// <remarks/>
        public event GetSSLCertificateByIDCompletedEventHandler GetSSLCertificateByIDCompleted;

        /// <remarks/>
        public event GetSiteCertCompletedEventHandler GetSiteCertCompleted;

        /// <remarks/>
        public event CheckSSLForWebsiteCompletedEventHandler CheckSSLForWebsiteCompleted;

        /// <remarks/>
        public event CheckSSLForDomainCompletedEventHandler CheckSSLForDomainCompleted;

        /// <remarks/>
        public event ExportCertificateCompletedEventHandler ExportCertificateCompleted;

        /// <remarks/>
        public event GetCertificatesForSiteCompletedEventHandler GetCertificatesForSiteCompleted;

        /// <remarks/>
        public event DeleteCertificateCompletedEventHandler DeleteCertificateCompleted;

        /// <remarks/>
        public event ImportCertificateCompletedEventHandler ImportCertificateCompleted;

        /// <remarks/>
        public event CheckCertificateCompletedEventHandler CheckCertificateCompleted;

        /// <remarks/>
        public event DeleteCertificateRequestCompletedEventHandler DeleteCertificateRequestCompleted;

        /// <remarks/>
        public event GetRawWebSitesPagedCompletedEventHandler GetRawWebSitesPagedCompleted;

        /// <remarks/>
        public event GetWebSitesCompletedEventHandler GetWebSitesCompleted;

        /// <remarks/>
        public event GetWebSiteCompletedEventHandler GetWebSiteCompleted;


        /// <remarks/>
        public event GetWebSitePointersCompletedEventHandler GetWebSitePointersCompleted;

        /// <remarks/>
        public event AddWebSitePointerCompletedEventHandler AddWebSitePointerCompleted;

        /// <remarks/>
        public event DeleteWebSitePointerCompletedEventHandler DeleteWebSitePointerCompleted;

        /// <remarks/>
        public event AddWebSiteCompletedEventHandler AddWebSiteCompleted;


        /// <remarks/>
        public event UpdateWebSiteCompletedEventHandler UpdateWebSiteCompleted;

        /// <remarks/>
        public event InstallFrontPageCompletedEventHandler InstallFrontPageCompleted;

        /// <remarks/>
        public event UninstallFrontPageCompletedEventHandler UninstallFrontPageCompleted;

        /// <remarks/>
        public event ChangeFrontPagePasswordCompletedEventHandler ChangeFrontPagePasswordCompleted;

        /// <remarks/>
        public event RepairWebSiteCompletedEventHandler RepairWebSiteCompleted;


        /// <remarks/>
        public event DeleteWebSiteCompletedEventHandler DeleteWebSiteCompleted;

        /// <remarks/>
        public event SwitchWebSiteToDedicatedIPCompletedEventHandler SwitchWebSiteToDedicatedIPCompleted;

        /// <remarks/>
        public event SwitchWebSiteToSharedIPCompletedEventHandler SwitchWebSiteToSharedIPCompleted;

        /// <remarks/>
        public event GetVirtualDirectoriesCompletedEventHandler GetVirtualDirectoriesCompleted;

        /// <remarks/>
        public event GetVirtualDirectoryCompletedEventHandler GetVirtualDirectoryCompleted;
        /// <remarks/>
        public event AddVirtualDirectoryCompletedEventHandler AddVirtualDirectoryCompleted;
        /// <remarks/>
        public event UpdateVirtualDirectoryCompletedEventHandler UpdateVirtualDirectoryCompleted;
        /// <remarks/>
        public event DeleteVirtualDirectoryCompletedEventHandler DeleteVirtualDirectoryCompleted;

        /// <remarks/>
        public event GetAppVirtualDirectoriesCompletedEventHandler GetAppVirtualDirectoriesCompleted;

        /// <remarks/>
        public event GetAppVirtualDirectoryCompletedEventHandler GetAppVirtualDirectoryCompleted;
        /// <remarks/>
        public event AddAppVirtualDirectoryCompletedEventHandler AddAppVirtualDirectoryCompleted;
        /// <remarks/>
        public event UpdateAppVirtualDirectoryCompletedEventHandler UpdateAppVirtualDirectoryCompleted;
        /// <remarks/>
        public event DeleteAppVirtualDirectoryCompletedEventHandler DeleteAppVirtualDirectoryCompleted;

        /// <remarks/>
        public event ChangeSiteStateCompletedEventHandler ChangeSiteStateCompleted;

        /// <remarks/>
        public event ChangeAppPoolStateCompletedEventHandler ChangeAppPoolStateCompleted;

        /// <remarks/>
        public event GetAppPoolStateCompletedEventHandler GetAppPoolStateCompleted;

        /// <remarks/>
        public event GetSiteStateCompletedEventHandler GetSiteStateCompleted;

        /// <remarks/>
        public event GetSharedSSLDomainsCompletedEventHandler GetSharedSSLDomainsCompleted;

        /// <remarks/>
        public event GetRawSSLFoldersPagedCompletedEventHandler GetRawSSLFoldersPagedCompleted;

        /// <remarks/>
        public event GetSharedSSLFoldersCompletedEventHandler GetSharedSSLFoldersCompleted;

        /// <remarks/>
        public event GetSharedSSLFolderCompletedEventHandler GetSharedSSLFolderCompleted;

        /// <remarks/>
        public event AddSharedSSLFolderCompletedEventHandler AddSharedSSLFolderCompleted;

        /// <remarks/>
        public event UpdateSharedSSLFolderCompletedEventHandler UpdateSharedSSLFolderCompleted;

        /// <remarks/>
        public event DeleteSharedSSLFolderCompletedEventHandler DeleteSharedSSLFolderCompleted;

        /// <remarks/>
        public event InstallSecuredFoldersCompletedEventHandler InstallSecuredFoldersCompleted;

        /// <remarks/>
        public event UninstallSecuredFoldersCompletedEventHandler UninstallSecuredFoldersCompleted;

        /// <remarks/>
        public event GetSecuredFoldersCompletedEventHandler GetSecuredFoldersCompleted;

        /// <remarks/>
        public event GetSecuredFolderCompletedEventHandler GetSecuredFolderCompleted;

        /// <remarks/>
        public event UpdateSecuredFolderCompletedEventHandler UpdateSecuredFolderCompleted;

        /// <remarks/>
        public event DeleteSecuredFolderCompletedEventHandler DeleteSecuredFolderCompleted;

        /// <remarks/>
        public event GetSecuredUsersCompletedEventHandler GetSecuredUsersCompleted;

        /// <remarks/>
        public event GetSecuredUserCompletedEventHandler GetSecuredUserCompleted;

        /// <remarks/>
        public event UpdateSecuredUserCompletedEventHandler UpdateSecuredUserCompleted;

        /// <remarks/>
        public event DeleteSecuredUserCompletedEventHandler DeleteSecuredUserCompleted;

        /// <remarks/>
        public event GetSecuredGroupsCompletedEventHandler GetSecuredGroupsCompleted;

        /// <remarks/>
        public event GetSecuredGroupCompletedEventHandler GetSecuredGroupCompleted;

        /// <remarks/>
        public event UpdateSecuredGroupCompletedEventHandler UpdateSecuredGroupCompleted;

        /// <remarks/>
        public event DeleteSecuredGroupCompletedEventHandler DeleteSecuredGroupCompleted;

        /// <remarks/>
        public event GrantWebDeployPublishingAccessCompletedEventHandler GrantWebDeployPublishingAccessCompleted;

        /// <remarks/>
        public event SaveWebDeployPublishingProfileCompletedEventHandler SaveWebDeployPublishingProfileCompleted;

        /// <remarks/>
        public event RevokeWebDeployPublishingAccessCompletedEventHandler RevokeWebDeployPublishingAccessCompleted;

        /// <remarks/>
        public event GetWebDeployPublishingProfileCompletedEventHandler GetWebDeployPublishingProfileCompleted;

        /// <remarks/>
        public event ChangeWebDeployPublishingPasswordCompletedEventHandler ChangeWebDeployPublishingPasswordCompleted;

        /// <remarks/>
        public event GetHeliconApeStatusCompletedEventHandler GetHeliconApeStatusCompleted;

        /// <remarks/>
        public event InstallHeliconApeCompletedEventHandler InstallHeliconApeCompleted;

        /// <remarks/>
        public event EnableHeliconApeCompletedEventHandler EnableHeliconApeCompleted;

        /// <remarks/>
        public event DisableHeliconApeCompletedEventHandler DisableHeliconApeCompleted;

        /// <remarks/>
        public event EnableHeliconApeGloballyCompletedEventHandler EnableHeliconApeGloballyCompleted;

        /// <remarks/>
        public event DisableHeliconApeGloballyCompletedEventHandler DisableHeliconApeGloballyCompleted;

        /// <remarks/>
        public event GetHeliconApeFoldersCompletedEventHandler GetHeliconApeFoldersCompleted;

        /// <remarks/>
        public event GetHeliconApeHttpdFolderCompletedEventHandler GetHeliconApeHttpdFolderCompleted;

        /// <remarks/>
        public event GetHeliconApeFolderCompletedEventHandler GetHeliconApeFolderCompleted;

        /// <remarks/>
        public event UpdateHeliconApeFolderCompletedEventHandler UpdateHeliconApeFolderCompleted;

        /// <remarks/>
        public event UpdateHeliconApeHttpdFolderCompletedEventHandler UpdateHeliconApeHttpdFolderCompleted;

        /// <remarks/>
        public event DeleteHeliconApeFolderCompletedEventHandler DeleteHeliconApeFolderCompleted;

        /// <remarks/>
        public event GetHeliconApeUsersCompletedEventHandler GetHeliconApeUsersCompleted;

        /// <remarks/>
        public event GetHeliconApeUserCompletedEventHandler GetHeliconApeUserCompleted;

        /// <remarks/>
        public event UpdateHeliconApeUserCompletedEventHandler UpdateHeliconApeUserCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteHeliconApeUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteHeliconApeUser(int siteItemId, string userName)
        {
            object[] results = this.Invoke("DeleteHeliconApeUser", new object[] {
                        siteItemId,
                        userName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteHeliconApeUser(int siteItemId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteHeliconApeUser", new object[] {
                        siteItemId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteHeliconApeUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteHeliconApeUserAsync(int siteItemId, string userName)
        {
            this.DeleteHeliconApeUserAsync(siteItemId, userName, null);
        }

        /// <remarks/>
        public void DeleteHeliconApeUserAsync(int siteItemId, string userName, object userState)
        {
            if ((this.DeleteHeliconApeUserOperationCompleted == null))
            {
                this.DeleteHeliconApeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHeliconApeUserOperationCompleted);
            }
            this.InvokeAsync("DeleteHeliconApeUser", new object[] {
                        siteItemId,
                        userName}, this.DeleteHeliconApeUserOperationCompleted, userState);
        }

        private void OnDeleteHeliconApeUserOperationCompleted(object arg)
        {
            if ((this.DeleteHeliconApeUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHeliconApeUserCompleted(this, new DeleteHeliconApeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeGroups", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup[] GetHeliconApeGroups(int siteItemId)
        {
            object[] results = this.Invoke("GetHeliconApeGroups", new object[] {
                        siteItemId});
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeGroups(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeGroups", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup[] EndGetHeliconApeGroups(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeGroupsAsync(int siteItemId)
        {
            this.GetHeliconApeGroupsAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetHeliconApeGroupsAsync(int siteItemId, object userState)
        {
            if ((this.GetHeliconApeGroupsOperationCompleted == null))
            {
                this.GetHeliconApeGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeGroupsOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeGroups", new object[] {
                        siteItemId}, this.GetHeliconApeGroupsOperationCompleted, userState);
        }

        private void OnGetHeliconApeGroupsOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeGroupsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeGroupsCompleted(this, new GetHeliconApeGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeGroup", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup GetHeliconApeGroup(int siteItemId, string groupName)
        {
            object[] results = this.Invoke("GetHeliconApeGroup", new object[] {
                        siteItemId,
                        groupName});
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeGroup(int siteItemId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeGroup", new object[] {
                        siteItemId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup EndGetHeliconApeGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeGroupAsync(int siteItemId, string groupName)
        {
            this.GetHeliconApeGroupAsync(siteItemId, groupName, null);
        }

        /// <remarks/>
        public void GetHeliconApeGroupAsync(int siteItemId, string groupName, object userState)
        {
            if ((this.GetHeliconApeGroupOperationCompleted == null))
            {
                this.GetHeliconApeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeGroupOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeGroup", new object[] {
                        siteItemId,
                        groupName}, this.GetHeliconApeGroupOperationCompleted, userState);
        }

        private void OnGetHeliconApeGroupOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeGroupCompleted(this, new GetHeliconApeGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateHeliconApeGroup", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateHeliconApeGroup(int siteItemId, WebGroup group)
        {
            object[] results = this.Invoke("UpdateHeliconApeGroup", new object[] {
                        siteItemId,
                        group});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeGroup(int siteItemId, WebGroup group, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeGroup", new object[] {
                        siteItemId,
                        group}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateHeliconApeGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateHeliconApeGroupAsync(int siteItemId, WebGroup group)
        {
            this.UpdateHeliconApeGroupAsync(siteItemId, group, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeGroupAsync(int siteItemId, WebGroup group, object userState)
        {
            if ((this.UpdateHeliconApeGroupOperationCompleted == null))
            {
                this.UpdateHeliconApeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeGroup", new object[] {
                        siteItemId,
                        group}, this.UpdateHeliconApeGroupOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeGroupOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeGroupCompleted(this, new UpdateHeliconApeGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteHeliconApeGroup", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteHeliconApeGroup(int siteItemId, string groupName)
        {
            object[] results = this.Invoke("DeleteHeliconApeGroup", new object[] {
                        siteItemId,
                        groupName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteHeliconApeGroup(int siteItemId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteHeliconApeGroup", new object[] {
                        siteItemId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteHeliconApeGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteHeliconApeGroupAsync(int siteItemId, string groupName)
        {
            this.DeleteHeliconApeGroupAsync(siteItemId, groupName, null);
        }

        /// <remarks/>
        public void DeleteHeliconApeGroupAsync(int siteItemId, string groupName, object userState)
        {
            if ((this.DeleteHeliconApeGroupOperationCompleted == null))
            {
                this.DeleteHeliconApeGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHeliconApeGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteHeliconApeGroup", new object[] {
                        siteItemId,
                        groupName}, this.DeleteHeliconApeGroupOperationCompleted, userState);
        }

        private void OnDeleteHeliconApeGroupOperationCompleted(object arg)
        {
            if ((this.DeleteHeliconApeGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHeliconApeGroupCompleted(this, new DeleteHeliconApeGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetZooApplications", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebAppVirtualDirectory[] GetZooApplications(int siteItemId)
        {
            object[] results = this.Invoke("GetZooApplications", new object[] {
                        siteItemId});
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetZooApplications(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetZooApplications", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] EndGetZooApplications(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public void GetZooApplicationsAsync(int siteItemId)
        {
            this.GetZooApplicationsAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetZooApplicationsAsync(int siteItemId, object userState)
        {
            if ((this.GetZooApplicationsOperationCompleted == null))
            {
                this.GetZooApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZooApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetZooApplications", new object[] {
                        siteItemId}, this.GetZooApplicationsOperationCompleted, userState);
        }

        private void OnGetZooApplicationsOperationCompleted(object arg)
        {
            if ((this.GetZooApplicationsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZooApplicationsCompleted(this, new GetZooApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetZooEnvironmentVariable", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject SetZooEnvironmentVariable(int siteItemId, string appName, string envName, string envValue)
        {
            object[] results = this.Invoke("SetZooEnvironmentVariable", new object[] {
                        siteItemId,
                        appName,
                        envName,
                        envValue});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetZooEnvironmentVariable(int siteItemId, string appName, string envName, string envValue, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetZooEnvironmentVariable", new object[] {
                        siteItemId,
                        appName,
                        envName,
                        envValue}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndSetZooEnvironmentVariable(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetZooEnvironmentVariableAsync(int siteItemId, string appName, string envName, string envValue)
        {
            this.SetZooEnvironmentVariableAsync(siteItemId, appName, envName, envValue, null);
        }

        /// <remarks/>
        public void SetZooEnvironmentVariableAsync(int siteItemId, string appName, string envName, string envValue, object userState)
        {
            if ((this.SetZooEnvironmentVariableOperationCompleted == null))
            {
                this.SetZooEnvironmentVariableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZooEnvironmentVariableOperationCompleted);
            }
            this.InvokeAsync("SetZooEnvironmentVariable", new object[] {
                        siteItemId,
                        appName,
                        envName,
                        envValue}, this.SetZooEnvironmentVariableOperationCompleted, userState);
        }

        private void OnSetZooEnvironmentVariableOperationCompleted(object arg)
        {
            if ((this.SetZooEnvironmentVariableCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZooEnvironmentVariableCompleted(this, new SetZooEnvironmentVariableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetZooConsoleEnabled", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject SetZooConsoleEnabled(int siteItemId, string appName)
        {
            object[] results = this.Invoke("SetZooConsoleEnabled", new object[] {
                        siteItemId,
                        appName});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetZooConsoleEnabled(int siteItemId, string appName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetZooConsoleEnabled", new object[] {
                        siteItemId,
                        appName}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndSetZooConsoleEnabled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetZooConsoleEnabledAsync(int siteItemId, string appName)
        {
            this.SetZooConsoleEnabledAsync(siteItemId, appName, null);
        }

        /// <remarks/>
        public void SetZooConsoleEnabledAsync(int siteItemId, string appName, object userState)
        {
            if ((this.SetZooConsoleEnabledOperationCompleted == null))
            {
                this.SetZooConsoleEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZooConsoleEnabledOperationCompleted);
            }
            this.InvokeAsync("SetZooConsoleEnabled", new object[] {
                        siteItemId,
                        appName}, this.SetZooConsoleEnabledOperationCompleted, userState);
        }

        private void OnSetZooConsoleEnabledOperationCompleted(object arg)
        {
            if ((this.SetZooConsoleEnabledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZooConsoleEnabledCompleted(this, new SetZooConsoleEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetZooConsoleDisabled", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringResultObject SetZooConsoleDisabled(int siteItemId, string appName)
        {
            object[] results = this.Invoke("SetZooConsoleDisabled", new object[] {
                        siteItemId,
                        appName});
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetZooConsoleDisabled(int siteItemId, string appName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetZooConsoleDisabled", new object[] {
                        siteItemId,
                        appName}, callback, asyncState);
        }

        /// <remarks/>
        public StringResultObject EndSetZooConsoleDisabled(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringResultObject)(results[0]));
        }

        /// <remarks/>
        public void SetZooConsoleDisabledAsync(int siteItemId, string appName)
        {
            this.SetZooConsoleDisabledAsync(siteItemId, appName, null);
        }

        /// <remarks/>
        public void SetZooConsoleDisabledAsync(int siteItemId, string appName, object userState)
        {
            if ((this.SetZooConsoleDisabledOperationCompleted == null))
            {
                this.SetZooConsoleDisabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZooConsoleDisabledOperationCompleted);
            }
            this.InvokeAsync("SetZooConsoleDisabled", new object[] {
                        siteItemId,
                        appName}, this.SetZooConsoleDisabledOperationCompleted, userState);
        }

        private void OnSetZooConsoleDisabledOperationCompleted(object arg)
        {
            if ((this.SetZooConsoleDisabledCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZooConsoleDisabledCompleted(this, new SetZooConsoleDisabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GrantWebManagementAccess", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject GrantWebManagementAccess(int siteItemId, string accountName, string accountPassword)
        {
            object[] results = this.Invoke("GrantWebManagementAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGrantWebManagementAccess(int siteItemId, string accountName, string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GrantWebManagementAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndGrantWebManagementAccess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void GrantWebManagementAccessAsync(int siteItemId, string accountName, string accountPassword)
        {
            this.GrantWebManagementAccessAsync(siteItemId, accountName, accountPassword, null);
        }

        /// <remarks/>
        public void GrantWebManagementAccessAsync(int siteItemId, string accountName, string accountPassword, object userState)
        {
            if ((this.GrantWebManagementAccessOperationCompleted == null))
            {
                this.GrantWebManagementAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantWebManagementAccessOperationCompleted);
            }
            this.InvokeAsync("GrantWebManagementAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword}, this.GrantWebManagementAccessOperationCompleted, userState);
        }

        private void OnGrantWebManagementAccessOperationCompleted(object arg)
        {
            if ((this.GrantWebManagementAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantWebManagementAccessCompleted(this, new GrantWebManagementAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RevokeWebManagementAccess", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeWebManagementAccess(int siteItemId)
        {
            this.Invoke("RevokeWebManagementAccess", new object[] {
                        siteItemId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRevokeWebManagementAccess(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RevokeWebManagementAccess", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRevokeWebManagementAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RevokeWebManagementAccessAsync(int siteItemId)
        {
            this.RevokeWebManagementAccessAsync(siteItemId, null);
        }

        /// <remarks/>
        public void RevokeWebManagementAccessAsync(int siteItemId, object userState)
        {
            if ((this.RevokeWebManagementAccessOperationCompleted == null))
            {
                this.RevokeWebManagementAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeWebManagementAccessOperationCompleted);
            }
            this.InvokeAsync("RevokeWebManagementAccess", new object[] {
                        siteItemId}, this.RevokeWebManagementAccessOperationCompleted, userState);
        }

        private void OnRevokeWebManagementAccessOperationCompleted(object arg)
        {
            if ((this.RevokeWebManagementAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeWebManagementAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeWebManagementAccessPassword", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ChangeWebManagementAccessPassword(int siteItemId, string accountPassword)
        {
            object[] results = this.Invoke("ChangeWebManagementAccessPassword", new object[] {
                        siteItemId,
                        accountPassword});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeWebManagementAccessPassword(int siteItemId, string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeWebManagementAccessPassword", new object[] {
                        siteItemId,
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndChangeWebManagementAccessPassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void ChangeWebManagementAccessPasswordAsync(int siteItemId, string accountPassword)
        {
            this.ChangeWebManagementAccessPasswordAsync(siteItemId, accountPassword, null);
        }

        /// <remarks/>
        public void ChangeWebManagementAccessPasswordAsync(int siteItemId, string accountPassword, object userState)
        {
            if ((this.ChangeWebManagementAccessPasswordOperationCompleted == null))
            {
                this.ChangeWebManagementAccessPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeWebManagementAccessPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeWebManagementAccessPassword", new object[] {
                        siteItemId,
                        accountPassword}, this.ChangeWebManagementAccessPasswordOperationCompleted, userState);
        }

        private void OnChangeWebManagementAccessPasswordOperationCompleted(object arg)
        {
            if ((this.ChangeWebManagementAccessPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeWebManagementAccessPasswordCompleted(this, new ChangeWebManagementAccessPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CertificateRequest", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate CertificateRequest(SSLCertificate certificate, int siteItemId)
        {
            object[] results = this.Invoke("CertificateRequest", new object[] {
                        certificate,
                        siteItemId});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCertificateRequest(SSLCertificate certificate, int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CertificateRequest", new object[] {
                        certificate,
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndCertificateRequest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void CertificateRequestAsync(SSLCertificate certificate, int siteItemId)
        {
            this.CertificateRequestAsync(certificate, siteItemId, null);
        }

        /// <remarks/>
        public void CertificateRequestAsync(SSLCertificate certificate, int siteItemId, object userState)
        {
            if ((this.CertificateRequestOperationCompleted == null))
            {
                this.CertificateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateRequestOperationCompleted);
            }
            this.InvokeAsync("CertificateRequest", new object[] {
                        certificate,
                        siteItemId}, this.CertificateRequestOperationCompleted, userState);
        }

        private void OnCertificateRequestOperationCompleted(object arg)
        {
            if ((this.CertificateRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateRequestCompleted(this, new CertificateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject InstallCertificate(SSLCertificate certificate, int siteItemId)
        {
            object[] results = this.Invoke("InstallCertificate", new object[] {
                        certificate,
                        siteItemId});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallCertificate(SSLCertificate certificate, int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallCertificate", new object[] {
                        certificate,
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndInstallCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void InstallCertificateAsync(SSLCertificate certificate, int siteItemId)
        {
            this.InstallCertificateAsync(certificate, siteItemId, null);
        }

        /// <remarks/>
        public void InstallCertificateAsync(SSLCertificate certificate, int siteItemId, object userState)
        {
            if ((this.InstallCertificateOperationCompleted == null))
            {
                this.InstallCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallCertificateOperationCompleted);
            }
            this.InvokeAsync("InstallCertificate", new object[] {
                        certificate,
                        siteItemId}, this.InstallCertificateOperationCompleted, userState);
        }

        private void OnInstallCertificateOperationCompleted(object arg)
        {
            if ((this.InstallCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallCertificateCompleted(this, new InstallCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        

        // RB Added for LetsEncrypt  <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethod("http://smbsaas/solidcp/enterpriseserver/InstallLetsEncryptCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringArrayResultObject InstallLetsEncryptCertificate(int siteId, string hostName, string[] SANs)
        {
            return (StringArrayResultObject)base.Invoke("InstallLetsEncryptCertificate", new object[] { siteId, hostName, SANs })[0];
        }

        public void InstallLetsEncryptCertificateAsync(int siteId, string hostName, string[] SANs)
        {
            this.InstallLetsEncryptCertificateAsync(siteId, hostName, SANs, null);
        }

        public void InstallLetsEncryptCertificateAsync(int siteId, string hostName, string[] SANs, object userState)
        {
            if (this.InstallLetsEncryptCertificateOperationCompleted == null)
            {
                this.InstallLetsEncryptCertificateOperationCompleted = new SendOrPostCallback(this.OnInstallLetsEncryptCertificateOperationCompleted);
            }
            base.InvokeAsync("InstallLetsEncryptCertificate", new object[] { siteId, hostName, SANs }, this.InstallLetsEncryptCertificateOperationCompleted, userState);
        }

        public IAsyncResult BeginInstallLetsEncryptCertificate(int siteId, string hostName, string[] SANs, AsyncCallback callback, object asyncState)
        {
            return base.BeginInvoke("InstallLetsEncryptCertificate", new object[] { siteId, hostName, SANs }, callback, asyncState);
        }

        public StringArrayResultObject EndInstallLetsEncryptCertificate(IAsyncResult asyncResult)
        {
            return (StringArrayResultObject)base.EndInvoke(asyncResult)[0];
        }
        private void OnInstallLetsEncryptCertificateOperationCompleted(object arg)
        {
            if (this.InstallLetsEncryptCertificateCompleted != null)
            {
                InvokeCompletedEventArgs invokeCompletedEventArg = (InvokeCompletedEventArgs)arg;
                this.InstallLetsEncryptCertificateCompleted(this, new InstallLetsEncryptCertificateCompletedEventArgs(invokeCompletedEventArg.Results, invokeCompletedEventArg.Error, invokeCompletedEventArg.Cancelled, invokeCompletedEventArg.UserState));
            }
        }

        [System.Web.Services.Protocols.SoapDocumentMethod("http://smbsaas/solidcp/enterpriseserver/RenewLetsEncryptCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject RenewLetsEncryptCertificate(SSLCertificate certificate)
        {
            return (ResultObject)base.Invoke("RenewLetsEncryptCertificate", new object[] { certificate })[0];
        }

        public void RenewLetsEncryptCertificateAsync(SSLCertificate certificate)
        {
            this.RenewLetsEncryptCertificateAsync(certificate, null);
        }

        public void RenewLetsEncryptCertificateAsync(SSLCertificate certificate, object userState)
        {
            if (this.RenewLetsEncryptCertificateOperationCompleted == null)
            {
                this.RenewLetsEncryptCertificateOperationCompleted = new SendOrPostCallback(this.OnRenewLetsEncryptCertificateOperationCompleted);
            }
            base.InvokeAsync("RenewLetsEncryptCertificate", new object[] { certificate }, this.RenewLetsEncryptCertificateOperationCompleted, userState);
        }

        public IAsyncResult BeginRenewLetsEncryptCertificate(SSLCertificate certificate, AsyncCallback callback, object asyncState)
        {
            return base.BeginInvoke("RenewLetsEncryptCertificate", new object[] { certificate }, callback, asyncState);
        }

        public ResultObject EndRenewLetsEncryptCertificate(IAsyncResult asyncResult)
        {
            return (ResultObject)base.EndInvoke(asyncResult)[0];
        }

        private void OnRenewLetsEncryptCertificateOperationCompleted(object arg)
        {
            if (this.RenewLetsEncryptCertificateCompleted != null)
            {
                InvokeCompletedEventArgs invokeCompletedEventArg = (InvokeCompletedEventArgs)arg;
                this.RenewLetsEncryptCertificateCompleted(this, new RenewLetsEncryptCertificateCompletedEventArgs(invokeCompletedEventArg.Results, invokeCompletedEventArg.Error, invokeCompletedEventArg.Cancelled, invokeCompletedEventArg.UserState));
            }
        }

        // RB END  Added for LetsEncrypt

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallPfx", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject InstallPfx([System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] certificate, int siteItemId, string password)
        {
            object[] results = this.Invoke("InstallPfx", new object[] {
                        certificate,
                        siteItemId,
                        password});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallPfx(byte[] certificate, int siteItemId, string password, string friendlyName, string SANs, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallPfx", new object[] {
                        certificate,
                        siteItemId,
                        password,
                        friendlyName,
                        SANs}, callback, asyncState);
        }


        

        


        /// <remarks/>
        public ResultObject EndInstallPfx(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void InstallPfxAsync(byte[] certificate, int siteItemId, string password, string friendlyName, string SANs)
        {
            this.InstallPfxAsync(certificate, siteItemId, password, friendlyName, SANs, null);
        }

        /// <remarks/>
        public void InstallPfxAsync(byte[] certificate, int siteItemId, string password, string friendlyName, string SANs, object userState)
        {
            if ((this.InstallPfxOperationCompleted == null))
            {
                this.InstallPfxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallPfxOperationCompleted);
            }
            this.InvokeAsync("InstallPfx", new object[] {
                        certificate,
                        siteItemId,
                        password,
                        friendlyName,
                        SANs}, this.InstallPfxOperationCompleted, userState);
        }

        
        
       

        private void OnInstallPfxOperationCompleted(object arg)
        {
            if ((this.InstallPfxCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallPfxCompleted(this, new InstallPfxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPendingCertificates", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate[] GetPendingCertificates(int siteItemId)
        {
            object[] results = this.Invoke("GetPendingCertificates", new object[] {
                        siteItemId});
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPendingCertificates(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPendingCertificates", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate[] EndGetPendingCertificates(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public void GetPendingCertificatesAsync(int siteItemId)
        {
            this.GetPendingCertificatesAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetPendingCertificatesAsync(int siteItemId, object userState)
        {
            if ((this.GetPendingCertificatesOperationCompleted == null))
            {
                this.GetPendingCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingCertificatesOperationCompleted);
            }
            this.InvokeAsync("GetPendingCertificates", new object[] {
                        siteItemId}, this.GetPendingCertificatesOperationCompleted, userState);
        }

        private void OnGetPendingCertificatesOperationCompleted(object arg)
        {
            if ((this.GetPendingCertificatesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingCertificatesCompleted(this, new GetPendingCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSSLCertificateByID", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate GetSSLCertificateByID(int Id)
        {
            object[] results = this.Invoke("GetSSLCertificateByID", new object[] {
                        Id});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSSLCertificateByID(int Id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSSLCertificateByID", new object[] {
                        Id}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndGetSSLCertificateByID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void GetSSLCertificateByIDAsync(int Id)
        {
            this.GetSSLCertificateByIDAsync(Id, null);
        }

        /// <remarks/>
        public void GetSSLCertificateByIDAsync(int Id, object userState)
        {
            if ((this.GetSSLCertificateByIDOperationCompleted == null))
            {
                this.GetSSLCertificateByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSSLCertificateByIDOperationCompleted);
            }
            this.InvokeAsync("GetSSLCertificateByID", new object[] {
                        Id}, this.GetSSLCertificateByIDOperationCompleted, userState);
        }

        private void OnGetSSLCertificateByIDOperationCompleted(object arg)
        {
            if ((this.GetSSLCertificateByIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSSLCertificateByIDCompleted(this, new GetSSLCertificateByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSiteCert", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate GetSiteCert(int siteID)
        {
            object[] results = this.Invoke("GetSiteCert", new object[] {
                        siteID});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteCert(int siteID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteCert", new object[] {
                        siteID}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndGetSiteCert(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void GetSiteCertAsync(int siteID)
        {
            this.GetSiteCertAsync(siteID, null);
        }

        /// <remarks/>
        public void GetSiteCertAsync(int siteID, object userState)
        {
            if ((this.GetSiteCertOperationCompleted == null))
            {
                this.GetSiteCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteCertOperationCompleted);
            }
            this.InvokeAsync("GetSiteCert", new object[] {
                        siteID}, this.GetSiteCertOperationCompleted, userState);
        }

        private void OnGetSiteCertOperationCompleted(object arg)
        {
            if ((this.GetSiteCertCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCertCompleted(this, new GetSiteCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckSSLForWebsite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckSSLForWebsite(int siteID, bool renewal)
        {
            object[] results = this.Invoke("CheckSSLForWebsite", new object[] {
                        siteID,
                        renewal});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckSSLForWebsite(int siteID, bool renewal, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckSSLForWebsite", new object[] {
                        siteID,
                        renewal}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCheckSSLForWebsite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CheckSSLForWebsiteAsync(int siteID, bool renewal)
        {
            this.CheckSSLForWebsiteAsync(siteID, renewal, null);
        }

        /// <remarks/>
        public void CheckSSLForWebsiteAsync(int siteID, bool renewal, object userState)
        {
            if ((this.CheckSSLForWebsiteOperationCompleted == null))
            {
                this.CheckSSLForWebsiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSSLForWebsiteOperationCompleted);
            }
            this.InvokeAsync("CheckSSLForWebsite", new object[] {
                        siteID,
                        renewal}, this.CheckSSLForWebsiteOperationCompleted, userState);
        }

        private void OnCheckSSLForWebsiteOperationCompleted(object arg)
        {
            if ((this.CheckSSLForWebsiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSSLForWebsiteCompleted(this, new CheckSSLForWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckSSLForDomain", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CheckSSLForDomain(string domain, int siteID)
        {
            object[] results = this.Invoke("CheckSSLForDomain", new object[] {
                        domain,
                        siteID});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckSSLForDomain(string domain, int siteID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckSSLForDomain", new object[] {
                        domain,
                        siteID}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndCheckSSLForDomain(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void CheckSSLForDomainAsync(string domain, int siteID)
        {
            this.CheckSSLForDomainAsync(domain, siteID, null);
        }

        /// <remarks/>
        public void CheckSSLForDomainAsync(string domain, int siteID, object userState)
        {
            if ((this.CheckSSLForDomainOperationCompleted == null))
            {
                this.CheckSSLForDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSSLForDomainOperationCompleted);
            }
            this.InvokeAsync("CheckSSLForDomain", new object[] {
                        domain,
                        siteID}, this.CheckSSLForDomainOperationCompleted, userState);
        }

        private void OnCheckSSLForDomainOperationCompleted(object arg)
        {
            if ((this.CheckSSLForDomainCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSSLForDomainCompleted(this, new CheckSSLForDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ExportCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] ExportCertificate(int siteId, string serialNumber, string password)
        {
            object[] results = this.Invoke("ExportCertificate", new object[] {
                        siteId,
                        serialNumber,
                        password});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExportCertificate(int siteId, string serialNumber, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExportCertificate", new object[] {
                        siteId,
                        serialNumber,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndExportCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void ExportCertificateAsync(int siteId, string serialNumber, string password)
        {
            this.ExportCertificateAsync(siteId, serialNumber, password, null);
        }

        /// <remarks/>
        public void ExportCertificateAsync(int siteId, string serialNumber, string password, object userState)
        {
            if ((this.ExportCertificateOperationCompleted == null))
            {
                this.ExportCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportCertificateOperationCompleted);
            }
            this.InvokeAsync("ExportCertificate", new object[] {
                        siteId,
                        serialNumber,
                        password}, this.ExportCertificateOperationCompleted, userState);
        }

        private void OnExportCertificateOperationCompleted(object arg)
        {
            if ((this.ExportCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportCertificateCompleted(this, new ExportCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCertificatesForSite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate[] GetCertificatesForSite(int siteId)
        {
            object[] results = this.Invoke("GetCertificatesForSite", new object[] {
                        siteId});
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCertificatesForSite(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCertificatesForSite", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate[] EndGetCertificatesForSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public void GetCertificatesForSiteAsync(int siteId)
        {
            this.GetCertificatesForSiteAsync(siteId, null);
        }

        /// <remarks/>
        public void GetCertificatesForSiteAsync(int siteId, object userState)
        {
            if ((this.GetCertificatesForSiteOperationCompleted == null))
            {
                this.GetCertificatesForSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificatesForSiteOperationCompleted);
            }
            this.InvokeAsync("GetCertificatesForSite", new object[] {
                        siteId}, this.GetCertificatesForSiteOperationCompleted, userState);
        }

        private void OnGetCertificatesForSiteOperationCompleted(object arg)
        {
            if ((this.GetCertificatesForSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificatesForSiteCompleted(this, new GetCertificatesForSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteCertificate(int siteId, SSLCertificate certificate)
        {
            object[] results = this.Invoke("DeleteCertificate", new object[] {
                        siteId,
                        certificate});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificate(int siteId, SSLCertificate certificate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteCertificate", new object[] {
                        siteId,
                        certificate}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndDeleteCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void DeleteCertificateAsync(int siteId, SSLCertificate certificate)
        {
            this.DeleteCertificateAsync(siteId, certificate, null);
        }

        /// <remarks/>
        public void DeleteCertificateAsync(int siteId, SSLCertificate certificate, object userState)
        {
            if ((this.DeleteCertificateOperationCompleted == null))
            {
                this.DeleteCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificate", new object[] {
                        siteId,
                        certificate}, this.DeleteCertificateOperationCompleted, userState);
        }

        private void OnDeleteCertificateOperationCompleted(object arg)
        {
            if ((this.DeleteCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateCompleted(this, new DeleteCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ImportCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ImportCertificate(int siteId)
        {
            object[] results = this.Invoke("ImportCertificate", new object[] {
                        siteId});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportCertificate(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportCertificate", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndImportCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void ImportCertificateAsync(int siteId)
        {
            this.ImportCertificateAsync(siteId, null);
        }

        /// <remarks/>
        public void ImportCertificateAsync(int siteId, object userState)
        {
            if ((this.ImportCertificateOperationCompleted == null))
            {
                this.ImportCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCertificateOperationCompleted);
            }
            this.InvokeAsync("ImportCertificate", new object[] {
                        siteId}, this.ImportCertificateOperationCompleted, userState);
        }

        private void OnImportCertificateOperationCompleted(object arg)
        {
            if ((this.ImportCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCertificateCompleted(this, new ImportCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckCertificate", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CheckCertificate(int siteId)
        {
            object[] results = this.Invoke("CheckCertificate", new object[] {
                        siteId});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckCertificate(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckCertificate", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndCheckCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void CheckCertificateAsync(int siteId)
        {
            this.CheckCertificateAsync(siteId, null);
        }

        /// <remarks/>
        public void CheckCertificateAsync(int siteId, object userState)
        {
            if ((this.CheckCertificateOperationCompleted == null))
            {
                this.CheckCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCertificateOperationCompleted);
            }
            this.InvokeAsync("CheckCertificate", new object[] {
                        siteId}, this.CheckCertificateOperationCompleted, userState);
        }

        private void OnCheckCertificateOperationCompleted(object arg)
        {
            if ((this.CheckCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCertificateCompleted(this, new CheckCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteCertificateRequest", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteCertificateRequest(int siteId, int csrID)
        {
            object[] results = this.Invoke("DeleteCertificateRequest", new object[] {
                        siteId,
                        csrID});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificateRequest(int siteId, int csrID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteCertificateRequest", new object[] {
                        siteId,
                        csrID}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndDeleteCertificateRequest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void DeleteCertificateRequestAsync(int siteId, int csrID)
        {
            this.DeleteCertificateRequestAsync(siteId, csrID, null);
        }

        /// <remarks/>
        public void DeleteCertificateRequestAsync(int siteId, int csrID, object userState)
        {
            if ((this.DeleteCertificateRequestOperationCompleted == null))
            {
                this.DeleteCertificateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateRequestOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificateRequest", new object[] {
                        siteId,
                        csrID}, this.DeleteCertificateRequestOperationCompleted, userState);
        }

        private void OnDeleteCertificateRequestOperationCompleted(object arg)
        {
            if ((this.DeleteCertificateRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateRequestCompleted(this, new DeleteCertificateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawWebSitesPaged", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawWebSitesPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
        {
            object[] results = this.Invoke("GetRawWebSitesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRawWebSitesPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRawWebSitesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataSet EndGetRawWebSitesPaged(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void GetRawWebSitesPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
        {
            this.GetRawWebSitesPagedAsync(packageId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }

        /// <remarks/>
        public void GetRawWebSitesPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState)
        {
            if ((this.GetRawWebSitesPagedOperationCompleted == null))
            {
                this.GetRawWebSitesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawWebSitesPagedOperationCompleted);
            }
            this.InvokeAsync("GetRawWebSitesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawWebSitesPagedOperationCompleted, userState);
        }

        private void OnGetRawWebSitesPagedOperationCompleted(object arg)
        {
            if ((this.GetRawWebSitesPagedCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawWebSitesPagedCompleted(this, new GetRawWebSitesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebSites", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebSite[] GetWebSites(int packageId, bool recursive)
        {
            object[] results = this.Invoke("GetWebSites", new object[] {
                        packageId,
                        recursive});
            return ((WebSite[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetWebSites(int packageId, bool recursive, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetWebSites", new object[] {
                        packageId,
                        recursive}, callback, asyncState);
        }

        /// <remarks/>
        public WebSite[] EndGetWebSites(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebSite[])(results[0]));
        }

        /// <remarks/>
        public void GetWebSitesAsync(int packageId, bool recursive)
        {
            this.GetWebSitesAsync(packageId, recursive, null);
        }

        /// <remarks/>
        public void GetWebSitesAsync(int packageId, bool recursive, object userState)
        {
            if ((this.GetWebSitesOperationCompleted == null))
            {
                this.GetWebSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSitesOperationCompleted);
            }
            this.InvokeAsync("GetWebSites", new object[] {
                        packageId,
                        recursive}, this.GetWebSitesOperationCompleted, userState);
        }

        private void OnGetWebSitesOperationCompleted(object arg)
        {
            if ((this.GetWebSitesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSitesCompleted(this, new GetWebSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebSite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebSite GetWebSite(int siteItemId)
        {
            object[] results = this.Invoke("GetWebSite", new object[] {
                        siteItemId});
            return ((WebSite)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetWebSite(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetWebSite", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebSite EndGetWebSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebSite)(results[0]));
        }

        /// <remarks/>
        public void GetWebSiteAsync(int siteItemId)
        {
            this.GetWebSiteAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetWebSiteAsync(int siteItemId, object userState)
        {
            if ((this.GetWebSiteOperationCompleted == null))
            {
                this.GetWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSiteOperationCompleted);
            }
            this.InvokeAsync("GetWebSite", new object[] {
                        siteItemId}, this.GetWebSiteOperationCompleted, userState);
        }

        private void OnGetWebSiteOperationCompleted(object arg)
        {
            if ((this.GetWebSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSiteCompleted(this, new GetWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebSitePointers", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetWebSitePointers(int siteItemId)
        {
            object[] results = this.Invoke("GetWebSitePointers", new object[] {
                        siteItemId});
            return ((DomainInfo[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetWebSitePointers(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetWebSitePointers", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public DomainInfo[] EndGetWebSitePointers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo[])(results[0]));
        }

        /// <remarks/>
        public void GetWebSitePointersAsync(int siteItemId)
        {
            this.GetWebSitePointersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetWebSitePointersAsync(int siteItemId, object userState)
        {
            if ((this.GetWebSitePointersOperationCompleted == null))
            {
                this.GetWebSitePointersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSitePointersOperationCompleted);
            }
            this.InvokeAsync("GetWebSitePointers", new object[] {
                        siteItemId}, this.GetWebSitePointersOperationCompleted, userState);
        }

        private void OnGetWebSitePointersOperationCompleted(object arg)
        {
            if ((this.GetWebSitePointersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSitePointersCompleted(this, new GetWebSitePointersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddWebSitePointer", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWebSitePointer(int siteItemId, string hostName, int domainId)
        {
            object[] results = this.Invoke("AddWebSitePointer", new object[] {
                        siteItemId,
                        hostName,
                        domainId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddWebSitePointer(int siteItemId, string hostName, int domainId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddWebSitePointer", new object[] {
                        siteItemId,
                        hostName,
                        domainId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddWebSitePointer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddWebSitePointerAsync(int siteItemId, string hostName, int domainId)
        {
            this.AddWebSitePointerAsync(siteItemId, hostName, domainId, null);
        }

        /// <remarks/>
        public void AddWebSitePointerAsync(int siteItemId, string hostName, int domainId, object userState)
        {
            if ((this.AddWebSitePointerOperationCompleted == null))
            {
                this.AddWebSitePointerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWebSitePointerOperationCompleted);
            }
            this.InvokeAsync("AddWebSitePointer", new object[] {
                        siteItemId,
                        hostName,
                        domainId}, this.AddWebSitePointerOperationCompleted, userState);
        }

        private void OnAddWebSitePointerOperationCompleted(object arg)
        {
            if ((this.AddWebSitePointerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWebSitePointerCompleted(this, new AddWebSitePointerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteWebSitePointer", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteWebSitePointer(int siteItemId, int domainId)
        {
            object[] results = this.Invoke("DeleteWebSitePointer", new object[] {
                        siteItemId,
                        domainId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteWebSitePointer(int siteItemId, int domainId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteWebSitePointer", new object[] {
                        siteItemId,
                        domainId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteWebSitePointer(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteWebSitePointerAsync(int siteItemId, int domainId)
        {
            this.DeleteWebSitePointerAsync(siteItemId, domainId, null);
        }

        /// <remarks/>
        public void DeleteWebSitePointerAsync(int siteItemId, int domainId, object userState)
        {
            if ((this.DeleteWebSitePointerOperationCompleted == null))
            {
                this.DeleteWebSitePointerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWebSitePointerOperationCompleted);
            }
            this.InvokeAsync("DeleteWebSitePointer", new object[] {
                        siteItemId,
                        domainId}, this.DeleteWebSitePointerOperationCompleted, userState);
        }

        private void OnDeleteWebSitePointerOperationCompleted(object arg)
        {
            if ((this.DeleteWebSitePointerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWebSitePointerCompleted(this, new DeleteWebSitePointerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddWebSite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWebSite(int packageId, string hostName, int domainId, int ipAddressId, bool ignoreGlobalDNSZone)
        {
            object[] results = this.Invoke("AddWebSite", new object[] {
                        packageId,
                        hostName,
                        domainId,
                        ipAddressId,
                        ignoreGlobalDNSZone});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddWebSite(int packageId, string hostName, int domainId, int ipAddressId, bool ignoreGlobalDNSZone, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddWebSite", new object[] {
                        packageId,
                        hostName,
                        domainId,
                        ipAddressId,
                        ignoreGlobalDNSZone}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddWebSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddWebSiteAsync(int packageId, string hostName, int domainId, int ipAddressId, bool ignoreGlobalDNSZone)
        {
            this.AddWebSiteAsync(packageId, hostName, domainId, ipAddressId, ignoreGlobalDNSZone, null);
        }

        /// <remarks/>
        public void AddWebSiteAsync(int packageId, string hostName, int domainId, int ipAddressId, bool ignoreGlobalDNSZone, object userState)
        {
            if ((this.AddWebSiteOperationCompleted == null))
            {
                this.AddWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWebSiteOperationCompleted);
            }
            this.InvokeAsync("AddWebSite", new object[] {
                        packageId,
                        hostName,
                        domainId,
                        ipAddressId,
                        ignoreGlobalDNSZone}, this.AddWebSiteOperationCompleted, userState);
        }

        private void OnAddWebSiteOperationCompleted(object arg)
        {
            if ((this.AddWebSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWebSiteCompleted(this, new AddWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateWebSite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateWebSite(WebSite site)
        {
            object[] results = this.Invoke("UpdateWebSite", new object[] {
                        site});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateWebSite(WebSite site, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateWebSite", new object[] {
                        site}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateWebSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateWebSiteAsync(WebSite site)
        {
            this.UpdateWebSiteAsync(site, null);
        }

        /// <remarks/>
        public void UpdateWebSiteAsync(WebSite site, object userState)
        {
            if ((this.UpdateWebSiteOperationCompleted == null))
            {
                this.UpdateWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWebSiteOperationCompleted);
            }
            this.InvokeAsync("UpdateWebSite", new object[] {
                        site}, this.UpdateWebSiteOperationCompleted, userState);
        }

        private void OnUpdateWebSiteOperationCompleted(object arg)
        {
            if ((this.UpdateWebSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWebSiteCompleted(this, new UpdateWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallFrontPage", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InstallFrontPage(int siteItemId, string username, string password)
        {
            object[] results = this.Invoke("InstallFrontPage", new object[] {
                        siteItemId,
                        username,
                        password});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallFrontPage(int siteItemId, string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallFrontPage", new object[] {
                        siteItemId,
                        username,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public int EndInstallFrontPage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void InstallFrontPageAsync(int siteItemId, string username, string password)
        {
            this.InstallFrontPageAsync(siteItemId, username, password, null);
        }

        /// <remarks/>
        public void InstallFrontPageAsync(int siteItemId, string username, string password, object userState)
        {
            if ((this.InstallFrontPageOperationCompleted == null))
            {
                this.InstallFrontPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallFrontPageOperationCompleted);
            }
            this.InvokeAsync("InstallFrontPage", new object[] {
                        siteItemId,
                        username,
                        password}, this.InstallFrontPageOperationCompleted, userState);
        }

        private void OnInstallFrontPageOperationCompleted(object arg)
        {
            if ((this.InstallFrontPageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallFrontPageCompleted(this, new InstallFrontPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UninstallFrontPage", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UninstallFrontPage(int siteItemId)
        {
            object[] results = this.Invoke("UninstallFrontPage", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUninstallFrontPage(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UninstallFrontPage", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUninstallFrontPage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UninstallFrontPageAsync(int siteItemId)
        {
            this.UninstallFrontPageAsync(siteItemId, null);
        }

        /// <remarks/>
        public void UninstallFrontPageAsync(int siteItemId, object userState)
        {
            if ((this.UninstallFrontPageOperationCompleted == null))
            {
                this.UninstallFrontPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallFrontPageOperationCompleted);
            }
            this.InvokeAsync("UninstallFrontPage", new object[] {
                        siteItemId}, this.UninstallFrontPageOperationCompleted, userState);
        }

        private void OnUninstallFrontPageOperationCompleted(object arg)
        {
            if ((this.UninstallFrontPageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallFrontPageCompleted(this, new UninstallFrontPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeFrontPagePassword", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeFrontPagePassword(int siteItemId, string password)
        {
            object[] results = this.Invoke("ChangeFrontPagePassword", new object[] {
                        siteItemId,
                        password});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeFrontPagePassword(int siteItemId, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeFrontPagePassword", new object[] {
                        siteItemId,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public int EndChangeFrontPagePassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void ChangeFrontPagePasswordAsync(int siteItemId, string password)
        {
            this.ChangeFrontPagePasswordAsync(siteItemId, password, null);
        }

        /// <remarks/>
        public void ChangeFrontPagePasswordAsync(int siteItemId, string password, object userState)
        {
            if ((this.ChangeFrontPagePasswordOperationCompleted == null))
            {
                this.ChangeFrontPagePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeFrontPagePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeFrontPagePassword", new object[] {
                        siteItemId,
                        password}, this.ChangeFrontPagePasswordOperationCompleted, userState);
        }

        private void OnChangeFrontPagePasswordOperationCompleted(object arg)
        {
            if ((this.ChangeFrontPagePasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeFrontPagePasswordCompleted(this, new ChangeFrontPagePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RepairWebSite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RepairWebSite(int siteItemId)
        {
            object[] results = this.Invoke("RepairWebSite", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRepairWebSite(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RepairWebSite", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndRepairWebSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void RepairWebSiteAsync(int siteItemId)
        {
            this.RepairWebSiteAsync(siteItemId, null);
        }

        /// <remarks/>
        public void RepairWebSiteAsync(int siteItemId, object userState)
        {
            if ((this.RepairWebSiteOperationCompleted == null))
            {
                this.RepairWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRepairWebSiteOperationCompleted);
            }
            this.InvokeAsync("RepairWebSite", new object[] {
                        siteItemId}, this.RepairWebSiteOperationCompleted, userState);
        }

        private void OnRepairWebSiteOperationCompleted(object arg)
        {
            if ((this.RepairWebSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RepairWebSiteCompleted(this, new RepairWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteWebSite", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteWebSite(int siteItemId, bool deleteWebsiteDirectory)
        {
            object[] results = this.Invoke("DeleteWebSite", new object[] {
                        siteItemId,
                        deleteWebsiteDirectory});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteWebSite(int siteItemId, bool deleteWebsiteDirectory, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteWebSite", new object[] {
                        siteItemId,
                        deleteWebsiteDirectory}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteWebSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteWebSiteAsync(int siteItemId, bool deleteWebsiteDirectory)
        {
            this.DeleteWebSiteAsync(siteItemId, deleteWebsiteDirectory, null);
        }

        /// <remarks/>
        public void DeleteWebSiteAsync(int siteItemId, bool deleteWebsiteDirectory, object userState)
        {
            if ((this.DeleteWebSiteOperationCompleted == null))
            {
                this.DeleteWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWebSiteOperationCompleted);
            }
            this.InvokeAsync("DeleteWebSite", new object[] {
                        siteItemId,
                        deleteWebsiteDirectory}, this.DeleteWebSiteOperationCompleted, userState);
        }

        private void OnDeleteWebSiteOperationCompleted(object arg)
        {
            if ((this.DeleteWebSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWebSiteCompleted(this, new DeleteWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SwitchWebSiteToDedicatedIP", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SwitchWebSiteToDedicatedIP(int siteItemId, int ipAddressId)
        {
            object[] results = this.Invoke("SwitchWebSiteToDedicatedIP", new object[] {
                        siteItemId,
                        ipAddressId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSwitchWebSiteToDedicatedIP(int siteItemId, int ipAddressId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SwitchWebSiteToDedicatedIP", new object[] {
                        siteItemId,
                        ipAddressId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndSwitchWebSiteToDedicatedIP(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void SwitchWebSiteToDedicatedIPAsync(int siteItemId, int ipAddressId)
        {
            this.SwitchWebSiteToDedicatedIPAsync(siteItemId, ipAddressId, null);
        }

        /// <remarks/>
        public void SwitchWebSiteToDedicatedIPAsync(int siteItemId, int ipAddressId, object userState)
        {
            if ((this.SwitchWebSiteToDedicatedIPOperationCompleted == null))
            {
                this.SwitchWebSiteToDedicatedIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchWebSiteToDedicatedIPOperationCompleted);
            }
            this.InvokeAsync("SwitchWebSiteToDedicatedIP", new object[] {
                        siteItemId,
                        ipAddressId}, this.SwitchWebSiteToDedicatedIPOperationCompleted, userState);
        }

        private void OnSwitchWebSiteToDedicatedIPOperationCompleted(object arg)
        {
            if ((this.SwitchWebSiteToDedicatedIPCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchWebSiteToDedicatedIPCompleted(this, new SwitchWebSiteToDedicatedIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SwitchWebSiteToSharedIP", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SwitchWebSiteToSharedIP(int siteItemId)
        {
            object[] results = this.Invoke("SwitchWebSiteToSharedIP", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSwitchWebSiteToSharedIP(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SwitchWebSiteToSharedIP", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndSwitchWebSiteToSharedIP(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void SwitchWebSiteToSharedIPAsync(int siteItemId)
        {
            this.SwitchWebSiteToSharedIPAsync(siteItemId, null);
        }

        /// <remarks/>
        public void SwitchWebSiteToSharedIPAsync(int siteItemId, object userState)
        {
            if ((this.SwitchWebSiteToSharedIPOperationCompleted == null))
            {
                this.SwitchWebSiteToSharedIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchWebSiteToSharedIPOperationCompleted);
            }
            this.InvokeAsync("SwitchWebSiteToSharedIP", new object[] {
                        siteItemId}, this.SwitchWebSiteToSharedIPOperationCompleted, userState);
        }

        private void OnSwitchWebSiteToSharedIPOperationCompleted(object arg)
        {
            if ((this.SwitchWebSiteToSharedIPCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchWebSiteToSharedIPCompleted(this, new SwitchWebSiteToSharedIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetVirtualDirectories", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebVirtualDirectory[] GetVirtualDirectories(int siteItemId)
        {
            object[] results = this.Invoke("GetVirtualDirectories", new object[] {
                        siteItemId});
            return ((WebVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualDirectories(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetVirtualDirectories", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebVirtualDirectory[] EndGetVirtualDirectories(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public void GetVirtualDirectoriesAsync(int siteItemId)
        {
            this.GetVirtualDirectoriesAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetVirtualDirectoriesAsync(int siteItemId, object userState)
        {
            if ((this.GetVirtualDirectoriesOperationCompleted == null))
            {
                this.GetVirtualDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetVirtualDirectories", new object[] {
                        siteItemId}, this.GetVirtualDirectoriesOperationCompleted, userState);
        }

        private void OnGetVirtualDirectoriesOperationCompleted(object arg)
        {
            if ((this.GetVirtualDirectoriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualDirectoriesCompleted(this, new GetVirtualDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebVirtualDirectory GetVirtualDirectory(int siteItemId, string vdirName)
        {
            object[] results = this.Invoke("GetVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName});
            return ((WebVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualDirectory(int siteItemId, string vdirName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, callback, asyncState);
        }

        /// <remarks/>
        public WebVirtualDirectory EndGetVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public void GetVirtualDirectoryAsync(int siteItemId, string vdirName)
        {
            this.GetVirtualDirectoryAsync(siteItemId, vdirName, null);
        }

        /// <remarks/>
        public void GetVirtualDirectoryAsync(int siteItemId, string vdirName, object userState)
        {
            if ((this.GetVirtualDirectoryOperationCompleted == null))
            {
                this.GetVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, this.GetVirtualDirectoryOperationCompleted, userState);
        }

        private void OnGetVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.GetVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualDirectoryCompleted(this, new GetVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddVirtualDirectory(int siteItemId, string vdirName, string vdirPath)
        {
            object[] results = this.Invoke("AddVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddVirtualDirectory(int siteItemId, string vdirName, string vdirPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddVirtualDirectoryAsync(int siteItemId, string vdirName, string vdirPath)
        {
            this.AddVirtualDirectoryAsync(siteItemId, vdirName, vdirPath, null);
        }

        /// <remarks/>
        public void AddVirtualDirectoryAsync(int siteItemId, string vdirName, string vdirPath, object userState)
        {
            if ((this.AddVirtualDirectoryOperationCompleted == null))
            {
                this.AddVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("AddVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath}, this.AddVirtualDirectoryOperationCompleted, userState);
        }

        private void OnAddVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.AddVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVirtualDirectoryCompleted(this, new AddVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateVirtualDirectory(int siteItemId, WebVirtualDirectory vdir)
        {
            object[] results = this.Invoke("UpdateVirtualDirectory", new object[] {
                        siteItemId,
                        vdir});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateVirtualDirectory(int siteItemId, WebVirtualDirectory vdir, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateVirtualDirectory", new object[] {
                        siteItemId,
                        vdir}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateVirtualDirectoryAsync(int siteItemId, WebVirtualDirectory vdir)
        {
            this.UpdateVirtualDirectoryAsync(siteItemId, vdir, null);
        }

        /// <remarks/>
        public void UpdateVirtualDirectoryAsync(int siteItemId, WebVirtualDirectory vdir, object userState)
        {
            if ((this.UpdateVirtualDirectoryOperationCompleted == null))
            {
                this.UpdateVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("UpdateVirtualDirectory", new object[] {
                        siteItemId,
                        vdir}, this.UpdateVirtualDirectoryOperationCompleted, userState);
        }

        private void OnUpdateVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.UpdateVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVirtualDirectoryCompleted(this, new UpdateVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteVirtualDirectory(int siteItemId, string vdirName)
        {
            object[] results = this.Invoke("DeleteVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteVirtualDirectory(int siteItemId, string vdirName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteVirtualDirectoryAsync(int siteItemId, string vdirName)
        {
            this.DeleteVirtualDirectoryAsync(siteItemId, vdirName);
        }

        /// <remarks/>
        public void DeleteVirtualDirectoryAsync(int siteItemId, string vdirName, object userState)
        {
            if ((this.DeleteVirtualDirectoryOperationCompleted == null))
            {
                this.DeleteVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("DeleteVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, this.DeleteVirtualDirectoryOperationCompleted, userState);
        }

        private void OnDeleteVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.DeleteVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVirtualDirectoryCompleted(this, new DeleteVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetAppVirtualDirectories", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebAppVirtualDirectory[] GetAppVirtualDirectories(int siteItemId)
        {
            object[] results = this.Invoke("GetAppVirtualDirectories", new object[] {
                        siteItemId});
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAppVirtualDirectories(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAppVirtualDirectories", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] EndGetAppVirtualDirectories(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebAppVirtualDirectory[])(results[0]));
        }

        /// <remarks/>
        public void GetAppVirtualDirectoriesAsync(int siteItemId)
        {
            this.GetAppVirtualDirectoriesAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetAppVirtualDirectoriesAsync(int siteItemId, object userState)
        {
            if ((this.GetAppVirtualDirectoriesOperationCompleted == null))
            {
                this.GetAppVirtualDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppVirtualDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetAppVirtualDirectories", new object[] {
                        siteItemId}, this.GetAppVirtualDirectoriesOperationCompleted, userState);
        }

        private void OnGetAppVirtualDirectoriesOperationCompleted(object arg)
        {
            if ((this.GetAppVirtualDirectoriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppVirtualDirectoriesCompleted(this, new GetAppVirtualDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebAppVirtualDirectory GetAppVirtualDirectory(int siteItemId, string vdirName)
        {
            object[] results = this.Invoke("GetAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName});
            return ((WebAppVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAppVirtualDirectory(int siteItemId, string vdirName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, callback, asyncState);
        }

        /// <remarks/>
        public WebAppVirtualDirectory EndGetAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebAppVirtualDirectory)(results[0]));
        }

        /// <remarks/>
        public void GetAppVirtualDirectoryAsync(int siteItemId, string vdirName)
        {
            this.GetAppVirtualDirectoryAsync(siteItemId, vdirName, null);
        }

        /// <remarks/>
        public void GetAppVirtualDirectoryAsync(int siteItemId, string vdirName, object userState)
        {
            if ((this.GetAppVirtualDirectoryOperationCompleted == null))
            {
                this.GetAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, this.GetAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnGetAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.GetAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppVirtualDirectoryCompleted(this, new GetAppVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAppVirtualDirectory(int siteItemId, string vdirName, string vdirPath, string aspNetVersion)
        {
            object[] results = this.Invoke("AddAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath,
                        aspNetVersion});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddAppVirtualDirectory(int siteItemId, string vdirName, string vdirPath, string aspNetVersion, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath,
                        aspNetVersion}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddAppVirtualDirectoryAsync(int siteItemId, string vdirName, string vdirPath, string aspNetVersion)
        {
            this.AddAppVirtualDirectoryAsync(siteItemId, vdirName, vdirPath, aspNetVersion, null);
        }

        /// <remarks/>
        public void AddAppVirtualDirectoryAsync(int siteItemId, string vdirName, string vdirPath, string aspNetVersion, object userState)
        {
            if ((this.AddAppVirtualDirectoryOperationCompleted == null))
            {
                this.AddAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("AddAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath,
                        aspNetVersion}, this.AddAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnAddAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.AddAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAppVirtualDirectoryCompleted(this, new AddAppVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateAppVirtualDirectory(int siteItemId, WebAppVirtualDirectory vdir)
        {
            object[] results = this.Invoke("UpdateAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdir});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateAppVirtualDirectory(int siteItemId, WebAppVirtualDirectory vdir, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdir}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateAppVirtualDirectoryAsync(int siteItemId, WebAppVirtualDirectory vdir)
        {
            this.UpdateAppVirtualDirectoryAsync(siteItemId, vdir, null);
        }

        /// <remarks/>
        public void UpdateAppVirtualDirectoryAsync(int siteItemId, WebAppVirtualDirectory vdir, object userState)
        {
            if ((this.UpdateAppVirtualDirectoryOperationCompleted == null))
            {
                this.UpdateAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("UpdateAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdir}, this.UpdateAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnUpdateAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.UpdateAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAppVirtualDirectoryCompleted(this, new UpdateAppVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteAppVirtualDirectory", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteAppVirtualDirectory(int siteItemId, string vdirName)
        {
            object[] results = this.Invoke("DeleteAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteAppVirtualDirectory(int siteItemId, string vdirName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteAppVirtualDirectory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteAppVirtualDirectoryAsync(int siteItemId, string vdirName)
        {
            this.DeleteAppVirtualDirectoryAsync(siteItemId, vdirName, null);
        }

        /// <remarks/>
        public void DeleteAppVirtualDirectoryAsync(int siteItemId, string vdirName, object userState)
        {
            if ((this.DeleteAppVirtualDirectoryOperationCompleted == null))
            {
                this.DeleteAppVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAppVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("DeleteAppVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, this.DeleteAppVirtualDirectoryOperationCompleted, userState);
        }

        private void OnDeleteAppVirtualDirectoryOperationCompleted(object arg)
        {
            if ((this.DeleteAppVirtualDirectoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAppVirtualDirectoryCompleted(this, new DeleteAppVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeSiteState", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeSiteState(int siteItemId, ServerState state)
        {
            object[] results = this.Invoke("ChangeSiteState", new object[] {
                        siteItemId,
                        state});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeSiteState(int siteItemId, ServerState state, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeSiteState", new object[] {
                        siteItemId,
                        state}, callback, asyncState);
        }

        /// <remarks/>
        public int EndChangeSiteState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void ChangeSiteStateAsync(int siteItemId, ServerState state)
        {
            this.ChangeSiteStateAsync(siteItemId, state, null);
        }

        /// <remarks/>
        public void ChangeSiteStateAsync(int siteItemId, ServerState state, object userState)
        {
            if ((this.ChangeSiteStateOperationCompleted == null))
            {
                this.ChangeSiteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSiteStateOperationCompleted);
            }
            this.InvokeAsync("ChangeSiteState", new object[] {
                        siteItemId,
                        state}, this.ChangeSiteStateOperationCompleted, userState);
        }

        private void OnChangeSiteStateOperationCompleted(object arg)
        {
            if ((this.ChangeSiteStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSiteStateCompleted(this, new ChangeSiteStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeAppPoolState", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeAppPoolState(int siteItemId, AppPoolState state)
        {
            object[] results = this.Invoke("ChangeAppPoolState", new object[] {
                        siteItemId,
                        state});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeAppPoolState(int siteItemId, AppPoolState state, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeAppPoolState", new object[] {
                        siteItemId,
                        state}, callback, asyncState);
        }

        /// <remarks/>
        public int EndChangeAppPoolState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void ChangeAppPoolStateAsync(int siteItemId, AppPoolState state)
        {
            this.ChangeAppPoolStateAsync(siteItemId, state, null);
        }

        /// <remarks/>
        public void ChangeAppPoolStateAsync(int siteItemId, AppPoolState state, object userState)
        {
            if ((this.ChangeAppPoolStateOperationCompleted == null))
            {
                this.ChangeAppPoolStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAppPoolStateOperationCompleted);
            }
            this.InvokeAsync("ChangeAppPoolState", new object[] {
                        siteItemId,
                        state}, this.ChangeAppPoolStateOperationCompleted, userState);
        }

        private void OnChangeAppPoolStateOperationCompleted(object arg)
        {
            if ((this.ChangeAppPoolStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAppPoolStateCompleted(this, new ChangeAppPoolStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetAppPoolState", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AppPoolState GetAppPoolState(int siteItemId)
        {
            object[] results = this.Invoke("GetAppPoolState", new object[] {
                        siteItemId});
            return ((AppPoolState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAppPoolState(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAppPoolState", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public AppPoolState EndGetAppPoolState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((AppPoolState)(results[0]));
        }

        /// <remarks/>
        public void GetAppPoolStateAsync(int siteItemId)
        {
            this.GetAppPoolStateAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetAppPoolStateAsync(int siteItemId, object userState)
        {
            if ((this.GetAppPoolStateOperationCompleted == null))
            {
                this.GetAppPoolStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppPoolStateOperationCompleted);
            }
            this.InvokeAsync("GetAppPoolState", new object[] {
                        siteItemId}, this.GetAppPoolStateOperationCompleted, userState);
        }

        private void OnGetAppPoolStateOperationCompleted(object arg)
        {
            if ((this.GetAppPoolStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppPoolStateCompleted(this, new GetAppPoolStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSiteState", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerState GetSiteState(int siteItemId)
        {
            object[] results = this.Invoke("GetSiteState", new object[] {
                        siteItemId});
            return ((ServerState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteState(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteState", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public ServerState EndGetSiteState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServerState)(results[0]));
        }

        /// <remarks/>
        public void GetSiteStateAsync(int siteItemId)
        {
            this.GetSiteStateAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetSiteStateAsync(int siteItemId, object userState)
        {
            if ((this.GetSiteStateOperationCompleted == null))
            {
                this.GetSiteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteStateOperationCompleted);
            }
            this.InvokeAsync("GetSiteState", new object[] {
                        siteItemId}, this.GetSiteStateOperationCompleted, userState);
        }

        private void OnGetSiteStateOperationCompleted(object arg)
        {
            if ((this.GetSiteStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteStateCompleted(this, new GetSiteStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSharedSSLDomains", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSharedSSLDomains(int packageId)
        {
            object[] results = this.Invoke("GetSharedSSLDomains", new object[] {
                        packageId});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSharedSSLDomains(int packageId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSharedSSLDomains", new object[] {
                        packageId}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetSharedSSLDomains(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void GetSharedSSLDomainsAsync(int packageId)
        {
            this.GetSharedSSLDomainsAsync(packageId, null);
        }

        /// <remarks/>
        public void GetSharedSSLDomainsAsync(int packageId, object userState)
        {
            if ((this.GetSharedSSLDomainsOperationCompleted == null))
            {
                this.GetSharedSSLDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedSSLDomainsOperationCompleted);
            }
            this.InvokeAsync("GetSharedSSLDomains", new object[] {
                        packageId}, this.GetSharedSSLDomainsOperationCompleted, userState);
        }

        private void OnGetSharedSSLDomainsOperationCompleted(object arg)
        {
            if ((this.GetSharedSSLDomainsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedSSLDomainsCompleted(this, new GetSharedSSLDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawSSLFoldersPaged", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawSSLFoldersPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
        {
            object[] results = this.Invoke("GetRawSSLFoldersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetRawSSLFoldersPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRawSSLFoldersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataSet EndGetRawSSLFoldersPaged(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        public void GetRawSSLFoldersPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
        {
            this.GetRawSSLFoldersPagedAsync(packageId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }

        /// <remarks/>
        public void GetRawSSLFoldersPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState)
        {
            if ((this.GetRawSSLFoldersPagedOperationCompleted == null))
            {
                this.GetRawSSLFoldersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawSSLFoldersPagedOperationCompleted);
            }
            this.InvokeAsync("GetRawSSLFoldersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawSSLFoldersPagedOperationCompleted, userState);
        }

        private void OnGetRawSSLFoldersPagedOperationCompleted(object arg)
        {
            if ((this.GetRawSSLFoldersPagedCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawSSLFoldersPagedCompleted(this, new GetRawSSLFoldersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSharedSSLFolders", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharedSSLFolder[] GetSharedSSLFolders(int packageId, bool recursive)
        {
            object[] results = this.Invoke("GetSharedSSLFolders", new object[] {
                        packageId,
                        recursive});
            return ((SharedSSLFolder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSharedSSLFolders(int packageId, bool recursive, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSharedSSLFolders", new object[] {
                        packageId,
                        recursive}, callback, asyncState);
        }

        /// <remarks/>
        public SharedSSLFolder[] EndGetSharedSSLFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharedSSLFolder[])(results[0]));
        }

        /// <remarks/>
        public void GetSharedSSLFoldersAsync(int packageId, bool recursive)
        {
            this.GetSharedSSLFoldersAsync(packageId, recursive, null);
        }

        /// <remarks/>
        public void GetSharedSSLFoldersAsync(int packageId, bool recursive, object userState)
        {
            if ((this.GetSharedSSLFoldersOperationCompleted == null))
            {
                this.GetSharedSSLFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedSSLFoldersOperationCompleted);
            }
            this.InvokeAsync("GetSharedSSLFolders", new object[] {
                        packageId,
                        recursive}, this.GetSharedSSLFoldersOperationCompleted, userState);
        }

        private void OnGetSharedSSLFoldersOperationCompleted(object arg)
        {
            if ((this.GetSharedSSLFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedSSLFoldersCompleted(this, new GetSharedSSLFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSharedSSLFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharedSSLFolder GetSharedSSLFolder(int itemId)
        {
            object[] results = this.Invoke("GetSharedSSLFolder", new object[] {
                        itemId});
            return ((SharedSSLFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSharedSSLFolder(int itemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSharedSSLFolder", new object[] {
                        itemId}, callback, asyncState);
        }

        /// <remarks/>
        public SharedSSLFolder EndGetSharedSSLFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharedSSLFolder)(results[0]));
        }

        /// <remarks/>
        public void GetSharedSSLFolderAsync(int itemId)
        {
            this.GetSharedSSLFolderAsync(itemId, null);
        }

        /// <remarks/>
        public void GetSharedSSLFolderAsync(int itemId, object userState)
        {
            if ((this.GetSharedSSLFolderOperationCompleted == null))
            {
                this.GetSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("GetSharedSSLFolder", new object[] {
                        itemId}, this.GetSharedSSLFolderOperationCompleted, userState);
        }

        private void OnGetSharedSSLFolderOperationCompleted(object arg)
        {
            if ((this.GetSharedSSLFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedSSLFolderCompleted(this, new GetSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddSharedSSLFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSharedSSLFolder(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath)
        {
            object[] results = this.Invoke("AddSharedSSLFolder", new object[] {
                        packageId,
                        sslDomain,
                        siteId,
                        vdirName,
                        vdirPath});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddSharedSSLFolder(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddSharedSSLFolder", new object[] {
                        packageId,
                        sslDomain,
                        siteId,
                        vdirName,
                        vdirPath}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddSharedSSLFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddSharedSSLFolderAsync(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath)
        {
            this.AddSharedSSLFolderAsync(packageId, sslDomain, siteId, vdirName, vdirPath, null);
        }

        /// <remarks/>
        public void AddSharedSSLFolderAsync(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath, object userState)
        {
            if ((this.AddSharedSSLFolderOperationCompleted == null))
            {
                this.AddSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("AddSharedSSLFolder", new object[] {
                        packageId,
                        sslDomain,
                        siteId,
                        vdirName,
                        vdirPath}, this.AddSharedSSLFolderOperationCompleted, userState);
        }

        private void OnAddSharedSSLFolderOperationCompleted(object arg)
        {
            if ((this.AddSharedSSLFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSharedSSLFolderCompleted(this, new AddSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSharedSSLFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSharedSSLFolder(SharedSSLFolder vdir)
        {
            object[] results = this.Invoke("UpdateSharedSSLFolder", new object[] {
                        vdir});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSharedSSLFolder(SharedSSLFolder vdir, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSharedSSLFolder", new object[] {
                        vdir}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateSharedSSLFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateSharedSSLFolderAsync(SharedSSLFolder vdir)
        {
            this.UpdateSharedSSLFolderAsync(vdir, null);
        }

        /// <remarks/>
        public void UpdateSharedSSLFolderAsync(SharedSSLFolder vdir, object userState)
        {
            if ((this.UpdateSharedSSLFolderOperationCompleted == null))
            {
                this.UpdateSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateSharedSSLFolder", new object[] {
                        vdir}, this.UpdateSharedSSLFolderOperationCompleted, userState);
        }

        private void OnUpdateSharedSSLFolderOperationCompleted(object arg)
        {
            if ((this.UpdateSharedSSLFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSharedSSLFolderCompleted(this, new UpdateSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSharedSSLFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSharedSSLFolder(int itemId)
        {
            object[] results = this.Invoke("DeleteSharedSSLFolder", new object[] {
                        itemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSharedSSLFolder(int itemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSharedSSLFolder", new object[] {
                        itemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteSharedSSLFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteSharedSSLFolderAsync(int itemId)
        {
            this.DeleteSharedSSLFolderAsync(itemId, null);
        }

        /// <remarks/>
        public void DeleteSharedSSLFolderAsync(int itemId, object userState)
        {
            if ((this.DeleteSharedSSLFolderOperationCompleted == null))
            {
                this.DeleteSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteSharedSSLFolder", new object[] {
                        itemId}, this.DeleteSharedSSLFolderOperationCompleted, userState);
        }

        private void OnDeleteSharedSSLFolderOperationCompleted(object arg)
        {
            if ((this.DeleteSharedSSLFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSharedSSLFolderCompleted(this, new DeleteSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallSecuredFolders", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InstallSecuredFolders(int siteItemId)
        {
            object[] results = this.Invoke("InstallSecuredFolders", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallSecuredFolders(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallSecuredFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndInstallSecuredFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void InstallSecuredFoldersAsync(int siteItemId)
        {
            this.InstallSecuredFoldersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void InstallSecuredFoldersAsync(int siteItemId, object userState)
        {
            if ((this.InstallSecuredFoldersOperationCompleted == null))
            {
                this.InstallSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("InstallSecuredFolders", new object[] {
                        siteItemId}, this.InstallSecuredFoldersOperationCompleted, userState);
        }

        private void OnInstallSecuredFoldersOperationCompleted(object arg)
        {
            if ((this.InstallSecuredFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallSecuredFoldersCompleted(this, new InstallSecuredFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UninstallSecuredFolders", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UninstallSecuredFolders(int siteItemId)
        {
            object[] results = this.Invoke("UninstallSecuredFolders", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUninstallSecuredFolders(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UninstallSecuredFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUninstallSecuredFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UninstallSecuredFoldersAsync(int siteItemId)
        {
            this.UninstallSecuredFoldersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void UninstallSecuredFoldersAsync(int siteItemId, object userState)
        {
            if ((this.UninstallSecuredFoldersOperationCompleted == null))
            {
                this.UninstallSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("UninstallSecuredFolders", new object[] {
                        siteItemId}, this.UninstallSecuredFoldersOperationCompleted, userState);
        }

        private void OnUninstallSecuredFoldersOperationCompleted(object arg)
        {
            if ((this.UninstallSecuredFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallSecuredFoldersCompleted(this, new UninstallSecuredFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSecuredFolders", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebFolder[] GetSecuredFolders(int siteItemId)
        {
            object[] results = this.Invoke("GetSecuredFolders", new object[] {
                        siteItemId});
            return ((WebFolder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredFolders(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecuredFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebFolder[] EndGetSecuredFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebFolder[])(results[0]));
        }

        /// <remarks/>
        public void GetSecuredFoldersAsync(int siteItemId)
        {
            this.GetSecuredFoldersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetSecuredFoldersAsync(int siteItemId, object userState)
        {
            if ((this.GetSecuredFoldersOperationCompleted == null))
            {
                this.GetSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("GetSecuredFolders", new object[] {
                        siteItemId}, this.GetSecuredFoldersOperationCompleted, userState);
        }

        private void OnGetSecuredFoldersOperationCompleted(object arg)
        {
            if ((this.GetSecuredFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredFoldersCompleted(this, new GetSecuredFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSecuredFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebFolder GetSecuredFolder(int siteItemId, string folderPath)
        {
            object[] results = this.Invoke("GetSecuredFolder", new object[] {
                        siteItemId,
                        folderPath});
            return ((WebFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredFolder(int siteItemId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public WebFolder EndGetSecuredFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebFolder)(results[0]));
        }

        /// <remarks/>
        public void GetSecuredFolderAsync(int siteItemId, string folderPath)
        {
            this.GetSecuredFolderAsync(siteItemId, folderPath, null);
        }

        /// <remarks/>
        public void GetSecuredFolderAsync(int siteItemId, string folderPath, object userState)
        {
            if ((this.GetSecuredFolderOperationCompleted == null))
            {
                this.GetSecuredFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredFolderOperationCompleted);
            }
            this.InvokeAsync("GetSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, this.GetSecuredFolderOperationCompleted, userState);
        }

        private void OnGetSecuredFolderOperationCompleted(object arg)
        {
            if ((this.GetSecuredFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredFolderCompleted(this, new GetSecuredFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSecuredFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSecuredFolder(int siteItemId, WebFolder folder)
        {
            object[] results = this.Invoke("UpdateSecuredFolder", new object[] {
                        siteItemId,
                        folder});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSecuredFolder(int siteItemId, WebFolder folder, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSecuredFolder", new object[] {
                        siteItemId,
                        folder}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateSecuredFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateSecuredFolderAsync(int siteItemId, WebFolder folder)
        {
            this.UpdateSecuredFolderAsync(siteItemId, folder, null);
        }

        /// <remarks/>
        public void UpdateSecuredFolderAsync(int siteItemId, WebFolder folder, object userState)
        {
            if ((this.UpdateSecuredFolderOperationCompleted == null))
            {
                this.UpdateSecuredFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSecuredFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateSecuredFolder", new object[] {
                        siteItemId,
                        folder}, this.UpdateSecuredFolderOperationCompleted, userState);
        }

        private void OnUpdateSecuredFolderOperationCompleted(object arg)
        {
            if ((this.UpdateSecuredFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSecuredFolderCompleted(this, new UpdateSecuredFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSecuredFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSecuredFolder(int siteItemId, string folderPath)
        {
            object[] results = this.Invoke("DeleteSecuredFolder", new object[] {
                        siteItemId,
                        folderPath});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecuredFolder(int siteItemId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteSecuredFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteSecuredFolderAsync(int siteItemId, string folderPath)
        {
            this.DeleteSecuredFolderAsync(siteItemId, folderPath, null);
        }

        /// <remarks/>
        public void DeleteSecuredFolderAsync(int siteItemId, string folderPath, object userState)
        {
            if ((this.DeleteSecuredFolderOperationCompleted == null))
            {
                this.DeleteSecuredFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecuredFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, this.DeleteSecuredFolderOperationCompleted, userState);
        }

        private void OnDeleteSecuredFolderOperationCompleted(object arg)
        {
            if ((this.DeleteSecuredFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecuredFolderCompleted(this, new DeleteSecuredFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSecuredUsers", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebUser[] GetSecuredUsers(int siteItemId)
        {
            object[] results = this.Invoke("GetSecuredUsers", new object[] {
                        siteItemId});
            return ((WebUser[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredUsers(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecuredUsers", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebUser[] EndGetSecuredUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebUser[])(results[0]));
        }

        /// <remarks/>
        public void GetSecuredUsersAsync(int siteItemId)
        {
            this.GetSecuredUsersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetSecuredUsersAsync(int siteItemId, object userState)
        {
            if ((this.GetSecuredUsersOperationCompleted == null))
            {
                this.GetSecuredUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredUsersOperationCompleted);
            }
            this.InvokeAsync("GetSecuredUsers", new object[] {
                        siteItemId}, this.GetSecuredUsersOperationCompleted, userState);
        }

        private void OnGetSecuredUsersOperationCompleted(object arg)
        {
            if ((this.GetSecuredUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredUsersCompleted(this, new GetSecuredUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSecuredUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebUser GetSecuredUser(int siteItemId, string userName)
        {
            object[] results = this.Invoke("GetSecuredUser", new object[] {
                        siteItemId,
                        userName});
            return ((WebUser)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredUser(int siteItemId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecuredUser", new object[] {
                        siteItemId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public WebUser EndGetSecuredUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebUser)(results[0]));
        }

        /// <remarks/>
        public void GetSecuredUserAsync(int siteItemId, string userName)
        {
            this.GetSecuredUserAsync(siteItemId, userName, null);
        }

        /// <remarks/>
        public void GetSecuredUserAsync(int siteItemId, string userName, object userState)
        {
            if ((this.GetSecuredUserOperationCompleted == null))
            {
                this.GetSecuredUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredUserOperationCompleted);
            }
            this.InvokeAsync("GetSecuredUser", new object[] {
                        siteItemId,
                        userName}, this.GetSecuredUserOperationCompleted, userState);
        }

        private void OnGetSecuredUserOperationCompleted(object arg)
        {
            if ((this.GetSecuredUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredUserCompleted(this, new GetSecuredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSecuredUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSecuredUser(int siteItemId, WebUser user)
        {
            object[] results = this.Invoke("UpdateSecuredUser", new object[] {
                        siteItemId,
                        user});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSecuredUser(int siteItemId, WebUser user, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSecuredUser", new object[] {
                        siteItemId,
                        user}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateSecuredUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateSecuredUserAsync(int siteItemId, WebUser user)
        {
            this.UpdateSecuredUserAsync(siteItemId, user, null);
        }

        /// <remarks/>
        public void UpdateSecuredUserAsync(int siteItemId, WebUser user, object userState)
        {
            if ((this.UpdateSecuredUserOperationCompleted == null))
            {
                this.UpdateSecuredUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSecuredUserOperationCompleted);
            }
            this.InvokeAsync("UpdateSecuredUser", new object[] {
                        siteItemId,
                        user}, this.UpdateSecuredUserOperationCompleted, userState);
        }

        private void OnUpdateSecuredUserOperationCompleted(object arg)
        {
            if ((this.UpdateSecuredUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSecuredUserCompleted(this, new UpdateSecuredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSecuredUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSecuredUser(int siteItemId, string userName)
        {
            object[] results = this.Invoke("DeleteSecuredUser", new object[] {
                        siteItemId,
                        userName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecuredUser(int siteItemId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSecuredUser", new object[] {
                        siteItemId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteSecuredUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteSecuredUserAsync(int siteItemId, string userName)
        {
            this.DeleteSecuredUserAsync(siteItemId, userName, null);
        }

        /// <remarks/>
        public void DeleteSecuredUserAsync(int siteItemId, string userName, object userState)
        {
            if ((this.DeleteSecuredUserOperationCompleted == null))
            {
                this.DeleteSecuredUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecuredUserOperationCompleted);
            }
            this.InvokeAsync("DeleteSecuredUser", new object[] {
                        siteItemId,
                        userName}, this.DeleteSecuredUserOperationCompleted, userState);
        }

        private void OnDeleteSecuredUserOperationCompleted(object arg)
        {
            if ((this.DeleteSecuredUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecuredUserCompleted(this, new DeleteSecuredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSecuredGroups", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup[] GetSecuredGroups(int siteItemId)
        {
            object[] results = this.Invoke("GetSecuredGroups", new object[] {
                        siteItemId});
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredGroups(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecuredGroups", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup[] EndGetSecuredGroups(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup[])(results[0]));
        }

        /// <remarks/>
        public void GetSecuredGroupsAsync(int siteItemId)
        {
            this.GetSecuredGroupsAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetSecuredGroupsAsync(int siteItemId, object userState)
        {
            if ((this.GetSecuredGroupsOperationCompleted == null))
            {
                this.GetSecuredGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredGroupsOperationCompleted);
            }
            this.InvokeAsync("GetSecuredGroups", new object[] {
                        siteItemId}, this.GetSecuredGroupsOperationCompleted, userState);
        }

        private void OnGetSecuredGroupsOperationCompleted(object arg)
        {
            if ((this.GetSecuredGroupsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredGroupsCompleted(this, new GetSecuredGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSecuredGroup", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup GetSecuredGroup(int siteItemId, string groupName)
        {
            object[] results = this.Invoke("GetSecuredGroup", new object[] {
                        siteItemId,
                        groupName});
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredGroup(int siteItemId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public WebGroup EndGetSecuredGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup)(results[0]));
        }

        /// <remarks/>
        public void GetSecuredGroupAsync(int siteItemId, string groupName)
        {
            this.GetSecuredGroupAsync(siteItemId, groupName, null);
        }

        /// <remarks/>
        public void GetSecuredGroupAsync(int siteItemId, string groupName, object userState)
        {
            if ((this.GetSecuredGroupOperationCompleted == null))
            {
                this.GetSecuredGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredGroupOperationCompleted);
            }
            this.InvokeAsync("GetSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, this.GetSecuredGroupOperationCompleted, userState);
        }

        private void OnGetSecuredGroupOperationCompleted(object arg)
        {
            if ((this.GetSecuredGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredGroupCompleted(this, new GetSecuredGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSecuredGroup", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSecuredGroup(int siteItemId, WebGroup group)
        {
            object[] results = this.Invoke("UpdateSecuredGroup", new object[] {
                        siteItemId,
                        group});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateSecuredGroup(int siteItemId, WebGroup group, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateSecuredGroup", new object[] {
                        siteItemId,
                        group}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateSecuredGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateSecuredGroupAsync(int siteItemId, WebGroup group)
        {
            this.UpdateSecuredGroupAsync(siteItemId, group, null);
        }

        /// <remarks/>
        public void UpdateSecuredGroupAsync(int siteItemId, WebGroup group, object userState)
        {
            if ((this.UpdateSecuredGroupOperationCompleted == null))
            {
                this.UpdateSecuredGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSecuredGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateSecuredGroup", new object[] {
                        siteItemId,
                        group}, this.UpdateSecuredGroupOperationCompleted, userState);
        }

        private void OnUpdateSecuredGroupOperationCompleted(object arg)
        {
            if ((this.UpdateSecuredGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSecuredGroupCompleted(this, new UpdateSecuredGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSecuredGroup", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSecuredGroup(int siteItemId, string groupName)
        {
            object[] results = this.Invoke("DeleteSecuredGroup", new object[] {
                        siteItemId,
                        groupName});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecuredGroup(int siteItemId, string groupName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteSecuredGroup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteSecuredGroupAsync(int siteItemId, string groupName)
        {
            this.DeleteSecuredGroupAsync(siteItemId, groupName, null);
        }

        /// <remarks/>
        public void DeleteSecuredGroupAsync(int siteItemId, string groupName, object userState)
        {
            if ((this.DeleteSecuredGroupOperationCompleted == null))
            {
                this.DeleteSecuredGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecuredGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, this.DeleteSecuredGroupOperationCompleted, userState);
        }

        private void OnDeleteSecuredGroupOperationCompleted(object arg)
        {
            if ((this.DeleteSecuredGroupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecuredGroupCompleted(this, new DeleteSecuredGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GrantWebDeployPublishingAccess", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject GrantWebDeployPublishingAccess(int siteItemId, string accountName, string accountPassword)
        {
            object[] results = this.Invoke("GrantWebDeployPublishingAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGrantWebDeployPublishingAccess(int siteItemId, string accountName, string accountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GrantWebDeployPublishingAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndGrantWebDeployPublishingAccess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void GrantWebDeployPublishingAccessAsync(int siteItemId, string accountName, string accountPassword)
        {
            this.GrantWebDeployPublishingAccessAsync(siteItemId, accountName, accountPassword, null);
        }

        /// <remarks/>
        public void GrantWebDeployPublishingAccessAsync(int siteItemId, string accountName, string accountPassword, object userState)
        {
            if ((this.GrantWebDeployPublishingAccessOperationCompleted == null))
            {
                this.GrantWebDeployPublishingAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantWebDeployPublishingAccessOperationCompleted);
            }
            this.InvokeAsync("GrantWebDeployPublishingAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword}, this.GrantWebDeployPublishingAccessOperationCompleted, userState);
        }

        private void OnGrantWebDeployPublishingAccessOperationCompleted(object arg)
        {
            if ((this.GrantWebDeployPublishingAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantWebDeployPublishingAccessCompleted(this, new GrantWebDeployPublishingAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SaveWebDeployPublishingProfile", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SaveWebDeployPublishingProfile(int siteItemId, int[] serviceItemIds)
        {
            object[] results = this.Invoke("SaveWebDeployPublishingProfile", new object[] {
                        siteItemId,
                        serviceItemIds});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSaveWebDeployPublishingProfile(int siteItemId, int[] serviceItemIds, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SaveWebDeployPublishingProfile", new object[] {
                        siteItemId,
                        serviceItemIds}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndSaveWebDeployPublishingProfile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void SaveWebDeployPublishingProfileAsync(int siteItemId, int[] serviceItemIds)
        {
            this.SaveWebDeployPublishingProfileAsync(siteItemId, serviceItemIds, null);
        }

        /// <remarks/>
        public void SaveWebDeployPublishingProfileAsync(int siteItemId, int[] serviceItemIds, object userState)
        {
            if ((this.SaveWebDeployPublishingProfileOperationCompleted == null))
            {
                this.SaveWebDeployPublishingProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveWebDeployPublishingProfileOperationCompleted);
            }
            this.InvokeAsync("SaveWebDeployPublishingProfile", new object[] {
                        siteItemId,
                        serviceItemIds}, this.SaveWebDeployPublishingProfileOperationCompleted, userState);
        }

        private void OnSaveWebDeployPublishingProfileOperationCompleted(object arg)
        {
            if ((this.SaveWebDeployPublishingProfileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveWebDeployPublishingProfileCompleted(this, new SaveWebDeployPublishingProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RevokeWebDeployPublishingAccess", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeWebDeployPublishingAccess(int siteItemId)
        {
            this.Invoke("RevokeWebDeployPublishingAccess", new object[] {
                        siteItemId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRevokeWebDeployPublishingAccess(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RevokeWebDeployPublishingAccess", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRevokeWebDeployPublishingAccess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RevokeWebDeployPublishingAccessAsync(int siteItemId)
        {
            this.RevokeWebDeployPublishingAccessAsync(siteItemId, null);
        }

        /// <remarks/>
        public void RevokeWebDeployPublishingAccessAsync(int siteItemId, object userState)
        {
            if ((this.RevokeWebDeployPublishingAccessOperationCompleted == null))
            {
                this.RevokeWebDeployPublishingAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeWebDeployPublishingAccessOperationCompleted);
            }
            this.InvokeAsync("RevokeWebDeployPublishingAccess", new object[] {
                        siteItemId}, this.RevokeWebDeployPublishingAccessOperationCompleted, userState);
        }

        private void OnRevokeWebDeployPublishingAccessOperationCompleted(object arg)
        {
            if ((this.RevokeWebDeployPublishingAccessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeWebDeployPublishingAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebDeployPublishingProfile", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BytesResult GetWebDeployPublishingProfile(int siteItemId)
        {
            object[] results = this.Invoke("GetWebDeployPublishingProfile", new object[] {
                        siteItemId});
            return ((BytesResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetWebDeployPublishingProfile(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetWebDeployPublishingProfile", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public BytesResult EndGetWebDeployPublishingProfile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((BytesResult)(results[0]));
        }

        /// <remarks/>
        public void GetWebDeployPublishingProfileAsync(int siteItemId)
        {
            this.GetWebDeployPublishingProfileAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetWebDeployPublishingProfileAsync(int siteItemId, object userState)
        {
            if ((this.GetWebDeployPublishingProfileOperationCompleted == null))
            {
                this.GetWebDeployPublishingProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebDeployPublishingProfileOperationCompleted);
            }
            this.InvokeAsync("GetWebDeployPublishingProfile", new object[] {
                        siteItemId}, this.GetWebDeployPublishingProfileOperationCompleted, userState);
        }

        private void OnGetWebDeployPublishingProfileOperationCompleted(object arg)
        {
            if ((this.GetWebDeployPublishingProfileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebDeployPublishingProfileCompleted(this, new GetWebDeployPublishingProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeWebDeployPublishingPassword", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ChangeWebDeployPublishingPassword(int siteItemId, string newAccountPassword)
        {
            object[] results = this.Invoke("ChangeWebDeployPublishingPassword", new object[] {
                        siteItemId,
                        newAccountPassword});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeWebDeployPublishingPassword(int siteItemId, string newAccountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeWebDeployPublishingPassword", new object[] {
                        siteItemId,
                        newAccountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndChangeWebDeployPublishingPassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void ChangeWebDeployPublishingPasswordAsync(int siteItemId, string newAccountPassword)
        {
            this.ChangeWebDeployPublishingPasswordAsync(siteItemId, newAccountPassword, null);
        }

        /// <remarks/>
        public void ChangeWebDeployPublishingPasswordAsync(int siteItemId, string newAccountPassword, object userState)
        {
            if ((this.ChangeWebDeployPublishingPasswordOperationCompleted == null))
            {
                this.ChangeWebDeployPublishingPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeWebDeployPublishingPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeWebDeployPublishingPassword", new object[] {
                        siteItemId,
                        newAccountPassword}, this.ChangeWebDeployPublishingPasswordOperationCompleted, userState);
        }

        private void OnChangeWebDeployPublishingPasswordOperationCompleted(object arg)
        {
            if ((this.ChangeWebDeployPublishingPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeWebDeployPublishingPasswordCompleted(this, new ChangeWebDeployPublishingPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeStatus", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HeliconApeStatus GetHeliconApeStatus(int siteItemId)
        {
            object[] results = this.Invoke("GetHeliconApeStatus", new object[] {
                        siteItemId});
            return ((HeliconApeStatus)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeStatus(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeStatus", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public HeliconApeStatus EndGetHeliconApeStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HeliconApeStatus)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeStatusAsync(int siteItemId)
        {
            this.GetHeliconApeStatusAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetHeliconApeStatusAsync(int siteItemId, object userState)
        {
            if ((this.GetHeliconApeStatusOperationCompleted == null))
            {
                this.GetHeliconApeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeStatusOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeStatus", new object[] {
                        siteItemId}, this.GetHeliconApeStatusOperationCompleted, userState);
        }

        private void OnGetHeliconApeStatusOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeStatusCompleted(this, new GetHeliconApeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallHeliconApe", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InstallHeliconApe(int siteItemId)
        {
            this.Invoke("InstallHeliconApe", new object[] {
                        siteItemId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallHeliconApe(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallHeliconApe", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndInstallHeliconApe(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void InstallHeliconApeAsync(int siteItemId)
        {
            this.InstallHeliconApeAsync(siteItemId, null);
        }

        /// <remarks/>
        public void InstallHeliconApeAsync(int siteItemId, object userState)
        {
            if ((this.InstallHeliconApeOperationCompleted == null))
            {
                this.InstallHeliconApeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallHeliconApeOperationCompleted);
            }
            this.InvokeAsync("InstallHeliconApe", new object[] {
                        siteItemId}, this.InstallHeliconApeOperationCompleted, userState);
        }

        private void OnInstallHeliconApeOperationCompleted(object arg)
        {
            if ((this.InstallHeliconApeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallHeliconApeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EnableHeliconApe", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EnableHeliconApe(int siteItemId)
        {
            object[] results = this.Invoke("EnableHeliconApe", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginEnableHeliconApe(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EnableHeliconApe", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndEnableHeliconApe(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void EnableHeliconApeAsync(int siteItemId)
        {
            this.EnableHeliconApeAsync(siteItemId, null);
        }

        /// <remarks/>
        public void EnableHeliconApeAsync(int siteItemId, object userState)
        {
            if ((this.EnableHeliconApeOperationCompleted == null))
            {
                this.EnableHeliconApeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableHeliconApeOperationCompleted);
            }
            this.InvokeAsync("EnableHeliconApe", new object[] {
                        siteItemId}, this.EnableHeliconApeOperationCompleted, userState);
        }

        private void OnEnableHeliconApeOperationCompleted(object arg)
        {
            if ((this.EnableHeliconApeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableHeliconApeCompleted(this, new EnableHeliconApeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DisableHeliconApe", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DisableHeliconApe(int siteItemId)
        {
            object[] results = this.Invoke("DisableHeliconApe", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDisableHeliconApe(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DisableHeliconApe", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDisableHeliconApe(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DisableHeliconApeAsync(int siteItemId)
        {
            this.DisableHeliconApeAsync(siteItemId, null);
        }

        /// <remarks/>
        public void DisableHeliconApeAsync(int siteItemId, object userState)
        {
            if ((this.DisableHeliconApeOperationCompleted == null))
            {
                this.DisableHeliconApeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableHeliconApeOperationCompleted);
            }
            this.InvokeAsync("DisableHeliconApe", new object[] {
                        siteItemId}, this.DisableHeliconApeOperationCompleted, userState);
        }

        private void OnDisableHeliconApeOperationCompleted(object arg)
        {
            if ((this.DisableHeliconApeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableHeliconApeCompleted(this, new DisableHeliconApeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EnableHeliconApeGlobally", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int EnableHeliconApeGlobally(int serviceId)
        {
            object[] results = this.Invoke("EnableHeliconApeGlobally", new object[] {
                        serviceId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginEnableHeliconApeGlobally(int serviceId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("EnableHeliconApeGlobally", new object[] {
                        serviceId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndEnableHeliconApeGlobally(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void EnableHeliconApeGloballyAsync(int serviceId)
        {
            this.EnableHeliconApeGloballyAsync(serviceId, null);
        }

        /// <remarks/>
        public void EnableHeliconApeGloballyAsync(int serviceId, object userState)
        {
            if ((this.EnableHeliconApeGloballyOperationCompleted == null))
            {
                this.EnableHeliconApeGloballyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableHeliconApeGloballyOperationCompleted);
            }
            this.InvokeAsync("EnableHeliconApeGlobally", new object[] {
                        serviceId}, this.EnableHeliconApeGloballyOperationCompleted, userState);
        }

        private void OnEnableHeliconApeGloballyOperationCompleted(object arg)
        {
            if ((this.EnableHeliconApeGloballyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableHeliconApeGloballyCompleted(this, new EnableHeliconApeGloballyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DisableHeliconApeGlobally", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DisableHeliconApeGlobally(int serviceId)
        {
            object[] results = this.Invoke("DisableHeliconApeGlobally", new object[] {
                        serviceId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDisableHeliconApeGlobally(int serviceId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DisableHeliconApeGlobally", new object[] {
                        serviceId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDisableHeliconApeGlobally(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DisableHeliconApeGloballyAsync(int serviceId)
        {
            this.DisableHeliconApeGloballyAsync(serviceId, null);
        }

        /// <remarks/>
        public void DisableHeliconApeGloballyAsync(int serviceId, object userState)
        {
            if ((this.DisableHeliconApeGloballyOperationCompleted == null))
            {
                this.DisableHeliconApeGloballyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableHeliconApeGloballyOperationCompleted);
            }
            this.InvokeAsync("DisableHeliconApeGlobally", new object[] {
                        serviceId}, this.DisableHeliconApeGloballyOperationCompleted, userState);
        }

        private void OnDisableHeliconApeGloballyOperationCompleted(object arg)
        {
            if ((this.DisableHeliconApeGloballyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableHeliconApeGloballyCompleted(this, new DisableHeliconApeGloballyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeFolders", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessFolder[] GetHeliconApeFolders(int siteItemId)
        {
            object[] results = this.Invoke("GetHeliconApeFolders", new object[] {
                        siteItemId});
            return ((HtaccessFolder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeFolders(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessFolder[] EndGetHeliconApeFolders(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessFolder[])(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeFoldersAsync(int siteItemId)
        {
            this.GetHeliconApeFoldersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetHeliconApeFoldersAsync(int siteItemId, object userState)
        {
            if ((this.GetHeliconApeFoldersOperationCompleted == null))
            {
                this.GetHeliconApeFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeFoldersOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeFolders", new object[] {
                        siteItemId}, this.GetHeliconApeFoldersOperationCompleted, userState);
        }

        private void OnGetHeliconApeFoldersOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeFoldersCompleted(this, new GetHeliconApeFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeHttpdFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessFolder GetHeliconApeHttpdFolder(int serviceId)
        {
            object[] results = this.Invoke("GetHeliconApeHttpdFolder", new object[] {
                        serviceId});
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeHttpdFolder(int serviceId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeHttpdFolder", new object[] {
                        serviceId}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessFolder EndGetHeliconApeHttpdFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeHttpdFolderAsync(int serviceId)
        {
            this.GetHeliconApeHttpdFolderAsync(serviceId, null);
        }

        /// <remarks/>
        public void GetHeliconApeHttpdFolderAsync(int serviceId, object userState)
        {
            if ((this.GetHeliconApeHttpdFolderOperationCompleted == null))
            {
                this.GetHeliconApeHttpdFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeHttpdFolderOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeHttpdFolder", new object[] {
                        serviceId}, this.GetHeliconApeHttpdFolderOperationCompleted, userState);
        }

        private void OnGetHeliconApeHttpdFolderOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeHttpdFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeHttpdFolderCompleted(this, new GetHeliconApeHttpdFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessFolder GetHeliconApeFolder(int siteItemId, string folderPath)
        {
            object[] results = this.Invoke("GetHeliconApeFolder", new object[] {
                        siteItemId,
                        folderPath});
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeFolder(int siteItemId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeFolder", new object[] {
                        siteItemId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessFolder EndGetHeliconApeFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessFolder)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeFolderAsync(int siteItemId, string folderPath)
        {
            this.GetHeliconApeFolderAsync(siteItemId, folderPath, null);
        }

        /// <remarks/>
        public void GetHeliconApeFolderAsync(int siteItemId, string folderPath, object userState)
        {
            if ((this.GetHeliconApeFolderOperationCompleted == null))
            {
                this.GetHeliconApeFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeFolderOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeFolder", new object[] {
                        siteItemId,
                        folderPath}, this.GetHeliconApeFolderOperationCompleted, userState);
        }

        private void OnGetHeliconApeFolderOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeFolderCompleted(this, new GetHeliconApeFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateHeliconApeFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateHeliconApeFolder(int siteItemId, HtaccessFolder folder)
        {
            object[] results = this.Invoke("UpdateHeliconApeFolder", new object[] {
                        siteItemId,
                        folder});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeFolder(int siteItemId, HtaccessFolder folder, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeFolder", new object[] {
                        siteItemId,
                        folder}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateHeliconApeFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateHeliconApeFolderAsync(int siteItemId, HtaccessFolder folder)
        {
            this.UpdateHeliconApeFolderAsync(siteItemId, folder, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeFolderAsync(int siteItemId, HtaccessFolder folder, object userState)
        {
            if ((this.UpdateHeliconApeFolderOperationCompleted == null))
            {
                this.UpdateHeliconApeFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeFolder", new object[] {
                        siteItemId,
                        folder}, this.UpdateHeliconApeFolderOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeFolderOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeFolderCompleted(this, new UpdateHeliconApeFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateHeliconApeHttpdFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateHeliconApeHttpdFolder(int serviceId, HtaccessFolder folder)
        {
            object[] results = this.Invoke("UpdateHeliconApeHttpdFolder", new object[] {
                        serviceId,
                        folder});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeHttpdFolder(int serviceId, HtaccessFolder folder, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeHttpdFolder", new object[] {
                        serviceId,
                        folder}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateHeliconApeHttpdFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateHeliconApeHttpdFolderAsync(int serviceId, HtaccessFolder folder)
        {
            this.UpdateHeliconApeHttpdFolderAsync(serviceId, folder, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeHttpdFolderAsync(int serviceId, HtaccessFolder folder, object userState)
        {
            if ((this.UpdateHeliconApeHttpdFolderOperationCompleted == null))
            {
                this.UpdateHeliconApeHttpdFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeHttpdFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeHttpdFolder", new object[] {
                        serviceId,
                        folder}, this.UpdateHeliconApeHttpdFolderOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeHttpdFolderOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeHttpdFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeHttpdFolderCompleted(this, new UpdateHeliconApeHttpdFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteHeliconApeFolder", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteHeliconApeFolder(int siteItemId, string folderPath)
        {
            object[] results = this.Invoke("DeleteHeliconApeFolder", new object[] {
                        siteItemId,
                        folderPath});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteHeliconApeFolder(int siteItemId, string folderPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteHeliconApeFolder", new object[] {
                        siteItemId,
                        folderPath}, callback, asyncState);
        }

        /// <remarks/>
        public int EndDeleteHeliconApeFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void DeleteHeliconApeFolderAsync(int siteItemId, string folderPath)
        {
            this.DeleteHeliconApeFolderAsync(siteItemId, folderPath, null);
        }

        /// <remarks/>
        public void DeleteHeliconApeFolderAsync(int siteItemId, string folderPath, object userState)
        {
            if ((this.DeleteHeliconApeFolderOperationCompleted == null))
            {
                this.DeleteHeliconApeFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHeliconApeFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteHeliconApeFolder", new object[] {
                        siteItemId,
                        folderPath}, this.DeleteHeliconApeFolderOperationCompleted, userState);
        }

        private void OnDeleteHeliconApeFolderOperationCompleted(object arg)
        {
            if ((this.DeleteHeliconApeFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHeliconApeFolderCompleted(this, new DeleteHeliconApeFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeUsers", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessUser[] GetHeliconApeUsers(int siteItemId)
        {
            object[] results = this.Invoke("GetHeliconApeUsers", new object[] {
                        siteItemId});
            return ((HtaccessUser[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeUsers(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeUsers", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessUser[] EndGetHeliconApeUsers(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessUser[])(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeUsersAsync(int siteItemId)
        {
            this.GetHeliconApeUsersAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetHeliconApeUsersAsync(int siteItemId, object userState)
        {
            if ((this.GetHeliconApeUsersOperationCompleted == null))
            {
                this.GetHeliconApeUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeUsersOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeUsers", new object[] {
                        siteItemId}, this.GetHeliconApeUsersOperationCompleted, userState);
        }

        private void OnGetHeliconApeUsersOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeUsersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeUsersCompleted(this, new GetHeliconApeUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHeliconApeUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HtaccessUser GetHeliconApeUser(int siteItemId, string userName)
        {
            object[] results = this.Invoke("GetHeliconApeUser", new object[] {
                        siteItemId,
                        userName});
            return ((HtaccessUser)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetHeliconApeUser(int siteItemId, string userName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetHeliconApeUser", new object[] {
                        siteItemId,
                        userName}, callback, asyncState);
        }

        /// <remarks/>
        public HtaccessUser EndGetHeliconApeUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((HtaccessUser)(results[0]));
        }

        /// <remarks/>
        public void GetHeliconApeUserAsync(int siteItemId, string userName)
        {
            this.GetHeliconApeUserAsync(siteItemId, userName, null);
        }

        /// <remarks/>
        public void GetHeliconApeUserAsync(int siteItemId, string userName, object userState)
        {
            if ((this.GetHeliconApeUserOperationCompleted == null))
            {
                this.GetHeliconApeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHeliconApeUserOperationCompleted);
            }
            this.InvokeAsync("GetHeliconApeUser", new object[] {
                        siteItemId,
                        userName}, this.GetHeliconApeUserOperationCompleted, userState);
        }

        private void OnGetHeliconApeUserOperationCompleted(object arg)
        {
            if ((this.GetHeliconApeUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHeliconApeUserCompleted(this, new GetHeliconApeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateHeliconApeUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateHeliconApeUser(int siteItemId, HtaccessUser user)
        {
            object[] results = this.Invoke("UpdateHeliconApeUser", new object[] {
                        siteItemId,
                        user});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHeliconApeUser(int siteItemId, HtaccessUser user, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHeliconApeUser", new object[] {
                        siteItemId,
                        user}, callback, asyncState);
        }

        /// <remarks/>
        public int EndUpdateHeliconApeUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void UpdateHeliconApeUserAsync(int siteItemId, HtaccessUser user)
        {
            this.UpdateHeliconApeUserAsync(siteItemId, user, null);
        }

        /// <remarks/>
        public void UpdateHeliconApeUserAsync(int siteItemId, HtaccessUser user, object userState)
        {
            if ((this.UpdateHeliconApeUserOperationCompleted == null))
            {
                this.UpdateHeliconApeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHeliconApeUserOperationCompleted);
            }
            this.InvokeAsync("UpdateHeliconApeUser", new object[] {
                        siteItemId,
                        user}, this.UpdateHeliconApeUserOperationCompleted, userState);
        }

        private void OnUpdateHeliconApeUserOperationCompleted(object arg)
        {
            if ((this.UpdateHeliconApeUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHeliconApeUserCompleted(this, new UpdateHeliconApeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHeliconApeUserCompletedEventHandler(object sender, DeleteHeliconApeUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteHeliconApeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteHeliconApeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeGroupsCompletedEventHandler(object sender, GetHeliconApeGroupsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeGroupCompletedEventHandler(object sender, GetHeliconApeGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeGroupCompletedEventHandler(object sender, UpdateHeliconApeGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateHeliconApeGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateHeliconApeGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHeliconApeGroupCompletedEventHandler(object sender, DeleteHeliconApeGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteHeliconApeGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteHeliconApeGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetZooApplicationsCompletedEventHandler(object sender, GetZooApplicationsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZooApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetZooApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebAppVirtualDirectory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetZooEnvironmentVariableCompletedEventHandler(object sender, SetZooEnvironmentVariableCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetZooEnvironmentVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetZooEnvironmentVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetZooConsoleEnabledCompletedEventHandler(object sender, SetZooConsoleEnabledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetZooConsoleEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetZooConsoleEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetZooConsoleDisabledCompletedEventHandler(object sender, SetZooConsoleDisabledCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetZooConsoleDisabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetZooConsoleDisabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public StringResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((StringResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GrantWebManagementAccessCompletedEventHandler(object sender, GrantWebManagementAccessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrantWebManagementAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GrantWebManagementAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeWebManagementAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeWebManagementAccessPasswordCompletedEventHandler(object sender, ChangeWebManagementAccessPasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeWebManagementAccessPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeWebManagementAccessPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CertificateRequestCompletedEventHandler(object sender, CertificateRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CertificateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallCertificateCompletedEventHandler(object sender, InstallCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallPfxCompletedEventHandler(object sender, InstallPfxCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallPfxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallPfxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPendingCertificatesCompletedEventHandler(object sender, GetPendingCertificatesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPendingCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSSLCertificateByIDCompletedEventHandler(object sender, GetSSLCertificateByIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSSLCertificateByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSSLCertificateByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteCertCompletedEventHandler(object sender, GetSiteCertCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckSSLForWebsiteCompletedEventHandler(object sender, CheckSSLForWebsiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSSLForWebsiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckSSLForWebsiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckSSLForDomainCompletedEventHandler(object sender, CheckSSLForDomainCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSSLForDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckSSLForDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ExportCertificateCompletedEventHandler(object sender, ExportCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExportCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCertificatesForSiteCompletedEventHandler(object sender, GetCertificatesForSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificatesForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCertificatesForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCertificateCompletedEventHandler(object sender, DeleteCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ImportCertificateCompletedEventHandler(object sender, ImportCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CheckCertificateCompletedEventHandler(object sender, CheckCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCertificateRequestCompletedEventHandler(object sender, DeleteCertificateRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCertificateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteCertificateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawWebSitesPagedCompletedEventHandler(object sender, GetRawWebSitesPagedCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawWebSitesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRawWebSitesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWebSitesCompletedEventHandler(object sender, GetWebSitesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetWebSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebSite[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebSite[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWebSiteCompletedEventHandler(object sender, GetWebSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebSite Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebSite)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWebSitePointersCompletedEventHandler(object sender, GetWebSitePointersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSitePointersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetWebSitePointersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DomainInfo[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddWebSitePointerCompletedEventHandler(object sender, AddWebSitePointerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWebSitePointerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddWebSitePointerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteWebSitePointerCompletedEventHandler(object sender, DeleteWebSitePointerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteWebSitePointerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteWebSitePointerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddWebSiteCompletedEventHandler(object sender, AddWebSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateWebSiteCompletedEventHandler(object sender, UpdateWebSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallFrontPageCompletedEventHandler(object sender, InstallFrontPageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallFrontPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallFrontPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UninstallFrontPageCompletedEventHandler(object sender, UninstallFrontPageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UninstallFrontPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UninstallFrontPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeFrontPagePasswordCompletedEventHandler(object sender, ChangeFrontPagePasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeFrontPagePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeFrontPagePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RepairWebSiteCompletedEventHandler(object sender, RepairWebSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RepairWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RepairWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteWebSiteCompletedEventHandler(object sender, DeleteWebSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SwitchWebSiteToDedicatedIPCompletedEventHandler(object sender, SwitchWebSiteToDedicatedIPCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SwitchWebSiteToDedicatedIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SwitchWebSiteToDedicatedIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SwitchWebSiteToSharedIPCompletedEventHandler(object sender, SwitchWebSiteToSharedIPCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SwitchWebSiteToSharedIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SwitchWebSiteToSharedIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVirtualDirectoriesCompletedEventHandler(object sender, GetVirtualDirectoriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVirtualDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebVirtualDirectory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebVirtualDirectory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVirtualDirectoryCompletedEventHandler(object sender, GetVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebVirtualDirectory Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebVirtualDirectory)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddVirtualDirectoryCompletedEventHandler(object sender, AddVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateVirtualDirectoryCompletedEventHandler(object sender, UpdateVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteVirtualDirectoryCompletedEventHandler(object sender, DeleteVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAppVirtualDirectoriesCompletedEventHandler(object sender, GetAppVirtualDirectoriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppVirtualDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAppVirtualDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebAppVirtualDirectory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebAppVirtualDirectory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAppVirtualDirectoryCompletedEventHandler(object sender, GetAppVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAppVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebAppVirtualDirectory Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebAppVirtualDirectory)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddAppVirtualDirectoryCompletedEventHandler(object sender, AddAppVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAppVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddAppVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateAppVirtualDirectoryCompletedEventHandler(object sender, UpdateAppVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAppVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateAppVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteAppVirtualDirectoryCompletedEventHandler(object sender, DeleteAppVirtualDirectoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAppVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteAppVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }



















    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeSiteStateCompletedEventHandler(object sender, ChangeSiteStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSiteStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeSiteStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeAppPoolStateCompletedEventHandler(object sender, ChangeAppPoolStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeAppPoolStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeAppPoolStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAppPoolStateCompletedEventHandler(object sender, GetAppPoolStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppPoolStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAppPoolStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public AppPoolState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((AppPoolState)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteStateCompletedEventHandler(object sender, GetSiteStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ServerState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ServerState)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSharedSSLDomainsCompletedEventHandler(object sender, GetSharedSSLDomainsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedSSLDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSharedSSLDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawSSLFoldersPagedCompletedEventHandler(object sender, GetRawSSLFoldersPagedCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawSSLFoldersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRawSSLFoldersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataSet Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSharedSSLFoldersCompletedEventHandler(object sender, GetSharedSSLFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedSSLFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSharedSSLFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SharedSSLFolder[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SharedSSLFolder[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSharedSSLFolderCompletedEventHandler(object sender, GetSharedSSLFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SharedSSLFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SharedSSLFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddSharedSSLFolderCompletedEventHandler(object sender, AddSharedSSLFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSharedSSLFolderCompletedEventHandler(object sender, UpdateSharedSSLFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSharedSSLFolderCompletedEventHandler(object sender, DeleteSharedSSLFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallSecuredFoldersCompletedEventHandler(object sender, InstallSecuredFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallSecuredFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallSecuredFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UninstallSecuredFoldersCompletedEventHandler(object sender, UninstallSecuredFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UninstallSecuredFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UninstallSecuredFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecuredFoldersCompletedEventHandler(object sender, GetSecuredFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecuredFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebFolder[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebFolder[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecuredFolderCompletedEventHandler(object sender, GetSecuredFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecuredFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSecuredFolderCompletedEventHandler(object sender, UpdateSecuredFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSecuredFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSecuredFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSecuredFolderCompletedEventHandler(object sender, DeleteSecuredFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSecuredFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteSecuredFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecuredUsersCompletedEventHandler(object sender, GetSecuredUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecuredUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebUser[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebUser[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecuredUserCompletedEventHandler(object sender, GetSecuredUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecuredUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebUser Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebUser)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSecuredUserCompletedEventHandler(object sender, UpdateSecuredUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSecuredUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSecuredUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSecuredUserCompletedEventHandler(object sender, DeleteSecuredUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSecuredUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteSecuredUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecuredGroupsCompletedEventHandler(object sender, GetSecuredGroupsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecuredGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecuredGroupCompletedEventHandler(object sender, GetSecuredGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSecuredGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WebGroup Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateSecuredGroupCompletedEventHandler(object sender, UpdateSecuredGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSecuredGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateSecuredGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSecuredGroupCompletedEventHandler(object sender, DeleteSecuredGroupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSecuredGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteSecuredGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GrantWebDeployPublishingAccessCompletedEventHandler(object sender, GrantWebDeployPublishingAccessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrantWebDeployPublishingAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GrantWebDeployPublishingAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveWebDeployPublishingProfileCompletedEventHandler(object sender, SaveWebDeployPublishingProfileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveWebDeployPublishingProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaveWebDeployPublishingProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RevokeWebDeployPublishingAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWebDeployPublishingProfileCompletedEventHandler(object sender, GetWebDeployPublishingProfileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebDeployPublishingProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetWebDeployPublishingProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public BytesResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((BytesResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeWebDeployPublishingPasswordCompletedEventHandler(object sender, ChangeWebDeployPublishingPasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeWebDeployPublishingPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ChangeWebDeployPublishingPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeStatusCompletedEventHandler(object sender, GetHeliconApeStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HeliconApeStatus Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HeliconApeStatus)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallHeliconApeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableHeliconApeCompletedEventHandler(object sender, EnableHeliconApeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableHeliconApeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EnableHeliconApeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DisableHeliconApeCompletedEventHandler(object sender, DisableHeliconApeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableHeliconApeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DisableHeliconApeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EnableHeliconApeGloballyCompletedEventHandler(object sender, EnableHeliconApeGloballyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableHeliconApeGloballyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EnableHeliconApeGloballyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DisableHeliconApeGloballyCompletedEventHandler(object sender, DisableHeliconApeGloballyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableHeliconApeGloballyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DisableHeliconApeGloballyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeFoldersCompletedEventHandler(object sender, GetHeliconApeFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessFolder[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessFolder[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeHttpdFolderCompletedEventHandler(object sender, GetHeliconApeHttpdFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeHttpdFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeHttpdFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeFolderCompletedEventHandler(object sender, GetHeliconApeFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessFolder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessFolder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeFolderCompletedEventHandler(object sender, UpdateHeliconApeFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateHeliconApeFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateHeliconApeFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeHttpdFolderCompletedEventHandler(object sender, UpdateHeliconApeHttpdFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateHeliconApeHttpdFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateHeliconApeHttpdFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHeliconApeFolderCompletedEventHandler(object sender, DeleteHeliconApeFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteHeliconApeFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteHeliconApeFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeUsersCompletedEventHandler(object sender, GetHeliconApeUsersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessUser[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessUser[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHeliconApeUserCompletedEventHandler(object sender, GetHeliconApeUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHeliconApeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetHeliconApeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public HtaccessUser Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((HtaccessUser)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHeliconApeUserCompletedEventHandler(object sender, UpdateHeliconApeUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateHeliconApeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateHeliconApeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}
