// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.EnterpriseServer
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "esApplicationsInstallerSoap", Namespace = "http://smbsaas/solidcp/enterpriseserver")]
    public partial class esApplicationsInstaller : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback InstallApplicationOperationCompleted;

        private System.Threading.SendOrPostCallback GetApplicationsOperationCompleted;

        private System.Threading.SendOrPostCallback GetCategoriesOperationCompleted;

        private System.Threading.SendOrPostCallback GetApplicationOperationCompleted;

        /// <remarks/>
        public esApplicationsInstaller()
        {
            this.Url = "http://localhost/SolidCPEnterpriseServer11/esApplicationsInstaller.asmx";
        }

        /// <remarks/>
        public event InstallApplicationCompletedEventHandler InstallApplicationCompleted;

        /// <remarks/>
        public event GetApplicationsCompletedEventHandler GetApplicationsCompleted;

        /// <remarks/>
        public event GetCategoriesCompletedEventHandler GetCategoriesCompleted;

        /// <remarks/>
        public event GetApplicationCompletedEventHandler GetApplicationCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/InstallApplication", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InstallApplication(InstallationInfo inst)
        {
            object[] results = this.Invoke("InstallApplication", new object[] {
                        inst});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallApplication(InstallationInfo inst, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallApplication", new object[] {
                        inst}, callback, asyncState);
        }

        /// <remarks/>
        public int EndInstallApplication(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void InstallApplicationAsync(InstallationInfo inst)
        {
            this.InstallApplicationAsync(inst, null);
        }

        /// <remarks/>
        public void InstallApplicationAsync(InstallationInfo inst, object userState)
        {
            if ((this.InstallApplicationOperationCompleted == null))
            {
                this.InstallApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallApplicationOperationCompleted);
            }
            this.InvokeAsync("InstallApplication", new object[] {
                        inst}, this.InstallApplicationOperationCompleted, userState);
        }

        private void OnInstallApplicationOperationCompleted(object arg)
        {
            if ((this.InstallApplicationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallApplicationCompleted(this, new InstallApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetApplications", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ApplicationInfo[] GetApplications(int packageId, string categoryId)
        {
            object[] results = this.Invoke("GetApplications", new object[] {
                        packageId,
                        categoryId});
            return ((ApplicationInfo[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetApplications(int packageId, string categoryId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetApplications", new object[] {
                        packageId,
                        categoryId}, callback, asyncState);
        }

        /// <remarks/>
        public ApplicationInfo[] EndGetApplications(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ApplicationInfo[])(results[0]));
        }

        /// <remarks/>
        public void GetApplicationsAsync(int packageId, string categoryId)
        {
            this.GetApplicationsAsync(packageId, categoryId, null);
        }

        /// <remarks/>
        public void GetApplicationsAsync(int packageId, string categoryId, object userState)
        {
            if ((this.GetApplicationsOperationCompleted == null))
            {
                this.GetApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetApplications", new object[] {
                        packageId,
                        categoryId}, this.GetApplicationsOperationCompleted, userState);
        }

        private void OnGetApplicationsOperationCompleted(object arg)
        {
            if ((this.GetApplicationsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationsCompleted(this, new GetApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCategories", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ApplicationCategory[] GetCategories()
        {
            object[] results = this.Invoke("GetCategories", new object[0]);
            return ((ApplicationCategory[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCategories(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCategories", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public ApplicationCategory[] EndGetCategories(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ApplicationCategory[])(results[0]));
        }

        /// <remarks/>
        public void GetCategoriesAsync()
        {
            this.GetCategoriesAsync(null);
        }

        /// <remarks/>
        public void GetCategoriesAsync(object userState)
        {
            if ((this.GetCategoriesOperationCompleted == null))
            {
                this.GetCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetCategories", new object[0], this.GetCategoriesOperationCompleted, userState);
        }

        private void OnGetCategoriesOperationCompleted(object arg)
        {
            if ((this.GetCategoriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoriesCompleted(this, new GetCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetApplication", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ApplicationInfo GetApplication(int packageId, string applicationId)
        {
            object[] results = this.Invoke("GetApplication", new object[] {
                        packageId,
                        applicationId});
            return ((ApplicationInfo)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetApplication(int packageId, string applicationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetApplication", new object[] {
                        packageId,
                        applicationId}, callback, asyncState);
        }

        /// <remarks/>
        public ApplicationInfo EndGetApplication(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ApplicationInfo)(results[0]));
        }

        /// <remarks/>
        public void GetApplicationAsync(int packageId, string applicationId)
        {
            this.GetApplicationAsync(packageId, applicationId, null);
        }

        /// <remarks/>
        public void GetApplicationAsync(int packageId, string applicationId, object userState)
        {
            if ((this.GetApplicationOperationCompleted == null))
            {
                this.GetApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationOperationCompleted);
            }
            this.InvokeAsync("GetApplication", new object[] {
                        packageId,
                        applicationId}, this.GetApplicationOperationCompleted, userState);
        }

        private void OnGetApplicationOperationCompleted(object arg)
        {
            if ((this.GetApplicationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationCompleted(this, new GetApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InstallApplicationCompletedEventHandler(object sender, InstallApplicationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetApplicationsCompletedEventHandler(object sender, GetApplicationsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ApplicationInfo[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationInfo[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCategoriesCompletedEventHandler(object sender, GetCategoriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ApplicationCategory[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationCategory[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetApplicationCompletedEventHandler(object sender, GetApplicationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ApplicationInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationInfo)(this.results[0]));
            }
        }
    }
}
