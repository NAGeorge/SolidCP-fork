// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

using SolidCP.Providers;
using SolidCP.Providers.Common;
using SolidCP.Providers.HostedSolution;
using SolidCP.Providers.ResultObjects;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esCRMSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esCRM : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollationByServiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyByServiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCRMOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCRMUsersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCRMUserCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCRMUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessUnitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCrmRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserCALTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeUserStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCrmUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMaxDBSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxDBSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstalledLanguagePacksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstalledLanguagePacksByServiceIdOperationCompleted;
        
        /// <remarks/>
        public esCRM() {
            this.Url = "http://127.0.0.1:9002/esCRM.asmx";
        }
        
        /// <remarks/>
        public event CreateOrganizationCompletedEventHandler CreateOrganizationCompleted;
        
        /// <remarks/>
        public event GetCollationCompletedEventHandler GetCollationCompleted;
        
        /// <remarks/>
        public event GetCollationByServiceIdCompletedEventHandler GetCollationByServiceIdCompleted;
        
        /// <remarks/>
        public event GetCurrencyCompletedEventHandler GetCurrencyCompleted;
        
        /// <remarks/>
        public event GetCurrencyByServiceIdCompletedEventHandler GetCurrencyByServiceIdCompleted;
        
        /// <remarks/>
        public event DeleteCRMOrganizationCompletedEventHandler DeleteCRMOrganizationCompleted;
        
        /// <remarks/>
        public event GetCRMUsersPagedCompletedEventHandler GetCRMUsersPagedCompleted;
        
        /// <remarks/>
        public event GetCRMUserCountCompletedEventHandler GetCRMUserCountCompleted;
        
        /// <remarks/>
        public event CreateCRMUserCompletedEventHandler CreateCRMUserCompleted;
        
        /// <remarks/>
        public event GetBusinessUnitsCompletedEventHandler GetBusinessUnitsCompleted;
        
        /// <remarks/>
        public event GetCrmRolesCompletedEventHandler GetCrmRolesCompleted;
        
        /// <remarks/>
        public event SetUserRolesCompletedEventHandler SetUserRolesCompleted;
        
        /// <remarks/>
        public event SetUserCALTypeCompletedEventHandler SetUserCALTypeCompleted;
        
        /// <remarks/>
        public event ChangeUserStateCompletedEventHandler ChangeUserStateCompleted;
        
        /// <remarks/>
        public event GetCrmUserCompletedEventHandler GetCrmUserCompleted;
        
        /// <remarks/>
        public event SetMaxDBSizeCompletedEventHandler SetMaxDBSizeCompleted;
        
        /// <remarks/>
        public event GetDBSizeCompletedEventHandler GetDBSizeCompleted;
        
        /// <remarks/>
        public event GetMaxDBSizeCompletedEventHandler GetMaxDBSizeCompleted;
        
        /// <remarks/>
        public event GetInstalledLanguagePacksCompletedEventHandler GetInstalledLanguagePacksCompleted;
        
        /// <remarks/>
        public event GetInstalledLanguagePacksByServiceIdCompletedEventHandler GetInstalledLanguagePacksByServiceIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateOrganization", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationResult CreateOrganization(int organizationId, string baseCurrencyCode, string baseCurrencyName, string baseCurrencySymbol, string regionName, int userId, string collation, int baseLanguageCode) {
            object[] results = this.Invoke("CreateOrganization", new object[] {
                        organizationId,
                        baseCurrencyCode,
                        baseCurrencyName,
                        baseCurrencySymbol,
                        regionName,
                        userId,
                        collation,
                        baseLanguageCode});
            return ((OrganizationResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateOrganization(int organizationId, string baseCurrencyCode, string baseCurrencyName, string baseCurrencySymbol, string regionName, int userId, string collation, int baseLanguageCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateOrganization", new object[] {
                        organizationId,
                        baseCurrencyCode,
                        baseCurrencyName,
                        baseCurrencySymbol,
                        regionName,
                        userId,
                        collation,
                        baseLanguageCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationResult EndCreateOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrganizationAsync(int organizationId, string baseCurrencyCode, string baseCurrencyName, string baseCurrencySymbol, string regionName, int userId, string collation, int baseLanguageCode) {
            this.CreateOrganizationAsync(organizationId, baseCurrencyCode, baseCurrencyName, baseCurrencySymbol, regionName, userId, collation, baseLanguageCode, null);
        }
        
        /// <remarks/>
        public void CreateOrganizationAsync(int organizationId, string baseCurrencyCode, string baseCurrencyName, string baseCurrencySymbol, string regionName, int userId, string collation, int baseLanguageCode, object userState) {
            if ((this.CreateOrganizationOperationCompleted == null)) {
                this.CreateOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrganizationOperationCompleted);
            }
            this.InvokeAsync("CreateOrganization", new object[] {
                        organizationId,
                        baseCurrencyCode,
                        baseCurrencyName,
                        baseCurrencySymbol,
                        regionName,
                        userId,
                        collation,
                        baseLanguageCode}, this.CreateOrganizationOperationCompleted, userState);
        }
        
        private void OnCreateOrganizationOperationCompleted(object arg) {
            if ((this.CreateOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrganizationCompleted(this, new CreateOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCollation", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringArrayResultObject GetCollation(int packageId) {
            object[] results = this.Invoke("GetCollation", new object[] {
                        packageId});
            return ((StringArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCollation(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCollation", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StringArrayResultObject EndGetCollation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void GetCollationAsync(int packageId) {
            this.GetCollationAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetCollationAsync(int packageId, object userState) {
            if ((this.GetCollationOperationCompleted == null)) {
                this.GetCollationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollationOperationCompleted);
            }
            this.InvokeAsync("GetCollation", new object[] {
                        packageId}, this.GetCollationOperationCompleted, userState);
        }
        
        private void OnGetCollationOperationCompleted(object arg) {
            if ((this.GetCollationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollationCompleted(this, new GetCollationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCollationByServiceId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StringArrayResultObject GetCollationByServiceId(int serviceId) {
            object[] results = this.Invoke("GetCollationByServiceId", new object[] {
                        serviceId});
            return ((StringArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCollationByServiceId(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCollationByServiceId", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StringArrayResultObject EndGetCollationByServiceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StringArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void GetCollationByServiceIdAsync(int serviceId) {
            this.GetCollationByServiceIdAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetCollationByServiceIdAsync(int serviceId, object userState) {
            if ((this.GetCollationByServiceIdOperationCompleted == null)) {
                this.GetCollationByServiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollationByServiceIdOperationCompleted);
            }
            this.InvokeAsync("GetCollationByServiceId", new object[] {
                        serviceId}, this.GetCollationByServiceIdOperationCompleted, userState);
        }
        
        private void OnGetCollationByServiceIdOperationCompleted(object arg) {
            if ((this.GetCollationByServiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollationByServiceIdCompleted(this, new GetCollationByServiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCurrency", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CurrencyArrayResultObject GetCurrency(int packageId) {
            object[] results = this.Invoke("GetCurrency", new object[] {
                        packageId});
            return ((CurrencyArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrency(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrency", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CurrencyArrayResultObject EndGetCurrency(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CurrencyArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyAsync(int packageId) {
            this.GetCurrencyAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetCurrencyAsync(int packageId, object userState) {
            if ((this.GetCurrencyOperationCompleted == null)) {
                this.GetCurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyOperationCompleted);
            }
            this.InvokeAsync("GetCurrency", new object[] {
                        packageId}, this.GetCurrencyOperationCompleted, userState);
        }
        
        private void OnGetCurrencyOperationCompleted(object arg) {
            if ((this.GetCurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyCompleted(this, new GetCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCurrencyByServiceId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CurrencyArrayResultObject GetCurrencyByServiceId(int serviceId) {
            object[] results = this.Invoke("GetCurrencyByServiceId", new object[] {
                        serviceId});
            return ((CurrencyArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrencyByServiceId(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrencyByServiceId", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CurrencyArrayResultObject EndGetCurrencyByServiceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CurrencyArrayResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyByServiceIdAsync(int serviceId) {
            this.GetCurrencyByServiceIdAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetCurrencyByServiceIdAsync(int serviceId, object userState) {
            if ((this.GetCurrencyByServiceIdOperationCompleted == null)) {
                this.GetCurrencyByServiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyByServiceIdOperationCompleted);
            }
            this.InvokeAsync("GetCurrencyByServiceId", new object[] {
                        serviceId}, this.GetCurrencyByServiceIdOperationCompleted, userState);
        }
        
        private void OnGetCurrencyByServiceIdOperationCompleted(object arg) {
            if ((this.GetCurrencyByServiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyByServiceIdCompleted(this, new GetCurrencyByServiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteCRMOrganization", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteCRMOrganization(int organizationId) {
            object[] results = this.Invoke("DeleteCRMOrganization", new object[] {
                        organizationId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCRMOrganization(int organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCRMOrganization", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteCRMOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCRMOrganizationAsync(int organizationId) {
            this.DeleteCRMOrganizationAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void DeleteCRMOrganizationAsync(int organizationId, object userState) {
            if ((this.DeleteCRMOrganizationOperationCompleted == null)) {
                this.DeleteCRMOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCRMOrganizationOperationCompleted);
            }
            this.InvokeAsync("DeleteCRMOrganization", new object[] {
                        organizationId}, this.DeleteCRMOrganizationOperationCompleted, userState);
        }
        
        private void OnDeleteCRMOrganizationOperationCompleted(object arg) {
            if ((this.DeleteCRMOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCRMOrganizationCompleted(this, new DeleteCRMOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCRMUsersPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUsersPagedResult GetCRMUsersPaged(int itemId, string sortColumn, string sortDirection, string name, string email, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetCRMUsersPaged", new object[] {
                        itemId,
                        sortColumn,
                        sortDirection,
                        name,
                        email,
                        startRow,
                        maximumRows});
            return ((OrganizationUsersPagedResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCRMUsersPaged(int itemId, string sortColumn, string sortDirection, string name, string email, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCRMUsersPaged", new object[] {
                        itemId,
                        sortColumn,
                        sortDirection,
                        name,
                        email,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUsersPagedResult EndGetCRMUsersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUsersPagedResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetCRMUsersPagedAsync(int itemId, string sortColumn, string sortDirection, string name, string email, int startRow, int maximumRows) {
            this.GetCRMUsersPagedAsync(itemId, sortColumn, sortDirection, name, email, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetCRMUsersPagedAsync(int itemId, string sortColumn, string sortDirection, string name, string email, int startRow, int maximumRows, object userState) {
            if ((this.GetCRMUsersPagedOperationCompleted == null)) {
                this.GetCRMUsersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCRMUsersPagedOperationCompleted);
            }
            this.InvokeAsync("GetCRMUsersPaged", new object[] {
                        itemId,
                        sortColumn,
                        sortDirection,
                        name,
                        email,
                        startRow,
                        maximumRows}, this.GetCRMUsersPagedOperationCompleted, userState);
        }
        
        private void OnGetCRMUsersPagedOperationCompleted(object arg) {
            if ((this.GetCRMUsersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCRMUsersPagedCompleted(this, new GetCRMUsersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCRMUserCount", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IntResult GetCRMUserCount(int itemId, string name, string email, int CALType) {
            object[] results = this.Invoke("GetCRMUserCount", new object[] {
                        itemId,
                        name,
                        email,
                        CALType});
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCRMUserCount(int itemId, string name, string email, int CALType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCRMUserCount", new object[] {
                        itemId,
                        name,
                        email,
                        CALType}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntResult EndGetCRMUserCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetCRMUserCountAsync(int itemId, string name, string email, int CALType) {
            this.GetCRMUserCountAsync(itemId, name, email, CALType, null);
        }
        
        /// <remarks/>
        public void GetCRMUserCountAsync(int itemId, string name, string email, int CALType, object userState) {
            if ((this.GetCRMUserCountOperationCompleted == null)) {
                this.GetCRMUserCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCRMUserCountOperationCompleted);
            }
            this.InvokeAsync("GetCRMUserCount", new object[] {
                        itemId,
                        name,
                        email,
                        CALType}, this.GetCRMUserCountOperationCompleted, userState);
        }
        
        private void OnGetCRMUserCountOperationCompleted(object arg) {
            if ((this.GetCRMUserCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCRMUserCountCompleted(this, new GetCRMUserCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateCRMUser", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserResult CreateCRMUser(OrganizationUser user, int packageId, int itemId, System.Guid businessUnitOrgId, int CALType) {
            object[] results = this.Invoke("CreateCRMUser", new object[] {
                        user,
                        packageId,
                        itemId,
                        businessUnitOrgId,
                        CALType});
            return ((UserResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateCRMUser(OrganizationUser user, int packageId, int itemId, System.Guid businessUnitOrgId, int CALType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateCRMUser", new object[] {
                        user,
                        packageId,
                        itemId,
                        businessUnitOrgId,
                        CALType}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserResult EndCreateCRMUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCRMUserAsync(OrganizationUser user, int packageId, int itemId, System.Guid businessUnitOrgId, int CALType) {
            this.CreateCRMUserAsync(user, packageId, itemId, businessUnitOrgId, CALType, null);
        }
        
        /// <remarks/>
        public void CreateCRMUserAsync(OrganizationUser user, int packageId, int itemId, System.Guid businessUnitOrgId, int CALType, object userState) {
            if ((this.CreateCRMUserOperationCompleted == null)) {
                this.CreateCRMUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCRMUserOperationCompleted);
            }
            this.InvokeAsync("CreateCRMUser", new object[] {
                        user,
                        packageId,
                        itemId,
                        businessUnitOrgId,
                        CALType}, this.CreateCRMUserOperationCompleted, userState);
        }
        
        private void OnCreateCRMUserOperationCompleted(object arg) {
            if ((this.CreateCRMUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCRMUserCompleted(this, new CreateCRMUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetBusinessUnits", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CRMBusinessUnitsResult GetBusinessUnits(int itemId, int packageId) {
            object[] results = this.Invoke("GetBusinessUnits", new object[] {
                        itemId,
                        packageId});
            return ((CRMBusinessUnitsResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessUnits(int itemId, int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessUnits", new object[] {
                        itemId,
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CRMBusinessUnitsResult EndGetBusinessUnits(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CRMBusinessUnitsResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessUnitsAsync(int itemId, int packageId) {
            this.GetBusinessUnitsAsync(itemId, packageId, null);
        }
        
        /// <remarks/>
        public void GetBusinessUnitsAsync(int itemId, int packageId, object userState) {
            if ((this.GetBusinessUnitsOperationCompleted == null)) {
                this.GetBusinessUnitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessUnitsOperationCompleted);
            }
            this.InvokeAsync("GetBusinessUnits", new object[] {
                        itemId,
                        packageId}, this.GetBusinessUnitsOperationCompleted, userState);
        }
        
        private void OnGetBusinessUnitsOperationCompleted(object arg) {
            if ((this.GetBusinessUnitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessUnitsCompleted(this, new GetBusinessUnitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCrmRoles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrmRolesResult GetCrmRoles(int itemId, int accountId, int packageId) {
            object[] results = this.Invoke("GetCrmRoles", new object[] {
                        itemId,
                        accountId,
                        packageId});
            return ((CrmRolesResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCrmRoles(int itemId, int accountId, int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCrmRoles", new object[] {
                        itemId,
                        accountId,
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CrmRolesResult EndGetCrmRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CrmRolesResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetCrmRolesAsync(int itemId, int accountId, int packageId) {
            this.GetCrmRolesAsync(itemId, accountId, packageId, null);
        }
        
        /// <remarks/>
        public void GetCrmRolesAsync(int itemId, int accountId, int packageId, object userState) {
            if ((this.GetCrmRolesOperationCompleted == null)) {
                this.GetCrmRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCrmRolesOperationCompleted);
            }
            this.InvokeAsync("GetCrmRoles", new object[] {
                        itemId,
                        accountId,
                        packageId}, this.GetCrmRolesOperationCompleted, userState);
        }
        
        private void OnGetCrmRolesOperationCompleted(object arg) {
            if ((this.GetCrmRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCrmRolesCompleted(this, new GetCrmRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetUserRoles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetUserRoles(int itemId, int accountId, int packageId, System.Guid[] roles) {
            object[] results = this.Invoke("SetUserRoles", new object[] {
                        itemId,
                        accountId,
                        packageId,
                        roles});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserRoles(int itemId, int accountId, int packageId, System.Guid[] roles, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserRoles", new object[] {
                        itemId,
                        accountId,
                        packageId,
                        roles}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetUserRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserRolesAsync(int itemId, int accountId, int packageId, System.Guid[] roles) {
            this.SetUserRolesAsync(itemId, accountId, packageId, roles, null);
        }
        
        /// <remarks/>
        public void SetUserRolesAsync(int itemId, int accountId, int packageId, System.Guid[] roles, object userState) {
            if ((this.SetUserRolesOperationCompleted == null)) {
                this.SetUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserRolesOperationCompleted);
            }
            this.InvokeAsync("SetUserRoles", new object[] {
                        itemId,
                        accountId,
                        packageId,
                        roles}, this.SetUserRolesOperationCompleted, userState);
        }
        
        private void OnSetUserRolesOperationCompleted(object arg) {
            if ((this.SetUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserRolesCompleted(this, new SetUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetUserCALType", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetUserCALType(int itemId, int accountId, int packageId, int CALType) {
            object[] results = this.Invoke("SetUserCALType", new object[] {
                        itemId,
                        accountId,
                        packageId,
                        CALType});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserCALType(int itemId, int accountId, int packageId, int CALType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserCALType", new object[] {
                        itemId,
                        accountId,
                        packageId,
                        CALType}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetUserCALType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserCALTypeAsync(int itemId, int accountId, int packageId, int CALType) {
            this.SetUserCALTypeAsync(itemId, accountId, packageId, CALType, null);
        }
        
        /// <remarks/>
        public void SetUserCALTypeAsync(int itemId, int accountId, int packageId, int CALType, object userState) {
            if ((this.SetUserCALTypeOperationCompleted == null)) {
                this.SetUserCALTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserCALTypeOperationCompleted);
            }
            this.InvokeAsync("SetUserCALType", new object[] {
                        itemId,
                        accountId,
                        packageId,
                        CALType}, this.SetUserCALTypeOperationCompleted, userState);
        }
        
        private void OnSetUserCALTypeOperationCompleted(object arg) {
            if ((this.SetUserCALTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserCALTypeCompleted(this, new SetUserCALTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangeUserState", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ChangeUserState(int itemId, int accountId, bool disable) {
            object[] results = this.Invoke("ChangeUserState", new object[] {
                        itemId,
                        accountId,
                        disable});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeUserState(int itemId, int accountId, bool disable, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeUserState", new object[] {
                        itemId,
                        accountId,
                        disable}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndChangeUserState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeUserStateAsync(int itemId, int accountId, bool disable) {
            this.ChangeUserStateAsync(itemId, accountId, disable, null);
        }
        
        /// <remarks/>
        public void ChangeUserStateAsync(int itemId, int accountId, bool disable, object userState) {
            if ((this.ChangeUserStateOperationCompleted == null)) {
                this.ChangeUserStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeUserStateOperationCompleted);
            }
            this.InvokeAsync("ChangeUserState", new object[] {
                        itemId,
                        accountId,
                        disable}, this.ChangeUserStateOperationCompleted, userState);
        }
        
        private void OnChangeUserStateOperationCompleted(object arg) {
            if ((this.ChangeUserStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeUserStateCompleted(this, new ChangeUserStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetCrmUser", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrmUserResult GetCrmUser(int itemId, int accountId) {
            object[] results = this.Invoke("GetCrmUser", new object[] {
                        itemId,
                        accountId});
            return ((CrmUserResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCrmUser(int itemId, int accountId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCrmUser", new object[] {
                        itemId,
                        accountId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CrmUserResult EndGetCrmUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CrmUserResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetCrmUserAsync(int itemId, int accountId) {
            this.GetCrmUserAsync(itemId, accountId, null);
        }
        
        /// <remarks/>
        public void GetCrmUserAsync(int itemId, int accountId, object userState) {
            if ((this.GetCrmUserOperationCompleted == null)) {
                this.GetCrmUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCrmUserOperationCompleted);
            }
            this.InvokeAsync("GetCrmUser", new object[] {
                        itemId,
                        accountId}, this.GetCrmUserOperationCompleted, userState);
        }
        
        private void OnGetCrmUserOperationCompleted(object arg) {
            if ((this.GetCrmUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCrmUserCompleted(this, new GetCrmUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetMaxDBSize", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetMaxDBSize(int itemId, int packageId, long maxSize) {
            object[] results = this.Invoke("SetMaxDBSize", new object[] {
                        itemId,
                        packageId,
                        maxSize});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetMaxDBSize(int itemId, int packageId, long maxSize, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetMaxDBSize", new object[] {
                        itemId,
                        packageId,
                        maxSize}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetMaxDBSize(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetMaxDBSizeAsync(int itemId, int packageId, long maxSize) {
            this.SetMaxDBSizeAsync(itemId, packageId, maxSize, null);
        }
        
        /// <remarks/>
        public void SetMaxDBSizeAsync(int itemId, int packageId, long maxSize, object userState) {
            if ((this.SetMaxDBSizeOperationCompleted == null)) {
                this.SetMaxDBSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMaxDBSizeOperationCompleted);
            }
            this.InvokeAsync("SetMaxDBSize", new object[] {
                        itemId,
                        packageId,
                        maxSize}, this.SetMaxDBSizeOperationCompleted, userState);
        }
        
        private void OnSetMaxDBSizeOperationCompleted(object arg) {
            if ((this.SetMaxDBSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMaxDBSizeCompleted(this, new SetMaxDBSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDBSize", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetDBSize(int itemId, int packageId) {
            object[] results = this.Invoke("GetDBSize", new object[] {
                        itemId,
                        packageId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDBSize(int itemId, int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDBSize", new object[] {
                        itemId,
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndGetDBSize(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBSizeAsync(int itemId, int packageId) {
            this.GetDBSizeAsync(itemId, packageId, null);
        }
        
        /// <remarks/>
        public void GetDBSizeAsync(int itemId, int packageId, object userState) {
            if ((this.GetDBSizeOperationCompleted == null)) {
                this.GetDBSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBSizeOperationCompleted);
            }
            this.InvokeAsync("GetDBSize", new object[] {
                        itemId,
                        packageId}, this.GetDBSizeOperationCompleted, userState);
        }
        
        private void OnGetDBSizeOperationCompleted(object arg) {
            if ((this.GetDBSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBSizeCompleted(this, new GetDBSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMaxDBSize", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetMaxDBSize(int itemId, int packageId) {
            object[] results = this.Invoke("GetMaxDBSize", new object[] {
                        itemId,
                        packageId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMaxDBSize(int itemId, int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMaxDBSize", new object[] {
                        itemId,
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndGetMaxDBSize(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxDBSizeAsync(int itemId, int packageId) {
            this.GetMaxDBSizeAsync(itemId, packageId, null);
        }
        
        /// <remarks/>
        public void GetMaxDBSizeAsync(int itemId, int packageId, object userState) {
            if ((this.GetMaxDBSizeOperationCompleted == null)) {
                this.GetMaxDBSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxDBSizeOperationCompleted);
            }
            this.InvokeAsync("GetMaxDBSize", new object[] {
                        itemId,
                        packageId}, this.GetMaxDBSizeOperationCompleted, userState);
        }
        
        private void OnGetMaxDBSizeOperationCompleted(object arg) {
            if ((this.GetMaxDBSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxDBSizeCompleted(this, new GetMaxDBSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetInstalledLanguagePacks", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetInstalledLanguagePacks(int packageId) {
            object[] results = this.Invoke("GetInstalledLanguagePacks", new object[] {
                        packageId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInstalledLanguagePacks(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInstalledLanguagePacks", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int[] EndGetInstalledLanguagePacks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInstalledLanguagePacksAsync(int packageId) {
            this.GetInstalledLanguagePacksAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetInstalledLanguagePacksAsync(int packageId, object userState) {
            if ((this.GetInstalledLanguagePacksOperationCompleted == null)) {
                this.GetInstalledLanguagePacksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstalledLanguagePacksOperationCompleted);
            }
            this.InvokeAsync("GetInstalledLanguagePacks", new object[] {
                        packageId}, this.GetInstalledLanguagePacksOperationCompleted, userState);
        }
        
        private void OnGetInstalledLanguagePacksOperationCompleted(object arg) {
            if ((this.GetInstalledLanguagePacksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstalledLanguagePacksCompleted(this, new GetInstalledLanguagePacksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetInstalledLanguagePacksByServiceId" +
            "", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetInstalledLanguagePacksByServiceId(int serviceId) {
            object[] results = this.Invoke("GetInstalledLanguagePacksByServiceId", new object[] {
                        serviceId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInstalledLanguagePacksByServiceId(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInstalledLanguagePacksByServiceId", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int[] EndGetInstalledLanguagePacksByServiceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInstalledLanguagePacksByServiceIdAsync(int serviceId) {
            this.GetInstalledLanguagePacksByServiceIdAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void GetInstalledLanguagePacksByServiceIdAsync(int serviceId, object userState) {
            if ((this.GetInstalledLanguagePacksByServiceIdOperationCompleted == null)) {
                this.GetInstalledLanguagePacksByServiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstalledLanguagePacksByServiceIdOperationCompleted);
            }
            this.InvokeAsync("GetInstalledLanguagePacksByServiceId", new object[] {
                        serviceId}, this.GetInstalledLanguagePacksByServiceIdOperationCompleted, userState);
        }
        
        private void OnGetInstalledLanguagePacksByServiceIdOperationCompleted(object arg) {
            if ((this.GetInstalledLanguagePacksByServiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstalledLanguagePacksByServiceIdCompleted(this, new GetInstalledLanguagePacksByServiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateOrganizationCompletedEventHandler(object sender, CreateOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCollationCompletedEventHandler(object sender, GetCollationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StringArrayResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StringArrayResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCollationByServiceIdCompletedEventHandler(object sender, GetCollationByServiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollationByServiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollationByServiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StringArrayResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StringArrayResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCurrencyCompletedEventHandler(object sender, GetCurrencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CurrencyArrayResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CurrencyArrayResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCurrencyByServiceIdCompletedEventHandler(object sender, GetCurrencyByServiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyByServiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyByServiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CurrencyArrayResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CurrencyArrayResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCRMOrganizationCompletedEventHandler(object sender, DeleteCRMOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCRMOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCRMOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCRMUsersPagedCompletedEventHandler(object sender, GetCRMUsersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCRMUsersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCRMUsersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUsersPagedResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUsersPagedResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCRMUserCountCompletedEventHandler(object sender, GetCRMUserCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCRMUserCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCRMUserCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateCRMUserCompletedEventHandler(object sender, CreateCRMUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCRMUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCRMUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBusinessUnitsCompletedEventHandler(object sender, GetBusinessUnitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessUnitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessUnitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRMBusinessUnitsResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRMBusinessUnitsResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCrmRolesCompletedEventHandler(object sender, GetCrmRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCrmRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCrmRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrmRolesResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrmRolesResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetUserRolesCompletedEventHandler(object sender, SetUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetUserCALTypeCompletedEventHandler(object sender, SetUserCALTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserCALTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserCALTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeUserStateCompletedEventHandler(object sender, ChangeUserStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeUserStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeUserStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCrmUserCompletedEventHandler(object sender, GetCrmUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCrmUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCrmUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrmUserResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrmUserResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetMaxDBSizeCompletedEventHandler(object sender, SetMaxDBSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetMaxDBSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetMaxDBSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDBSizeCompletedEventHandler(object sender, GetDBSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMaxDBSizeCompletedEventHandler(object sender, GetMaxDBSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxDBSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxDBSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetInstalledLanguagePacksCompletedEventHandler(object sender, GetInstalledLanguagePacksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstalledLanguagePacksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstalledLanguagePacksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetInstalledLanguagePacksByServiceIdCompletedEventHandler(object sender, GetInstalledLanguagePacksByServiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstalledLanguagePacksByServiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstalledLanguagePacksByServiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
}
