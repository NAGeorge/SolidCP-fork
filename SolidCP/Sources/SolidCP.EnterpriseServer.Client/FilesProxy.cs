// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

using SolidCP.Providers;
using SolidCP.Providers.OS;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.EnterpriseServer {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esFilesSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esFiles : Microsoft.Web.Services3.WebServicesClientProtocol {

        private System.Threading.SendOrPostCallback GetFileManagerSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback GetFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesByMaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileBinaryContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileBinaryContentUsingEncodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileBinaryContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileBinaryContentUsingEncodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileBinaryChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppendFileBinaryChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnzipFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZipFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZipRemoteFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAccessDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculatePackageDiskspaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilePermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFilePermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderGraphOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSyncActionsOperationCompleted;
        
        /// <remarks/>
        public esFiles() {
            this.Url = "http://localhost/EnterpriseServer/esFiles.asmx";
        }
        
        /// <remarks/>
        public event GetFileManagerSettingsCompletedEventHandler GetFileManagerSettingsCompleted;

        /// <remarks/>
        public event GetFilesCompletedEventHandler GetFilesCompleted;
        
        /// <remarks/>
        public event GetFilesByMaskCompletedEventHandler GetFilesByMaskCompleted;
        
        /// <remarks/>
        public event GetFileBinaryContentCompletedEventHandler GetFileBinaryContentCompleted;
        
        /// <remarks/>
        public event GetFileBinaryContentUsingEncodingCompletedEventHandler GetFileBinaryContentUsingEncodingCompleted;
        
        /// <remarks/>
        public event UpdateFileBinaryContentCompletedEventHandler UpdateFileBinaryContentCompleted;
        
        /// <remarks/>
        public event UpdateFileBinaryContentUsingEncodingCompletedEventHandler UpdateFileBinaryContentUsingEncodingCompleted;
        
        /// <remarks/>
        public event GetFileBinaryChunkCompletedEventHandler GetFileBinaryChunkCompleted;
        
        /// <remarks/>
        public event AppendFileBinaryChunkCompletedEventHandler AppendFileBinaryChunkCompleted;
        
        /// <remarks/>
        public event DeleteFilesCompletedEventHandler DeleteFilesCompleted;
        
        /// <remarks/>
        public event CreateFileCompletedEventHandler CreateFileCompleted;
        
        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;
        
        /// <remarks/>
        public event CopyFilesCompletedEventHandler CopyFilesCompleted;
        
        /// <remarks/>
        public event MoveFilesCompletedEventHandler MoveFilesCompleted;
        
        /// <remarks/>
        public event RenameFileCompletedEventHandler RenameFileCompleted;
        
        /// <remarks/>
        public event UnzipFilesCompletedEventHandler UnzipFilesCompleted;
        
        /// <remarks/>
        public event ZipFilesCompletedEventHandler ZipFilesCompleted;
        
        /// <remarks/>
        public event ZipRemoteFilesCompletedEventHandler ZipRemoteFilesCompleted;
        
        /// <remarks/>
        public event CreateAccessDatabaseCompletedEventHandler CreateAccessDatabaseCompleted;
        
        /// <remarks/>
        public event CalculatePackageDiskspaceCompletedEventHandler CalculatePackageDiskspaceCompleted;
        
        /// <remarks/>
        public event GetFilePermissionsCompletedEventHandler GetFilePermissionsCompleted;
        
        /// <remarks/>
        public event SetFilePermissionsCompletedEventHandler SetFilePermissionsCompleted;
        
        /// <remarks/>
        public event GetFolderGraphCompletedEventHandler GetFolderGraphCompleted;
        
        /// <remarks/>
        public event ExecuteSyncActionsCompletedEventHandler ExecuteSyncActionsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFileManagerSettings", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemSettings GetFileManagerSettings()
        {
            object[] results = this.Invoke("GetFileManagerSettings", new Object[] {});
            return ((SystemSettings)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetFileManagerSettings(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetFileManagerSettings", new Object[] {}, callback, asyncState);
        }

        /// <remarks/>
        public SystemSettings EndGetFileManagerSettings(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemSettings)(results[0]));
        }

        /// <remarks/>
        public void GetFileManagerSettingsAsync()
        {
            this.GetFileManagerSettingsAsync(null);
        }

        /// <remarks/>
        public void GetFileManagerSettingsAsync(object userState)
        {
            if ((this.GetFileManagerSettingsOperationCompleted == null))
            {
                this.GetFileManagerSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileManagerSettingsOperationCompleted);
            }
            this.InvokeAsync("GetFileManagerSettings", new Object[] {}, this.GetFileManagerSettingsOperationCompleted, userState);
        }

        private void OnGetFileManagerSettingsOperationCompleted(object arg)
        {
            if ((this.GetFileManagerSettingsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileManagerSettingsCompleted(this, new GetFileManagerSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetFiles(int packageId, string path, bool includeFiles) {
            object[] results = this.Invoke("GetFiles", new object[] {
                        packageId,
                        path,
                        includeFiles});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFiles(int packageId, string path, bool includeFiles, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFiles", new object[] {
                        packageId,
                        path,
                        includeFiles}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesAsync(int packageId, string path, bool includeFiles) {
            this.GetFilesAsync(packageId, path, includeFiles, null);
        }
        
        /// <remarks/>
        public void GetFilesAsync(int packageId, string path, bool includeFiles, object userState) {
            if ((this.GetFilesOperationCompleted == null)) {
                this.GetFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesOperationCompleted);
            }
            this.InvokeAsync("GetFiles", new object[] {
                        packageId,
                        path,
                        includeFiles}, this.GetFilesOperationCompleted, userState);
        }
        
        private void OnGetFilesOperationCompleted(object arg) {
            if ((this.GetFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesCompleted(this, new GetFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFilesByMask", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetFilesByMask(int packageId, string path, string filesMask) {
            object[] results = this.Invoke("GetFilesByMask", new object[] {
                        packageId,
                        path,
                        filesMask});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFilesByMask(int packageId, string path, string filesMask, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFilesByMask", new object[] {
                        packageId,
                        path,
                        filesMask}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetFilesByMask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesByMaskAsync(int packageId, string path, string filesMask) {
            this.GetFilesByMaskAsync(packageId, path, filesMask, null);
        }
        
        /// <remarks/>
        public void GetFilesByMaskAsync(int packageId, string path, string filesMask, object userState) {
            if ((this.GetFilesByMaskOperationCompleted == null)) {
                this.GetFilesByMaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesByMaskOperationCompleted);
            }
            this.InvokeAsync("GetFilesByMask", new object[] {
                        packageId,
                        path,
                        filesMask}, this.GetFilesByMaskOperationCompleted, userState);
        }
        
        private void OnGetFilesByMaskOperationCompleted(object arg) {
            if ((this.GetFilesByMaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesByMaskCompleted(this, new GetFilesByMaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFileBinaryContent", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileBinaryContent(int packageId, string path) {
            object[] results = this.Invoke("GetFileBinaryContent", new object[] {
                        packageId,
                        path});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileBinaryContent(int packageId, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileBinaryContent", new object[] {
                        packageId,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetFileBinaryContent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileBinaryContentAsync(int packageId, string path) {
            this.GetFileBinaryContentAsync(packageId, path, null);
        }
        
        /// <remarks/>
        public void GetFileBinaryContentAsync(int packageId, string path, object userState) {
            if ((this.GetFileBinaryContentOperationCompleted == null)) {
                this.GetFileBinaryContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileBinaryContentOperationCompleted);
            }
            this.InvokeAsync("GetFileBinaryContent", new object[] {
                        packageId,
                        path}, this.GetFileBinaryContentOperationCompleted, userState);
        }
        
        private void OnGetFileBinaryContentOperationCompleted(object arg) {
            if ((this.GetFileBinaryContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileBinaryContentCompleted(this, new GetFileBinaryContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFileBinaryContentUsingEncoding", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileBinaryContentUsingEncoding(int packageId, string path, string encoding) {
            object[] results = this.Invoke("GetFileBinaryContentUsingEncoding", new object[] {
                        packageId,
                        path,
                        encoding});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileBinaryContentUsingEncoding(int packageId, string path, string encoding, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileBinaryContentUsingEncoding", new object[] {
                        packageId,
                        path,
                        encoding}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetFileBinaryContentUsingEncoding(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileBinaryContentUsingEncodingAsync(int packageId, string path, string encoding) {
            this.GetFileBinaryContentUsingEncodingAsync(packageId, path, encoding, null);
        }
        
        /// <remarks/>
        public void GetFileBinaryContentUsingEncodingAsync(int packageId, string path, string encoding, object userState) {
            if ((this.GetFileBinaryContentUsingEncodingOperationCompleted == null)) {
                this.GetFileBinaryContentUsingEncodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileBinaryContentUsingEncodingOperationCompleted);
            }
            this.InvokeAsync("GetFileBinaryContentUsingEncoding", new object[] {
                        packageId,
                        path,
                        encoding}, this.GetFileBinaryContentUsingEncodingOperationCompleted, userState);
        }
        
        private void OnGetFileBinaryContentUsingEncodingOperationCompleted(object arg) {
            if ((this.GetFileBinaryContentUsingEncodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileBinaryContentUsingEncodingCompleted(this, new GetFileBinaryContentUsingEncodingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateFileBinaryContent", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateFileBinaryContent(int packageId, string path, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content) {
            object[] results = this.Invoke("UpdateFileBinaryContent", new object[] {
                        packageId,
                        path,
                        content});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateFileBinaryContent(int packageId, string path, byte[] content, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateFileBinaryContent", new object[] {
                        packageId,
                        path,
                        content}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateFileBinaryContent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileBinaryContentAsync(int packageId, string path, byte[] content) {
            this.UpdateFileBinaryContentAsync(packageId, path, content, null);
        }
        
        /// <remarks/>
        public void UpdateFileBinaryContentAsync(int packageId, string path, byte[] content, object userState) {
            if ((this.UpdateFileBinaryContentOperationCompleted == null)) {
                this.UpdateFileBinaryContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileBinaryContentOperationCompleted);
            }
            this.InvokeAsync("UpdateFileBinaryContent", new object[] {
                        packageId,
                        path,
                        content}, this.UpdateFileBinaryContentOperationCompleted, userState);
        }
        
        private void OnUpdateFileBinaryContentOperationCompleted(object arg) {
            if ((this.UpdateFileBinaryContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileBinaryContentCompleted(this, new UpdateFileBinaryContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateFileBinaryContentUsingEncodi" +
            "ng", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateFileBinaryContentUsingEncoding(int packageId, string path, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string encoding) {
            object[] results = this.Invoke("UpdateFileBinaryContentUsingEncoding", new object[] {
                        packageId,
                        path,
                        content,
                        encoding});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateFileBinaryContentUsingEncoding(int packageId, string path, byte[] content, string encoding, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateFileBinaryContentUsingEncoding", new object[] {
                        packageId,
                        path,
                        content,
                        encoding}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateFileBinaryContentUsingEncoding(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileBinaryContentUsingEncodingAsync(int packageId, string path, byte[] content, string encoding) {
            this.UpdateFileBinaryContentUsingEncodingAsync(packageId, path, content, encoding, null);
        }
        
        /// <remarks/>
        public void UpdateFileBinaryContentUsingEncodingAsync(int packageId, string path, byte[] content, string encoding, object userState) {
            if ((this.UpdateFileBinaryContentUsingEncodingOperationCompleted == null)) {
                this.UpdateFileBinaryContentUsingEncodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileBinaryContentUsingEncodingOperationCompleted);
            }
            this.InvokeAsync("UpdateFileBinaryContentUsingEncoding", new object[] {
                        packageId,
                        path,
                        content,
                        encoding}, this.UpdateFileBinaryContentUsingEncodingOperationCompleted, userState);
        }
        
        private void OnUpdateFileBinaryContentUsingEncodingOperationCompleted(object arg) {
            if ((this.UpdateFileBinaryContentUsingEncodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileBinaryContentUsingEncodingCompleted(this, new UpdateFileBinaryContentUsingEncodingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFileBinaryChunk", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileBinaryChunk(int packageId, string path, int offset, int length) {
            object[] results = this.Invoke("GetFileBinaryChunk", new object[] {
                        packageId,
                        path,
                        offset,
                        length});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileBinaryChunk(int packageId, string path, int offset, int length, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileBinaryChunk", new object[] {
                        packageId,
                        path,
                        offset,
                        length}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetFileBinaryChunk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileBinaryChunkAsync(int packageId, string path, int offset, int length) {
            this.GetFileBinaryChunkAsync(packageId, path, offset, length, null);
        }
        
        /// <remarks/>
        public void GetFileBinaryChunkAsync(int packageId, string path, int offset, int length, object userState) {
            if ((this.GetFileBinaryChunkOperationCompleted == null)) {
                this.GetFileBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileBinaryChunkOperationCompleted);
            }
            this.InvokeAsync("GetFileBinaryChunk", new object[] {
                        packageId,
                        path,
                        offset,
                        length}, this.GetFileBinaryChunkOperationCompleted, userState);
        }
        
        private void OnGetFileBinaryChunkOperationCompleted(object arg) {
            if ((this.GetFileBinaryChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileBinaryChunkCompleted(this, new GetFileBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AppendFileBinaryChunk", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AppendFileBinaryChunk(int packageId, string path, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] chunk) {
            object[] results = this.Invoke("AppendFileBinaryChunk", new object[] {
                        packageId,
                        path,
                        chunk});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppendFileBinaryChunk(int packageId, string path, byte[] chunk, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppendFileBinaryChunk", new object[] {
                        packageId,
                        path,
                        chunk}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAppendFileBinaryChunk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AppendFileBinaryChunkAsync(int packageId, string path, byte[] chunk) {
            this.AppendFileBinaryChunkAsync(packageId, path, chunk, null);
        }
        
        /// <remarks/>
        public void AppendFileBinaryChunkAsync(int packageId, string path, byte[] chunk, object userState) {
            if ((this.AppendFileBinaryChunkOperationCompleted == null)) {
                this.AppendFileBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendFileBinaryChunkOperationCompleted);
            }
            this.InvokeAsync("AppendFileBinaryChunk", new object[] {
                        packageId,
                        path,
                        chunk}, this.AppendFileBinaryChunkOperationCompleted, userState);
        }
        
        private void OnAppendFileBinaryChunkOperationCompleted(object arg) {
            if ((this.AppendFileBinaryChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppendFileBinaryChunkCompleted(this, new AppendFileBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteFiles(int packageId, string[] files) {
            object[] results = this.Invoke("DeleteFiles", new object[] {
                        packageId,
                        files});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteFiles(int packageId, string[] files, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteFiles", new object[] {
                        packageId,
                        files}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFilesAsync(int packageId, string[] files) {
            this.DeleteFilesAsync(packageId, files, null);
        }
        
        /// <remarks/>
        public void DeleteFilesAsync(int packageId, string[] files, object userState) {
            if ((this.DeleteFilesOperationCompleted == null)) {
                this.DeleteFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFilesOperationCompleted);
            }
            this.InvokeAsync("DeleteFiles", new object[] {
                        packageId,
                        files}, this.DeleteFilesOperationCompleted, userState);
        }
        
        private void OnDeleteFilesOperationCompleted(object arg) {
            if ((this.DeleteFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFilesCompleted(this, new DeleteFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateFile", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateFile(int packageId, string path) {
            object[] results = this.Invoke("CreateFile", new object[] {
                        packageId,
                        path});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateFile(int packageId, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateFile", new object[] {
                        packageId,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFileAsync(int packageId, string path) {
            this.CreateFileAsync(packageId, path, null);
        }
        
        /// <remarks/>
        public void CreateFileAsync(int packageId, string path, object userState) {
            if ((this.CreateFileOperationCompleted == null)) {
                this.CreateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFileOperationCompleted);
            }
            this.InvokeAsync("CreateFile", new object[] {
                        packageId,
                        path}, this.CreateFileOperationCompleted, userState);
        }
        
        private void OnCreateFileOperationCompleted(object arg) {
            if ((this.CreateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFileCompleted(this, new CreateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateFolder", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateFolder(int packageId, string path) {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        packageId,
                        path});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateFolder(int packageId, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateFolder", new object[] {
                        packageId,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFolderAsync(int packageId, string path) {
            this.CreateFolderAsync(packageId, path, null);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(int packageId, string path, object userState) {
            if ((this.CreateFolderOperationCompleted == null)) {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        packageId,
                        path}, this.CreateFolderOperationCompleted, userState);
        }
        
        private void OnCreateFolderOperationCompleted(object arg) {
            if ((this.CreateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CopyFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CopyFiles(int packageId, string[] files, string destFolder) {
            object[] results = this.Invoke("CopyFiles", new object[] {
                        packageId,
                        files,
                        destFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCopyFiles(int packageId, string[] files, string destFolder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CopyFiles", new object[] {
                        packageId,
                        files,
                        destFolder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCopyFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CopyFilesAsync(int packageId, string[] files, string destFolder) {
            this.CopyFilesAsync(packageId, files, destFolder, null);
        }
        
        /// <remarks/>
        public void CopyFilesAsync(int packageId, string[] files, string destFolder, object userState) {
            if ((this.CopyFilesOperationCompleted == null)) {
                this.CopyFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyFilesOperationCompleted);
            }
            this.InvokeAsync("CopyFiles", new object[] {
                        packageId,
                        files,
                        destFolder}, this.CopyFilesOperationCompleted, userState);
        }
        
        private void OnCopyFilesOperationCompleted(object arg) {
            if ((this.CopyFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyFilesCompleted(this, new CopyFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/MoveFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MoveFiles(int packageId, string[] files, string destFolder) {
            object[] results = this.Invoke("MoveFiles", new object[] {
                        packageId,
                        files,
                        destFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveFiles(int packageId, string[] files, string destFolder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveFiles", new object[] {
                        packageId,
                        files,
                        destFolder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndMoveFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MoveFilesAsync(int packageId, string[] files, string destFolder) {
            this.MoveFilesAsync(packageId, files, destFolder, null);
        }
        
        /// <remarks/>
        public void MoveFilesAsync(int packageId, string[] files, string destFolder, object userState) {
            if ((this.MoveFilesOperationCompleted == null)) {
                this.MoveFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveFilesOperationCompleted);
            }
            this.InvokeAsync("MoveFiles", new object[] {
                        packageId,
                        files,
                        destFolder}, this.MoveFilesOperationCompleted, userState);
        }
        
        private void OnMoveFilesOperationCompleted(object arg) {
            if ((this.MoveFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveFilesCompleted(this, new MoveFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RenameFile", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RenameFile(int packageId, string oldPath, string newPath) {
            object[] results = this.Invoke("RenameFile", new object[] {
                        packageId,
                        oldPath,
                        newPath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameFile(int packageId, string oldPath, string newPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameFile", new object[] {
                        packageId,
                        oldPath,
                        newPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRenameFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RenameFileAsync(int packageId, string oldPath, string newPath) {
            this.RenameFileAsync(packageId, oldPath, newPath, null);
        }
        
        /// <remarks/>
        public void RenameFileAsync(int packageId, string oldPath, string newPath, object userState) {
            if ((this.RenameFileOperationCompleted == null)) {
                this.RenameFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameFileOperationCompleted);
            }
            this.InvokeAsync("RenameFile", new object[] {
                        packageId,
                        oldPath,
                        newPath}, this.RenameFileOperationCompleted, userState);
        }
        
        private void OnRenameFileOperationCompleted(object arg) {
            if ((this.RenameFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameFileCompleted(this, new RenameFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UnzipFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnzipFiles(int packageId, string[] files) {
            this.Invoke("UnzipFiles", new object[] {
                        packageId,
                        files});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnzipFiles(int packageId, string[] files, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnzipFiles", new object[] {
                        packageId,
                        files}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnzipFiles(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnzipFilesAsync(int packageId, string[] files) {
            this.UnzipFilesAsync(packageId, files, null);
        }
        
        /// <remarks/>
        public void UnzipFilesAsync(int packageId, string[] files, object userState) {
            if ((this.UnzipFilesOperationCompleted == null)) {
                this.UnzipFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnzipFilesOperationCompleted);
            }
            this.InvokeAsync("UnzipFiles", new object[] {
                        packageId,
                        files}, this.UnzipFilesOperationCompleted, userState);
        }
        
        private void OnUnzipFilesOperationCompleted(object arg) {
            if ((this.UnzipFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnzipFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ZipFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ZipFiles(int packageId, string[] files, string archivePath) {
            object[] results = this.Invoke("ZipFiles", new object[] {
                        packageId,
                        files,
                        archivePath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginZipFiles(int packageId, string[] files, string archivePath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ZipFiles", new object[] {
                        packageId,
                        files,
                        archivePath}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndZipFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ZipFilesAsync(int packageId, string[] files, string archivePath) {
            this.ZipFilesAsync(packageId, files, archivePath, null);
        }
        
        /// <remarks/>
        public void ZipFilesAsync(int packageId, string[] files, string archivePath, object userState) {
            if ((this.ZipFilesOperationCompleted == null)) {
                this.ZipFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZipFilesOperationCompleted);
            }
            this.InvokeAsync("ZipFiles", new object[] {
                        packageId,
                        files,
                        archivePath}, this.ZipFilesOperationCompleted, userState);
        }
        
        private void OnZipFilesOperationCompleted(object arg) {
            if ((this.ZipFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZipFilesCompleted(this, new ZipFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ZipRemoteFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ZipRemoteFiles(int packageId, string rootFolder, string[] files, string archivePath) {
            object[] results = this.Invoke("ZipRemoteFiles", new object[] {
                        packageId,
                        rootFolder,
                        files,
                        archivePath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginZipRemoteFiles(int packageId, string rootFolder, string[] files, string archivePath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ZipRemoteFiles", new object[] {
                        packageId,
                        rootFolder,
                        files,
                        archivePath}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndZipRemoteFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ZipRemoteFilesAsync(int packageId, string rootFolder, string[] files, string archivePath) {
            this.ZipRemoteFilesAsync(packageId, rootFolder, files, archivePath, null);
        }
        
        /// <remarks/>
        public void ZipRemoteFilesAsync(int packageId, string rootFolder, string[] files, string archivePath, object userState) {
            if ((this.ZipRemoteFilesOperationCompleted == null)) {
                this.ZipRemoteFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZipRemoteFilesOperationCompleted);
            }
            this.InvokeAsync("ZipRemoteFiles", new object[] {
                        packageId,
                        rootFolder,
                        files,
                        archivePath}, this.ZipRemoteFilesOperationCompleted, userState);
        }
        
        private void OnZipRemoteFilesOperationCompleted(object arg) {
            if ((this.ZipRemoteFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZipRemoteFilesCompleted(this, new ZipRemoteFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateAccessDatabase", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateAccessDatabase(int packageId, string dbPath) {
            object[] results = this.Invoke("CreateAccessDatabase", new object[] {
                        packageId,
                        dbPath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateAccessDatabase(int packageId, string dbPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateAccessDatabase", new object[] {
                        packageId,
                        dbPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateAccessDatabase(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAccessDatabaseAsync(int packageId, string dbPath) {
            this.CreateAccessDatabaseAsync(packageId, dbPath, null);
        }
        
        /// <remarks/>
        public void CreateAccessDatabaseAsync(int packageId, string dbPath, object userState) {
            if ((this.CreateAccessDatabaseOperationCompleted == null)) {
                this.CreateAccessDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAccessDatabaseOperationCompleted);
            }
            this.InvokeAsync("CreateAccessDatabase", new object[] {
                        packageId,
                        dbPath}, this.CreateAccessDatabaseOperationCompleted, userState);
        }
        
        private void OnCreateAccessDatabaseOperationCompleted(object arg) {
            if ((this.CreateAccessDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAccessDatabaseCompleted(this, new CreateAccessDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CalculatePackageDiskspace", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CalculatePackageDiskspace(int packageId) {
            object[] results = this.Invoke("CalculatePackageDiskspace", new object[] {
                        packageId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCalculatePackageDiskspace(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CalculatePackageDiskspace", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCalculatePackageDiskspace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CalculatePackageDiskspaceAsync(int packageId) {
            this.CalculatePackageDiskspaceAsync(packageId, null);
        }
        
        /// <remarks/>
        public void CalculatePackageDiskspaceAsync(int packageId, object userState) {
            if ((this.CalculatePackageDiskspaceOperationCompleted == null)) {
                this.CalculatePackageDiskspaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculatePackageDiskspaceOperationCompleted);
            }
            this.InvokeAsync("CalculatePackageDiskspace", new object[] {
                        packageId}, this.CalculatePackageDiskspaceOperationCompleted, userState);
        }
        
        private void OnCalculatePackageDiskspaceOperationCompleted(object arg) {
            if ((this.CalculatePackageDiskspaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculatePackageDiskspaceCompleted(this, new CalculatePackageDiskspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFilePermissions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserPermission[] GetFilePermissions(int packageId, string path) {
            object[] results = this.Invoke("GetFilePermissions", new object[] {
                        packageId,
                        path});
            return ((UserPermission[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFilePermissions(int packageId, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFilePermissions", new object[] {
                        packageId,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserPermission[] EndGetFilePermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserPermission[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilePermissionsAsync(int packageId, string path) {
            this.GetFilePermissionsAsync(packageId, path, null);
        }
        
        /// <remarks/>
        public void GetFilePermissionsAsync(int packageId, string path, object userState) {
            if ((this.GetFilePermissionsOperationCompleted == null)) {
                this.GetFilePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilePermissionsOperationCompleted);
            }
            this.InvokeAsync("GetFilePermissions", new object[] {
                        packageId,
                        path}, this.GetFilePermissionsOperationCompleted, userState);
        }
        
        private void OnGetFilePermissionsOperationCompleted(object arg) {
            if ((this.GetFilePermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilePermissionsCompleted(this, new GetFilePermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetFilePermissions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetFilePermissions(int packageId, string path, UserPermission[] users, bool resetChildPermissions) {
            object[] results = this.Invoke("SetFilePermissions", new object[] {
                        packageId,
                        path,
                        users,
                        resetChildPermissions});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetFilePermissions(int packageId, string path, UserPermission[] users, bool resetChildPermissions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetFilePermissions", new object[] {
                        packageId,
                        path,
                        users,
                        resetChildPermissions}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSetFilePermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetFilePermissionsAsync(int packageId, string path, UserPermission[] users, bool resetChildPermissions) {
            this.SetFilePermissionsAsync(packageId, path, users, resetChildPermissions, null);
        }
        
        /// <remarks/>
        public void SetFilePermissionsAsync(int packageId, string path, UserPermission[] users, bool resetChildPermissions, object userState) {
            if ((this.SetFilePermissionsOperationCompleted == null)) {
                this.SetFilePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFilePermissionsOperationCompleted);
            }
            this.InvokeAsync("SetFilePermissions", new object[] {
                        packageId,
                        path,
                        users,
                        resetChildPermissions}, this.SetFilePermissionsOperationCompleted, userState);
        }
        
        private void OnSetFilePermissionsOperationCompleted(object arg) {
            if ((this.SetFilePermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFilePermissionsCompleted(this, new SetFilePermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFolderGraph", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FolderGraph GetFolderGraph(int packageId, string path) {
            object[] results = this.Invoke("GetFolderGraph", new object[] {
                        packageId,
                        path});
            return ((FolderGraph)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFolderGraph(int packageId, string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFolderGraph", new object[] {
                        packageId,
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public FolderGraph EndGetFolderGraph(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FolderGraph)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderGraphAsync(int packageId, string path) {
            this.GetFolderGraphAsync(packageId, path, null);
        }
        
        /// <remarks/>
        public void GetFolderGraphAsync(int packageId, string path, object userState) {
            if ((this.GetFolderGraphOperationCompleted == null)) {
                this.GetFolderGraphOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderGraphOperationCompleted);
            }
            this.InvokeAsync("GetFolderGraph", new object[] {
                        packageId,
                        path}, this.GetFolderGraphOperationCompleted, userState);
        }
        
        private void OnGetFolderGraphOperationCompleted(object arg) {
            if ((this.GetFolderGraphCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderGraphCompleted(this, new GetFolderGraphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ExecuteSyncActions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteSyncActions(int packageId, FileSyncAction[] actions) {
            this.Invoke("ExecuteSyncActions", new object[] {
                        packageId,
                        actions});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteSyncActions(int packageId, FileSyncAction[] actions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSyncActions", new object[] {
                        packageId,
                        actions}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteSyncActions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExecuteSyncActionsAsync(int packageId, FileSyncAction[] actions) {
            this.ExecuteSyncActionsAsync(packageId, actions, null);
        }
        
        /// <remarks/>
        public void ExecuteSyncActionsAsync(int packageId, FileSyncAction[] actions, object userState) {
            if ((this.ExecuteSyncActionsOperationCompleted == null)) {
                this.ExecuteSyncActionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSyncActionsOperationCompleted);
            }
            this.InvokeAsync("ExecuteSyncActions", new object[] {
                        packageId,
                        actions}, this.ExecuteSyncActionsOperationCompleted, userState);
        }
        
        private void OnExecuteSyncActionsOperationCompleted(object arg) {
            if ((this.ExecuteSyncActionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSyncActionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        //CO Changes       
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ApplyEnableHardQuotaFeature", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ApplyEnableHardQuotaFeature(int packageId)
        {
            object[] results = this.Invoke("ApplyEnableHardQuotaFeature", new object[] {
                        packageId });
            return ((int)(results[0]));
        }
        //END
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    
    
    
    
    public delegate void GetFileManagerSettingsCompletedEventHandler(object sender, GetFileManagerSettingsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileManagerSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFileManagerSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SystemSettings Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SystemSettings)(this.results[0]));
            }
        }
    }
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFilesCompletedEventHandler(object sender, GetFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFilesByMaskCompletedEventHandler(object sender, GetFilesByMaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesByMaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesByMaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFileBinaryContentCompletedEventHandler(object sender, GetFileBinaryContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileBinaryContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileBinaryContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFileBinaryContentUsingEncodingCompletedEventHandler(object sender, GetFileBinaryContentUsingEncodingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileBinaryContentUsingEncodingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileBinaryContentUsingEncodingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateFileBinaryContentCompletedEventHandler(object sender, UpdateFileBinaryContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileBinaryContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileBinaryContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateFileBinaryContentUsingEncodingCompletedEventHandler(object sender, UpdateFileBinaryContentUsingEncodingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileBinaryContentUsingEncodingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileBinaryContentUsingEncodingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFileBinaryChunkCompletedEventHandler(object sender, GetFileBinaryChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AppendFileBinaryChunkCompletedEventHandler(object sender, AppendFileBinaryChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppendFileBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppendFileBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteFilesCompletedEventHandler(object sender, DeleteFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateFileCompletedEventHandler(object sender, CreateFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CopyFilesCompletedEventHandler(object sender, CopyFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MoveFilesCompletedEventHandler(object sender, MoveFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RenameFileCompletedEventHandler(object sender, RenameFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnzipFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ZipFilesCompletedEventHandler(object sender, ZipFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZipFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZipFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ZipRemoteFilesCompletedEventHandler(object sender, ZipRemoteFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZipRemoteFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZipRemoteFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateAccessDatabaseCompletedEventHandler(object sender, CreateAccessDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAccessDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAccessDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CalculatePackageDiskspaceCompletedEventHandler(object sender, CalculatePackageDiskspaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculatePackageDiskspaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculatePackageDiskspaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFilePermissionsCompletedEventHandler(object sender, GetFilePermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserPermission[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserPermission[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetFilePermissionsCompletedEventHandler(object sender, SetFilePermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFilePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFilePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFolderGraphCompletedEventHandler(object sender, GetFolderGraphCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FolderGraph Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FolderGraph)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ExecuteSyncActionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
