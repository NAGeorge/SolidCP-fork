// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.EnterpriseServer
{
	using System.Diagnostics;
	using System.Web.Services;
	using System.ComponentModel;
	using System.Web.Services.Protocols;
	using System;
	using System.Xml.Serialization;
	using System.Data;

	using SolidCP.Providers;
	using SolidCP.Providers.Database;

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "esDatabaseServersSoap", Namespace = "http://smbsaas/solidcp/enterpriseserver")]
	[System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
	public partial class esDatabaseServers : Microsoft.Web.Services3.WebServicesClientProtocol
	{

		private System.Threading.SendOrPostCallback GetRawSqlDatabasesPagedOperationCompleted;

		private System.Threading.SendOrPostCallback GetSqlDatabasesOperationCompleted;

		private System.Threading.SendOrPostCallback GetSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback AddSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback BackupSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback GetSqlBackupBinaryChunkOperationCompleted;

		private System.Threading.SendOrPostCallback AppendSqlBackupBinaryChunkOperationCompleted;

		private System.Threading.SendOrPostCallback RestoreSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback TruncateSqlDatabaseOperationCompleted;

		private System.Threading.SendOrPostCallback GetDatabaseBrowserConfigurationOperationCompleted;

		private System.Threading.SendOrPostCallback GetDatabaseBrowserLogonScriptOperationCompleted;

		private System.Threading.SendOrPostCallback GetRawSqlUsersPagedOperationCompleted;

		private System.Threading.SendOrPostCallback GetSqlUsersOperationCompleted;

		private System.Threading.SendOrPostCallback GetSqlUserOperationCompleted;

		private System.Threading.SendOrPostCallback AddSqlUserOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateSqlUserOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteSqlUserOperationCompleted;

		/// <remarks/>
		public esDatabaseServers()
		{
			this.Url = "http://localhost/EnterpriseServer/esDatabaseServers.asmx";
		}

		/// <remarks/>
		public event GetRawSqlDatabasesPagedCompletedEventHandler GetRawSqlDatabasesPagedCompleted;

		/// <remarks/>
		public event GetSqlDatabasesCompletedEventHandler GetSqlDatabasesCompleted;

		/// <remarks/>
		public event GetSqlDatabaseCompletedEventHandler GetSqlDatabaseCompleted;

		/// <remarks/>
		public event AddSqlDatabaseCompletedEventHandler AddSqlDatabaseCompleted;

		/// <remarks/>
		public event UpdateSqlDatabaseCompletedEventHandler UpdateSqlDatabaseCompleted;

		/// <remarks/>
		public event DeleteSqlDatabaseCompletedEventHandler DeleteSqlDatabaseCompleted;

		/// <remarks/>
		public event BackupSqlDatabaseCompletedEventHandler BackupSqlDatabaseCompleted;

		/// <remarks/>
		public event GetSqlBackupBinaryChunkCompletedEventHandler GetSqlBackupBinaryChunkCompleted;

		/// <remarks/>
		public event AppendSqlBackupBinaryChunkCompletedEventHandler AppendSqlBackupBinaryChunkCompleted;

		/// <remarks/>
		public event RestoreSqlDatabaseCompletedEventHandler RestoreSqlDatabaseCompleted;

		/// <remarks/>
		public event TruncateSqlDatabaseCompletedEventHandler TruncateSqlDatabaseCompleted;

		/// <remarks/>
		public event GetDatabaseBrowserConfigurationCompletedEventHandler GetDatabaseBrowserConfigurationCompleted;

		/// <remarks/>
		public event GetDatabaseBrowserLogonScriptCompletedEventHandler GetDatabaseBrowserLogonScriptCompleted;

		/// <remarks/>
		public event GetRawSqlUsersPagedCompletedEventHandler GetRawSqlUsersPagedCompleted;

		/// <remarks/>
		public event GetSqlUsersCompletedEventHandler GetSqlUsersCompleted;

		/// <remarks/>
		public event GetSqlUserCompletedEventHandler GetSqlUserCompleted;

		/// <remarks/>
		public event AddSqlUserCompletedEventHandler AddSqlUserCompleted;

		/// <remarks/>
		public event UpdateSqlUserCompletedEventHandler UpdateSqlUserCompleted;

		/// <remarks/>
		public event DeleteSqlUserCompletedEventHandler DeleteSqlUserCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawSqlDatabasesPaged", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.Data.DataSet GetRawSqlDatabasesPaged(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
		{
			object[] results = this.Invoke("GetRawSqlDatabasesPaged", new object[] {
                        packageId,
                        groupName,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRawSqlDatabasesPaged(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRawSqlDatabasesPaged", new object[] {
                        packageId,
                        groupName,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
		}

		/// <remarks/>
		public System.Data.DataSet EndGetRawSqlDatabasesPaged(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public void GetRawSqlDatabasesPagedAsync(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
		{
			this.GetRawSqlDatabasesPagedAsync(packageId, groupName, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
		}

		/// <remarks/>
		public void GetRawSqlDatabasesPagedAsync(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState)
		{
			if ((this.GetRawSqlDatabasesPagedOperationCompleted == null))
			{
				this.GetRawSqlDatabasesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawSqlDatabasesPagedOperationCompleted);
			}
			this.InvokeAsync("GetRawSqlDatabasesPaged", new object[] {
                        packageId,
                        groupName,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawSqlDatabasesPagedOperationCompleted, userState);
		}

		private void OnGetRawSqlDatabasesPagedOperationCompleted(object arg)
		{
			if ((this.GetRawSqlDatabasesPagedCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRawSqlDatabasesPagedCompleted(this, new GetRawSqlDatabasesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSqlDatabases", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SqlDatabase[] GetSqlDatabases(int packageId, string groupName, bool recursive)
		{
			object[] results = this.Invoke("GetSqlDatabases", new object[] {
                        packageId,
                        groupName,
                        recursive});
			return ((SqlDatabase[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSqlDatabases(int packageId, string groupName, bool recursive, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSqlDatabases", new object[] {
                        packageId,
                        groupName,
                        recursive}, callback, asyncState);
		}

		/// <remarks/>
		public SqlDatabase[] EndGetSqlDatabases(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SqlDatabase[])(results[0]));
		}

		/// <remarks/>
		public void GetSqlDatabasesAsync(int packageId, string groupName, bool recursive)
		{
			this.GetSqlDatabasesAsync(packageId, groupName, recursive, null);
		}

		/// <remarks/>
		public void GetSqlDatabasesAsync(int packageId, string groupName, bool recursive, object userState)
		{
			if ((this.GetSqlDatabasesOperationCompleted == null))
			{
				this.GetSqlDatabasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlDatabasesOperationCompleted);
			}
			this.InvokeAsync("GetSqlDatabases", new object[] {
                        packageId,
                        groupName,
                        recursive}, this.GetSqlDatabasesOperationCompleted, userState);
		}

		private void OnGetSqlDatabasesOperationCompleted(object arg)
		{
			if ((this.GetSqlDatabasesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSqlDatabasesCompleted(this, new GetSqlDatabasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SqlDatabase GetSqlDatabase(int itemId)
		{
			object[] results = this.Invoke("GetSqlDatabase", new object[] {
                        itemId});
			return ((SqlDatabase)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSqlDatabase(int itemId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSqlDatabase", new object[] {
                        itemId}, callback, asyncState);
		}

		/// <remarks/>
		public SqlDatabase EndGetSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SqlDatabase)(results[0]));
		}

		/// <remarks/>
		public void GetSqlDatabaseAsync(int itemId)
		{
			this.GetSqlDatabaseAsync(itemId, null);
		}

		/// <remarks/>
		public void GetSqlDatabaseAsync(int itemId, object userState)
		{
			if ((this.GetSqlDatabaseOperationCompleted == null))
			{
				this.GetSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("GetSqlDatabase", new object[] {
                        itemId}, this.GetSqlDatabaseOperationCompleted, userState);
		}

		private void OnGetSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.GetSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSqlDatabaseCompleted(this, new GetSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int AddSqlDatabase(SqlDatabase item, string groupName)
		{
			object[] results = this.Invoke("AddSqlDatabase", new object[] {
                        item,
                        groupName});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSqlDatabase(SqlDatabase item, string groupName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSqlDatabase", new object[] {
                        item,
                        groupName}, callback, asyncState);
		}

		/// <remarks/>
		public int EndAddSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void AddSqlDatabaseAsync(SqlDatabase item, string groupName)
		{
			this.AddSqlDatabaseAsync(item, groupName, null);
		}

		/// <remarks/>
		public void AddSqlDatabaseAsync(SqlDatabase item, string groupName, object userState)
		{
			if ((this.AddSqlDatabaseOperationCompleted == null))
			{
				this.AddSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("AddSqlDatabase", new object[] {
                        item,
                        groupName}, this.AddSqlDatabaseOperationCompleted, userState);
		}

		private void OnAddSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.AddSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSqlDatabaseCompleted(this, new AddSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int UpdateSqlDatabase(SqlDatabase item)
		{
			object[] results = this.Invoke("UpdateSqlDatabase", new object[] {
                        item});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateSqlDatabase(SqlDatabase item, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateSqlDatabase", new object[] {
                        item}, callback, asyncState);
		}

		/// <remarks/>
		public int EndUpdateSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void UpdateSqlDatabaseAsync(SqlDatabase item)
		{
			this.UpdateSqlDatabaseAsync(item, null);
		}

		/// <remarks/>
		public void UpdateSqlDatabaseAsync(SqlDatabase item, object userState)
		{
			if ((this.UpdateSqlDatabaseOperationCompleted == null))
			{
				this.UpdateSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("UpdateSqlDatabase", new object[] {
                        item}, this.UpdateSqlDatabaseOperationCompleted, userState);
		}

		private void OnUpdateSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.UpdateSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateSqlDatabaseCompleted(this, new UpdateSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int DeleteSqlDatabase(int itemId)
		{
			object[] results = this.Invoke("DeleteSqlDatabase", new object[] {
                        itemId});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteSqlDatabase(int itemId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteSqlDatabase", new object[] {
                        itemId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndDeleteSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void DeleteSqlDatabaseAsync(int itemId)
		{
			this.DeleteSqlDatabaseAsync(itemId, null);
		}

		/// <remarks/>
		public void DeleteSqlDatabaseAsync(int itemId, object userState)
		{
			if ((this.DeleteSqlDatabaseOperationCompleted == null))
			{
				this.DeleteSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("DeleteSqlDatabase", new object[] {
                        itemId}, this.DeleteSqlDatabaseOperationCompleted, userState);
		}

		private void OnDeleteSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.DeleteSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteSqlDatabaseCompleted(this, new DeleteSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/BackupSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string BackupSqlDatabase(int itemId, string backupName, bool zipBackup, bool download, string folderName)
		{
			object[] results = this.Invoke("BackupSqlDatabase", new object[] {
                        itemId,
                        backupName,
                        zipBackup,
                        download,
                        folderName});
			return ((string)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginBackupSqlDatabase(int itemId, string backupName, bool zipBackup, bool download, string folderName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("BackupSqlDatabase", new object[] {
                        itemId,
                        backupName,
                        zipBackup,
                        download,
                        folderName}, callback, asyncState);
		}

		/// <remarks/>
		public string EndBackupSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}

		/// <remarks/>
		public void BackupSqlDatabaseAsync(int itemId, string backupName, bool zipBackup, bool download, string folderName)
		{
			this.BackupSqlDatabaseAsync(itemId, backupName, zipBackup, download, folderName, null);
		}

		/// <remarks/>
		public void BackupSqlDatabaseAsync(int itemId, string backupName, bool zipBackup, bool download, string folderName, object userState)
		{
			if ((this.BackupSqlDatabaseOperationCompleted == null))
			{
				this.BackupSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackupSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("BackupSqlDatabase", new object[] {
                        itemId,
                        backupName,
                        zipBackup,
                        download,
                        folderName}, this.BackupSqlDatabaseOperationCompleted, userState);
		}

		private void OnBackupSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.BackupSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.BackupSqlDatabaseCompleted(this, new BackupSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSqlBackupBinaryChunk", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		[return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
		public byte[] GetSqlBackupBinaryChunk(int itemId, string path, int offset, int length)
		{
			object[] results = this.Invoke("GetSqlBackupBinaryChunk", new object[] {
                        itemId,
                        path,
                        offset,
                        length});
			return ((byte[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSqlBackupBinaryChunk(int itemId, string path, int offset, int length, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSqlBackupBinaryChunk", new object[] {
                        itemId,
                        path,
                        offset,
                        length}, callback, asyncState);
		}

		/// <remarks/>
		public byte[] EndGetSqlBackupBinaryChunk(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((byte[])(results[0]));
		}

		/// <remarks/>
		public void GetSqlBackupBinaryChunkAsync(int itemId, string path, int offset, int length)
		{
			this.GetSqlBackupBinaryChunkAsync(itemId, path, offset, length, null);
		}

		/// <remarks/>
		public void GetSqlBackupBinaryChunkAsync(int itemId, string path, int offset, int length, object userState)
		{
			if ((this.GetSqlBackupBinaryChunkOperationCompleted == null))
			{
				this.GetSqlBackupBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlBackupBinaryChunkOperationCompleted);
			}
			this.InvokeAsync("GetSqlBackupBinaryChunk", new object[] {
                        itemId,
                        path,
                        offset,
                        length}, this.GetSqlBackupBinaryChunkOperationCompleted, userState);
		}

		private void OnGetSqlBackupBinaryChunkOperationCompleted(object arg)
		{
			if ((this.GetSqlBackupBinaryChunkCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSqlBackupBinaryChunkCompleted(this, new GetSqlBackupBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AppendSqlBackupBinaryChunk", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string AppendSqlBackupBinaryChunk(int itemId, string fileName, string path, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] chunk)
		{
			object[] results = this.Invoke("AppendSqlBackupBinaryChunk", new object[] {
                        itemId,
                        fileName,
                        path,
                        chunk});
			return ((string)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAppendSqlBackupBinaryChunk(int itemId, string fileName, string path, byte[] chunk, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AppendSqlBackupBinaryChunk", new object[] {
                        itemId,
                        fileName,
                        path,
                        chunk}, callback, asyncState);
		}

		/// <remarks/>
		public string EndAppendSqlBackupBinaryChunk(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}

		/// <remarks/>
		public void AppendSqlBackupBinaryChunkAsync(int itemId, string fileName, string path, byte[] chunk)
		{
			this.AppendSqlBackupBinaryChunkAsync(itemId, fileName, path, chunk, null);
		}

		/// <remarks/>
		public void AppendSqlBackupBinaryChunkAsync(int itemId, string fileName, string path, byte[] chunk, object userState)
		{
			if ((this.AppendSqlBackupBinaryChunkOperationCompleted == null))
			{
				this.AppendSqlBackupBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendSqlBackupBinaryChunkOperationCompleted);
			}
			this.InvokeAsync("AppendSqlBackupBinaryChunk", new object[] {
                        itemId,
                        fileName,
                        path,
                        chunk}, this.AppendSqlBackupBinaryChunkOperationCompleted, userState);
		}

		private void OnAppendSqlBackupBinaryChunkOperationCompleted(object arg)
		{
			if ((this.AppendSqlBackupBinaryChunkCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AppendSqlBackupBinaryChunkCompleted(this, new AppendSqlBackupBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RestoreSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int RestoreSqlDatabase(int itemId, string[] uploadedFiles, string[] packageFiles)
		{
			object[] results = this.Invoke("RestoreSqlDatabase", new object[] {
                        itemId,
                        uploadedFiles,
                        packageFiles});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginRestoreSqlDatabase(int itemId, string[] uploadedFiles, string[] packageFiles, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("RestoreSqlDatabase", new object[] {
                        itemId,
                        uploadedFiles,
                        packageFiles}, callback, asyncState);
		}

		/// <remarks/>
		public int EndRestoreSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void RestoreSqlDatabaseAsync(int itemId, string[] uploadedFiles, string[] packageFiles)
		{
			this.RestoreSqlDatabaseAsync(itemId, uploadedFiles, packageFiles, null);
		}

		/// <remarks/>
		public void RestoreSqlDatabaseAsync(int itemId, string[] uploadedFiles, string[] packageFiles, object userState)
		{
			if ((this.RestoreSqlDatabaseOperationCompleted == null))
			{
				this.RestoreSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("RestoreSqlDatabase", new object[] {
                        itemId,
                        uploadedFiles,
                        packageFiles}, this.RestoreSqlDatabaseOperationCompleted, userState);
		}

		private void OnRestoreSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.RestoreSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.RestoreSqlDatabaseCompleted(this, new RestoreSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/TruncateSqlDatabase", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int TruncateSqlDatabase(int itemId)
		{
			object[] results = this.Invoke("TruncateSqlDatabase", new object[] {
                        itemId});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginTruncateSqlDatabase(int itemId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("TruncateSqlDatabase", new object[] {
                        itemId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndTruncateSqlDatabase(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void TruncateSqlDatabaseAsync(int itemId)
		{
			this.TruncateSqlDatabaseAsync(itemId, null);
		}

		/// <remarks/>
		public void TruncateSqlDatabaseAsync(int itemId, object userState)
		{
			if ((this.TruncateSqlDatabaseOperationCompleted == null))
			{
				this.TruncateSqlDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTruncateSqlDatabaseOperationCompleted);
			}
			this.InvokeAsync("TruncateSqlDatabase", new object[] {
                        itemId}, this.TruncateSqlDatabaseOperationCompleted, userState);
		}

		private void OnTruncateSqlDatabaseOperationCompleted(object arg)
		{
			if ((this.TruncateSqlDatabaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.TruncateSqlDatabaseCompleted(this, new TruncateSqlDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDatabaseBrowserConfiguratio" +
			"n", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DatabaseBrowserConfiguration GetDatabaseBrowserConfiguration(int packageId, string groupName)
		{
			object[] results = this.Invoke("GetDatabaseBrowserConfiguration", new object[] {
                        packageId,
                        groupName});
			return ((DatabaseBrowserConfiguration)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDatabaseBrowserConfiguration(int packageId, string groupName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDatabaseBrowserConfiguration", new object[] {
                        packageId,
                        groupName}, callback, asyncState);
		}

		/// <remarks/>
		public DatabaseBrowserConfiguration EndGetDatabaseBrowserConfiguration(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DatabaseBrowserConfiguration)(results[0]));
		}

		/// <remarks/>
		public void GetDatabaseBrowserConfigurationAsync(int packageId, string groupName)
		{
			this.GetDatabaseBrowserConfigurationAsync(packageId, groupName, null);
		}

		/// <remarks/>
		public void GetDatabaseBrowserConfigurationAsync(int packageId, string groupName, object userState)
		{
			if ((this.GetDatabaseBrowserConfigurationOperationCompleted == null))
			{
				this.GetDatabaseBrowserConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDatabaseBrowserConfigurationOperationCompleted);
			}
			this.InvokeAsync("GetDatabaseBrowserConfiguration", new object[] {
                        packageId,
                        groupName}, this.GetDatabaseBrowserConfigurationOperationCompleted, userState);
		}

		private void OnGetDatabaseBrowserConfigurationOperationCompleted(object arg)
		{
			if ((this.GetDatabaseBrowserConfigurationCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDatabaseBrowserConfigurationCompleted(this, new GetDatabaseBrowserConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDatabaseBrowserLogonScript", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public DatabaseBrowserConfiguration GetDatabaseBrowserLogonScript(int packageId, string groupName, string username)
		{
			object[] results = this.Invoke("GetDatabaseBrowserLogonScript", new object[] {
                        packageId,
                        groupName,
                        username});
			return ((DatabaseBrowserConfiguration)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetDatabaseBrowserLogonScript(int packageId, string groupName, string username, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetDatabaseBrowserLogonScript", new object[] {
                        packageId,
                        groupName,
                        username}, callback, asyncState);
		}

		/// <remarks/>
		public DatabaseBrowserConfiguration EndGetDatabaseBrowserLogonScript(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((DatabaseBrowserConfiguration)(results[0]));
		}

		/// <remarks/>
		public void GetDatabaseBrowserLogonScriptAsync(int packageId, string groupName, string username)
		{
			this.GetDatabaseBrowserLogonScriptAsync(packageId, groupName, username, null);
		}

		/// <remarks/>
		public void GetDatabaseBrowserLogonScriptAsync(int packageId, string groupName, string username, object userState)
		{
			if ((this.GetDatabaseBrowserLogonScriptOperationCompleted == null))
			{
				this.GetDatabaseBrowserLogonScriptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDatabaseBrowserLogonScriptOperationCompleted);
			}
			this.InvokeAsync("GetDatabaseBrowserLogonScript", new object[] {
                        packageId,
                        groupName,
                        username}, this.GetDatabaseBrowserLogonScriptOperationCompleted, userState);
		}

		private void OnGetDatabaseBrowserLogonScriptOperationCompleted(object arg)
		{
			if ((this.GetDatabaseBrowserLogonScriptCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetDatabaseBrowserLogonScriptCompleted(this, new GetDatabaseBrowserLogonScriptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawSqlUsersPaged", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.Data.DataSet GetRawSqlUsersPaged(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
		{
			object[] results = this.Invoke("GetRawSqlUsersPaged", new object[] {
                        packageId,
                        groupName,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRawSqlUsersPaged(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRawSqlUsersPaged", new object[] {
                        packageId,
                        groupName,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
		}

		/// <remarks/>
		public System.Data.DataSet EndGetRawSqlUsersPaged(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public void GetRawSqlUsersPagedAsync(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
		{
			this.GetRawSqlUsersPagedAsync(packageId, groupName, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
		}

		/// <remarks/>
		public void GetRawSqlUsersPagedAsync(int packageId, string groupName, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState)
		{
			if ((this.GetRawSqlUsersPagedOperationCompleted == null))
			{
				this.GetRawSqlUsersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawSqlUsersPagedOperationCompleted);
			}
			this.InvokeAsync("GetRawSqlUsersPaged", new object[] {
                        packageId,
                        groupName,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawSqlUsersPagedOperationCompleted, userState);
		}

		private void OnGetRawSqlUsersPagedOperationCompleted(object arg)
		{
			if ((this.GetRawSqlUsersPagedCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetRawSqlUsersPagedCompleted(this, new GetRawSqlUsersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSqlUsers", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SqlUser[] GetSqlUsers(int packageId, string groupName, bool recursive)
		{
			object[] results = this.Invoke("GetSqlUsers", new object[] {
                        packageId,
                        groupName,
                        recursive});
			return ((SqlUser[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSqlUsers(int packageId, string groupName, bool recursive, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSqlUsers", new object[] {
                        packageId,
                        groupName,
                        recursive}, callback, asyncState);
		}

		/// <remarks/>
		public SqlUser[] EndGetSqlUsers(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SqlUser[])(results[0]));
		}

		/// <remarks/>
		public void GetSqlUsersAsync(int packageId, string groupName, bool recursive)
		{
			this.GetSqlUsersAsync(packageId, groupName, recursive, null);
		}

		/// <remarks/>
		public void GetSqlUsersAsync(int packageId, string groupName, bool recursive, object userState)
		{
			if ((this.GetSqlUsersOperationCompleted == null))
			{
				this.GetSqlUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlUsersOperationCompleted);
			}
			this.InvokeAsync("GetSqlUsers", new object[] {
                        packageId,
                        groupName,
                        recursive}, this.GetSqlUsersOperationCompleted, userState);
		}

		private void OnGetSqlUsersOperationCompleted(object arg)
		{
			if ((this.GetSqlUsersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSqlUsersCompleted(this, new GetSqlUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSqlUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public SqlUser GetSqlUser(int itemId)
		{
			object[] results = this.Invoke("GetSqlUser", new object[] {
                        itemId});
			return ((SqlUser)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSqlUser(int itemId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSqlUser", new object[] {
                        itemId}, callback, asyncState);
		}

		/// <remarks/>
		public SqlUser EndGetSqlUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((SqlUser)(results[0]));
		}

		/// <remarks/>
		public void GetSqlUserAsync(int itemId)
		{
			this.GetSqlUserAsync(itemId, null);
		}

		/// <remarks/>
		public void GetSqlUserAsync(int itemId, object userState)
		{
			if ((this.GetSqlUserOperationCompleted == null))
			{
				this.GetSqlUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSqlUserOperationCompleted);
			}
			this.InvokeAsync("GetSqlUser", new object[] {
                        itemId}, this.GetSqlUserOperationCompleted, userState);
		}

		private void OnGetSqlUserOperationCompleted(object arg)
		{
			if ((this.GetSqlUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSqlUserCompleted(this, new GetSqlUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddSqlUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int AddSqlUser(SqlUser item, string groupName)
		{
			object[] results = this.Invoke("AddSqlUser", new object[] {
                        item,
                        groupName});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSqlUser(SqlUser item, string groupName, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSqlUser", new object[] {
                        item,
                        groupName}, callback, asyncState);
		}

		/// <remarks/>
		public int EndAddSqlUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void AddSqlUserAsync(SqlUser item, string groupName)
		{
			this.AddSqlUserAsync(item, groupName, null);
		}

		/// <remarks/>
		public void AddSqlUserAsync(SqlUser item, string groupName, object userState)
		{
			if ((this.AddSqlUserOperationCompleted == null))
			{
				this.AddSqlUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSqlUserOperationCompleted);
			}
			this.InvokeAsync("AddSqlUser", new object[] {
                        item,
                        groupName}, this.AddSqlUserOperationCompleted, userState);
		}

		private void OnAddSqlUserOperationCompleted(object arg)
		{
			if ((this.AddSqlUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddSqlUserCompleted(this, new AddSqlUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSqlUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int UpdateSqlUser(SqlUser item)
		{
			object[] results = this.Invoke("UpdateSqlUser", new object[] {
                        item});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateSqlUser(SqlUser item, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateSqlUser", new object[] {
                        item}, callback, asyncState);
		}

		/// <remarks/>
		public int EndUpdateSqlUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void UpdateSqlUserAsync(SqlUser item)
		{
			this.UpdateSqlUserAsync(item, null);
		}

		/// <remarks/>
		public void UpdateSqlUserAsync(SqlUser item, object userState)
		{
			if ((this.UpdateSqlUserOperationCompleted == null))
			{
				this.UpdateSqlUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSqlUserOperationCompleted);
			}
			this.InvokeAsync("UpdateSqlUser", new object[] {
                        item}, this.UpdateSqlUserOperationCompleted, userState);
		}

		private void OnUpdateSqlUserOperationCompleted(object arg)
		{
			if ((this.UpdateSqlUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateSqlUserCompleted(this, new UpdateSqlUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSqlUser", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int DeleteSqlUser(int itemId)
		{
			object[] results = this.Invoke("DeleteSqlUser", new object[] {
                        itemId});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteSqlUser(int itemId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteSqlUser", new object[] {
                        itemId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndDeleteSqlUser(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void DeleteSqlUserAsync(int itemId)
		{
			this.DeleteSqlUserAsync(itemId, null);
		}

		/// <remarks/>
		public void DeleteSqlUserAsync(int itemId, object userState)
		{
			if ((this.DeleteSqlUserOperationCompleted == null))
			{
				this.DeleteSqlUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSqlUserOperationCompleted);
			}
			this.InvokeAsync("DeleteSqlUser", new object[] {
                        itemId}, this.DeleteSqlUserOperationCompleted, userState);
		}

		private void OnDeleteSqlUserOperationCompleted(object arg)
		{
			if ((this.DeleteSqlUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteSqlUserCompleted(this, new DeleteSqlUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetRawSqlDatabasesPagedCompletedEventHandler(object sender, GetRawSqlDatabasesPagedCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRawSqlDatabasesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRawSqlDatabasesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Data.DataSet Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Data.DataSet)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSqlDatabasesCompletedEventHandler(object sender, GetSqlDatabasesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSqlDatabasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSqlDatabasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SqlDatabase[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SqlDatabase[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSqlDatabaseCompletedEventHandler(object sender, GetSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SqlDatabase Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SqlDatabase)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void AddSqlDatabaseCompletedEventHandler(object sender, AddSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void UpdateSqlDatabaseCompletedEventHandler(object sender, UpdateSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void DeleteSqlDatabaseCompletedEventHandler(object sender, DeleteSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void BackupSqlDatabaseCompletedEventHandler(object sender, BackupSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class BackupSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal BackupSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public string Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((string)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSqlBackupBinaryChunkCompletedEventHandler(object sender, GetSqlBackupBinaryChunkCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSqlBackupBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSqlBackupBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public byte[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((byte[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void AppendSqlBackupBinaryChunkCompletedEventHandler(object sender, AppendSqlBackupBinaryChunkCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AppendSqlBackupBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AppendSqlBackupBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public string Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((string)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void RestoreSqlDatabaseCompletedEventHandler(object sender, RestoreSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class RestoreSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal RestoreSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void TruncateSqlDatabaseCompletedEventHandler(object sender, TruncateSqlDatabaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class TruncateSqlDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal TruncateSqlDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetDatabaseBrowserConfigurationCompletedEventHandler(object sender, GetDatabaseBrowserConfigurationCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDatabaseBrowserConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDatabaseBrowserConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DatabaseBrowserConfiguration Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DatabaseBrowserConfiguration)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetDatabaseBrowserLogonScriptCompletedEventHandler(object sender, GetDatabaseBrowserLogonScriptCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetDatabaseBrowserLogonScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetDatabaseBrowserLogonScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public DatabaseBrowserConfiguration Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((DatabaseBrowserConfiguration)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetRawSqlUsersPagedCompletedEventHandler(object sender, GetRawSqlUsersPagedCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetRawSqlUsersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetRawSqlUsersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Data.DataSet Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Data.DataSet)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSqlUsersCompletedEventHandler(object sender, GetSqlUsersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSqlUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSqlUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SqlUser[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SqlUser[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSqlUserCompletedEventHandler(object sender, GetSqlUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSqlUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSqlUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public SqlUser Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((SqlUser)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void AddSqlUserCompletedEventHandler(object sender, AddSqlUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddSqlUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddSqlUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void UpdateSqlUserCompletedEventHandler(object sender, UpdateSqlUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateSqlUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateSqlUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void DeleteSqlUserCompletedEventHandler(object sender, DeleteSqlUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteSqlUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteSqlUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}
}
