//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolidCP.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esPackagesSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    public partial class esPackages : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback GetHostingPlansOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostingAddonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostingPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostingPlanQuotasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostingPlanContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAvailableHostingPlansOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAvailableHostingAddonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddHostingPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateHostingPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteHostingPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNestedPackagesSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchServiceItemsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNestedPackagesPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagePackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawMyPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageContextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageQuotasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageQuotasForEditOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageLiteralOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePackageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback EvaluateUserPackageTempateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultTopPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageAddonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageAddonOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPackageAddonByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPackageAddonOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPackageAddonLiteralOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageAddonOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageAddonLiteralOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePackageAddonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSearchableServiceItemTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawPackageItemsByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawPackageItemsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawPackageItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DetachPackageItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback MovePackageItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageQuotaOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAccountSummaryLetterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPackageSummaryLetterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEvaluatedPackageTemplateBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEvaluatedAccountTemplateBodyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPackageWithResourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserWizardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesBandwidthPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackagesDiskspacePagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageBandwidthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackageDiskspaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOverusageSummaryReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiskspaceOverusageDetailsReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBandwidthOverusageDetailsReportOperationCompleted;
        
        /// <remarks/>
        public esPackages() {
            this.Url = "http://127.0.0.1:9002/esPackages.asmx";
        }
        
        /// <remarks/>
        public event GetHostingPlansCompletedEventHandler GetHostingPlansCompleted;
        
        /// <remarks/>
        public event GetHostingAddonsCompletedEventHandler GetHostingAddonsCompleted;
        
        /// <remarks/>
        public event GetHostingPlanCompletedEventHandler GetHostingPlanCompleted;
        
        /// <remarks/>
        public event GetHostingPlanQuotasCompletedEventHandler GetHostingPlanQuotasCompleted;
        
        /// <remarks/>
        public event GetHostingPlanContextCompletedEventHandler GetHostingPlanContextCompleted;
        
        /// <remarks/>
        public event GetUserAvailableHostingPlansCompletedEventHandler GetUserAvailableHostingPlansCompleted;
        
        /// <remarks/>
        public event GetUserAvailableHostingAddonsCompletedEventHandler GetUserAvailableHostingAddonsCompleted;
        
        /// <remarks/>
        public event AddHostingPlanCompletedEventHandler AddHostingPlanCompleted;
        
        /// <remarks/>
        public event UpdateHostingPlanCompletedEventHandler UpdateHostingPlanCompleted;
        
        /// <remarks/>
        public event DeleteHostingPlanCompletedEventHandler DeleteHostingPlanCompleted;
        
        /// <remarks/>
        public event GetPackagesCompletedEventHandler GetPackagesCompleted;
        
        /// <remarks/>
        public event GetNestedPackagesSummaryCompletedEventHandler GetNestedPackagesSummaryCompleted;
        
        /// <remarks/>
        public event GetRawPackagesCompletedEventHandler GetRawPackagesCompleted;
        
        /// <remarks/>
        public event SearchServiceItemsPagedCompletedEventHandler SearchServiceItemsPagedCompleted;
        
        /// <remarks/>
        public event GetPackagesPagedCompletedEventHandler GetPackagesPagedCompleted;
        
        /// <remarks/>
        public event GetNestedPackagesPagedCompletedEventHandler GetNestedPackagesPagedCompleted;
        
        /// <remarks/>
        public event GetPackagePackagesCompletedEventHandler GetPackagePackagesCompleted;
        
        /// <remarks/>
        public event GetMyPackagesCompletedEventHandler GetMyPackagesCompleted;
        
        /// <remarks/>
        public event GetRawMyPackagesCompletedEventHandler GetRawMyPackagesCompleted;
        
        /// <remarks/>
        public event GetPackageCompletedEventHandler GetPackageCompleted;
        
        /// <remarks/>
        public event GetPackageContextCompletedEventHandler GetPackageContextCompleted;
        
        /// <remarks/>
        public event GetPackageQuotasCompletedEventHandler GetPackageQuotasCompleted;
        
        /// <remarks/>
        public event GetPackageQuotasForEditCompletedEventHandler GetPackageQuotasForEditCompleted;
        
        /// <remarks/>
        public event AddPackageCompletedEventHandler AddPackageCompleted;
        
        /// <remarks/>
        public event UpdatePackageCompletedEventHandler UpdatePackageCompleted;
        
        /// <remarks/>
        public event UpdatePackageLiteralCompletedEventHandler UpdatePackageLiteralCompleted;
        
        /// <remarks/>
        public event UpdatePackageNameCompletedEventHandler UpdatePackageNameCompleted;
        
        /// <remarks/>
        public event DeletePackageCompletedEventHandler DeletePackageCompleted;
        
        /// <remarks/>
        public event ChangePackageStatusCompletedEventHandler ChangePackageStatusCompleted;
        
        /// <remarks/>
        public event EvaluateUserPackageTempateCompletedEventHandler EvaluateUserPackageTempateCompleted;
        
        /// <remarks/>
        public event GetPackageSettingsCompletedEventHandler GetPackageSettingsCompleted;
        
        /// <remarks/>
        public event UpdatePackageSettingsCompletedEventHandler UpdatePackageSettingsCompleted;
        
        /// <remarks/>
        public event SetDefaultTopPackageCompletedEventHandler SetDefaultTopPackageCompleted;
        
        /// <remarks/>
        public event GetPackageAddonsCompletedEventHandler GetPackageAddonsCompleted;
        
        /// <remarks/>
        public event GetPackageAddonCompletedEventHandler GetPackageAddonCompleted;
        
        /// <remarks/>
        public event AddPackageAddonByIdCompletedEventHandler AddPackageAddonByIdCompleted;
        
        /// <remarks/>
        public event AddPackageAddonCompletedEventHandler AddPackageAddonCompleted;
        
        /// <remarks/>
        public event AddPackageAddonLiteralCompletedEventHandler AddPackageAddonLiteralCompleted;
        
        /// <remarks/>
        public event UpdatePackageAddonCompletedEventHandler UpdatePackageAddonCompleted;
        
        /// <remarks/>
        public event UpdatePackageAddonLiteralCompletedEventHandler UpdatePackageAddonLiteralCompleted;
        
        /// <remarks/>
        public event DeletePackageAddonCompletedEventHandler DeletePackageAddonCompleted;
        
        /// <remarks/>
        public event GetSearchableServiceItemTypesCompletedEventHandler GetSearchableServiceItemTypesCompleted;
        
        /// <remarks/>
        public event GetRawPackageItemsByTypeCompletedEventHandler GetRawPackageItemsByTypeCompleted;
        
        /// <remarks/>
        public event GetRawPackageItemsPagedCompletedEventHandler GetRawPackageItemsPagedCompleted;
        
        /// <remarks/>
        public event GetRawPackageItemsCompletedEventHandler GetRawPackageItemsCompleted;
        
        /// <remarks/>
        public event DetachPackageItemCompletedEventHandler DetachPackageItemCompleted;
        
        /// <remarks/>
        public event MovePackageItemCompletedEventHandler MovePackageItemCompleted;
        
        /// <remarks/>
        public event GetPackageQuotaCompletedEventHandler GetPackageQuotaCompleted;
        
        /// <remarks/>
        public event SendAccountSummaryLetterCompletedEventHandler SendAccountSummaryLetterCompleted;
        
        /// <remarks/>
        public event SendPackageSummaryLetterCompletedEventHandler SendPackageSummaryLetterCompleted;
        
        /// <remarks/>
        public event GetEvaluatedPackageTemplateBodyCompletedEventHandler GetEvaluatedPackageTemplateBodyCompleted;
        
        /// <remarks/>
        public event GetEvaluatedAccountTemplateBodyCompletedEventHandler GetEvaluatedAccountTemplateBodyCompleted;
        
        /// <remarks/>
        public event AddPackageWithResourcesCompletedEventHandler AddPackageWithResourcesCompleted;
        
        /// <remarks/>
        public event CreateUserWizardCompletedEventHandler CreateUserWizardCompleted;
        
        /// <remarks/>
        public event GetPackagesBandwidthPagedCompletedEventHandler GetPackagesBandwidthPagedCompleted;
        
        /// <remarks/>
        public event GetPackagesDiskspacePagedCompletedEventHandler GetPackagesDiskspacePagedCompleted;
        
        /// <remarks/>
        public event GetPackageBandwidthCompletedEventHandler GetPackageBandwidthCompleted;
        
        /// <remarks/>
        public event GetPackageDiskspaceCompletedEventHandler GetPackageDiskspaceCompleted;
        
        /// <remarks/>
        public event GetOverusageSummaryReportCompletedEventHandler GetOverusageSummaryReportCompleted;
        
        /// <remarks/>
        public event GetDiskspaceOverusageDetailsReportCompletedEventHandler GetDiskspaceOverusageDetailsReportCompleted;
        
        /// <remarks/>
        public event GetBandwidthOverusageDetailsReportCompletedEventHandler GetBandwidthOverusageDetailsReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHostingPlans", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetHostingPlans(int userId) {
            object[] results = this.Invoke("GetHostingPlans", new object[] {
                        userId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostingPlans(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostingPlans", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetHostingPlans(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostingPlansAsync(int userId) {
            this.GetHostingPlansAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetHostingPlansAsync(int userId, object userState) {
            if ((this.GetHostingPlansOperationCompleted == null)) {
                this.GetHostingPlansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostingPlansOperationCompleted);
            }
            this.InvokeAsync("GetHostingPlans", new object[] {
                        userId}, this.GetHostingPlansOperationCompleted, userState);
        }
        
        private void OnGetHostingPlansOperationCompleted(object arg) {
            if ((this.GetHostingPlansCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostingPlansCompleted(this, new GetHostingPlansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHostingAddons", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetHostingAddons(int userId) {
            object[] results = this.Invoke("GetHostingAddons", new object[] {
                        userId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostingAddons(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostingAddons", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetHostingAddons(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostingAddonsAsync(int userId) {
            this.GetHostingAddonsAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetHostingAddonsAsync(int userId, object userState) {
            if ((this.GetHostingAddonsOperationCompleted == null)) {
                this.GetHostingAddonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostingAddonsOperationCompleted);
            }
            this.InvokeAsync("GetHostingAddons", new object[] {
                        userId}, this.GetHostingAddonsOperationCompleted, userState);
        }
        
        private void OnGetHostingAddonsOperationCompleted(object arg) {
            if ((this.GetHostingAddonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostingAddonsCompleted(this, new GetHostingAddonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHostingPlan", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HostingPlanInfo GetHostingPlan(int planId) {
            object[] results = this.Invoke("GetHostingPlan", new object[] {
                        planId});
            return ((HostingPlanInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostingPlan(int planId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostingPlan", new object[] {
                        planId}, callback, asyncState);
        }
        
        /// <remarks/>
        public HostingPlanInfo EndGetHostingPlan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HostingPlanInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostingPlanAsync(int planId) {
            this.GetHostingPlanAsync(planId, null);
        }
        
        /// <remarks/>
        public void GetHostingPlanAsync(int planId, object userState) {
            if ((this.GetHostingPlanOperationCompleted == null)) {
                this.GetHostingPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostingPlanOperationCompleted);
            }
            this.InvokeAsync("GetHostingPlan", new object[] {
                        planId}, this.GetHostingPlanOperationCompleted, userState);
        }
        
        private void OnGetHostingPlanOperationCompleted(object arg) {
            if ((this.GetHostingPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostingPlanCompleted(this, new GetHostingPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHostingPlanQuotas", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetHostingPlanQuotas(int packageId, int planId, int serverId) {
            object[] results = this.Invoke("GetHostingPlanQuotas", new object[] {
                        packageId,
                        planId,
                        serverId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostingPlanQuotas(int packageId, int planId, int serverId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostingPlanQuotas", new object[] {
                        packageId,
                        planId,
                        serverId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetHostingPlanQuotas(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostingPlanQuotasAsync(int packageId, int planId, int serverId) {
            this.GetHostingPlanQuotasAsync(packageId, planId, serverId, null);
        }
        
        /// <remarks/>
        public void GetHostingPlanQuotasAsync(int packageId, int planId, int serverId, object userState) {
            if ((this.GetHostingPlanQuotasOperationCompleted == null)) {
                this.GetHostingPlanQuotasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostingPlanQuotasOperationCompleted);
            }
            this.InvokeAsync("GetHostingPlanQuotas", new object[] {
                        packageId,
                        planId,
                        serverId}, this.GetHostingPlanQuotasOperationCompleted, userState);
        }
        
        private void OnGetHostingPlanQuotasOperationCompleted(object arg) {
            if ((this.GetHostingPlanQuotasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostingPlanQuotasCompleted(this, new GetHostingPlanQuotasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetHostingPlanContext", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HostingPlanContext GetHostingPlanContext(int planId) {
            object[] results = this.Invoke("GetHostingPlanContext", new object[] {
                        planId});
            return ((HostingPlanContext)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostingPlanContext(int planId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostingPlanContext", new object[] {
                        planId}, callback, asyncState);
        }
        
        /// <remarks/>
        public HostingPlanContext EndGetHostingPlanContext(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HostingPlanContext)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostingPlanContextAsync(int planId) {
            this.GetHostingPlanContextAsync(planId, null);
        }
        
        /// <remarks/>
        public void GetHostingPlanContextAsync(int planId, object userState) {
            if ((this.GetHostingPlanContextOperationCompleted == null)) {
                this.GetHostingPlanContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostingPlanContextOperationCompleted);
            }
            this.InvokeAsync("GetHostingPlanContext", new object[] {
                        planId}, this.GetHostingPlanContextOperationCompleted, userState);
        }
        
        private void OnGetHostingPlanContextOperationCompleted(object arg) {
            if ((this.GetHostingPlanContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostingPlanContextCompleted(this, new GetHostingPlanContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUserAvailableHostingPlans", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HostingPlanInfo[] GetUserAvailableHostingPlans(int userId) {
            object[] results = this.Invoke("GetUserAvailableHostingPlans", new object[] {
                        userId});
            return ((HostingPlanInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserAvailableHostingPlans(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserAvailableHostingPlans", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public HostingPlanInfo[] EndGetUserAvailableHostingPlans(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HostingPlanInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAvailableHostingPlansAsync(int userId) {
            this.GetUserAvailableHostingPlansAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetUserAvailableHostingPlansAsync(int userId, object userState) {
            if ((this.GetUserAvailableHostingPlansOperationCompleted == null)) {
                this.GetUserAvailableHostingPlansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAvailableHostingPlansOperationCompleted);
            }
            this.InvokeAsync("GetUserAvailableHostingPlans", new object[] {
                        userId}, this.GetUserAvailableHostingPlansOperationCompleted, userState);
        }
        
        private void OnGetUserAvailableHostingPlansOperationCompleted(object arg) {
            if ((this.GetUserAvailableHostingPlansCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAvailableHostingPlansCompleted(this, new GetUserAvailableHostingPlansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUserAvailableHostingAddons", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HostingPlanInfo[] GetUserAvailableHostingAddons(int userId) {
            object[] results = this.Invoke("GetUserAvailableHostingAddons", new object[] {
                        userId});
            return ((HostingPlanInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserAvailableHostingAddons(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserAvailableHostingAddons", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public HostingPlanInfo[] EndGetUserAvailableHostingAddons(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HostingPlanInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAvailableHostingAddonsAsync(int userId) {
            this.GetUserAvailableHostingAddonsAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetUserAvailableHostingAddonsAsync(int userId, object userState) {
            if ((this.GetUserAvailableHostingAddonsOperationCompleted == null)) {
                this.GetUserAvailableHostingAddonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAvailableHostingAddonsOperationCompleted);
            }
            this.InvokeAsync("GetUserAvailableHostingAddons", new object[] {
                        userId}, this.GetUserAvailableHostingAddonsOperationCompleted, userState);
        }
        
        private void OnGetUserAvailableHostingAddonsOperationCompleted(object arg) {
            if ((this.GetUserAvailableHostingAddonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAvailableHostingAddonsCompleted(this, new GetUserAvailableHostingAddonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddHostingPlan", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddHostingPlan(HostingPlanInfo plan) {
            object[] results = this.Invoke("AddHostingPlan", new object[] {
                        plan});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddHostingPlan(HostingPlanInfo plan, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHostingPlan", new object[] {
                        plan}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddHostingPlan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddHostingPlanAsync(HostingPlanInfo plan) {
            this.AddHostingPlanAsync(plan, null);
        }
        
        /// <remarks/>
        public void AddHostingPlanAsync(HostingPlanInfo plan, object userState) {
            if ((this.AddHostingPlanOperationCompleted == null)) {
                this.AddHostingPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostingPlanOperationCompleted);
            }
            this.InvokeAsync("AddHostingPlan", new object[] {
                        plan}, this.AddHostingPlanOperationCompleted, userState);
        }
        
        private void OnAddHostingPlanOperationCompleted(object arg) {
            if ((this.AddHostingPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHostingPlanCompleted(this, new AddHostingPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateHostingPlan", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult UpdateHostingPlan(HostingPlanInfo plan) {
            object[] results = this.Invoke("UpdateHostingPlan", new object[] {
                        plan});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateHostingPlan(HostingPlanInfo plan, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateHostingPlan", new object[] {
                        plan}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndUpdateHostingPlan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateHostingPlanAsync(HostingPlanInfo plan) {
            this.UpdateHostingPlanAsync(plan, null);
        }
        
        /// <remarks/>
        public void UpdateHostingPlanAsync(HostingPlanInfo plan, object userState) {
            if ((this.UpdateHostingPlanOperationCompleted == null)) {
                this.UpdateHostingPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHostingPlanOperationCompleted);
            }
            this.InvokeAsync("UpdateHostingPlan", new object[] {
                        plan}, this.UpdateHostingPlanOperationCompleted, userState);
        }
        
        private void OnUpdateHostingPlanOperationCompleted(object arg) {
            if ((this.UpdateHostingPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHostingPlanCompleted(this, new UpdateHostingPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteHostingPlan", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteHostingPlan(int planId) {
            object[] results = this.Invoke("DeleteHostingPlan", new object[] {
                        planId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteHostingPlan(int planId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteHostingPlan", new object[] {
                        planId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteHostingPlan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteHostingPlanAsync(int planId) {
            this.DeleteHostingPlanAsync(planId, null);
        }
        
        /// <remarks/>
        public void DeleteHostingPlanAsync(int planId, object userState) {
            if ((this.DeleteHostingPlanOperationCompleted == null)) {
                this.DeleteHostingPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHostingPlanOperationCompleted);
            }
            this.InvokeAsync("DeleteHostingPlan", new object[] {
                        planId}, this.DeleteHostingPlanOperationCompleted, userState);
        }
        
        private void OnDeleteHostingPlanOperationCompleted(object arg) {
            if ((this.DeleteHostingPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHostingPlanCompleted(this, new DeleteHostingPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackages", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageInfo[] GetPackages(int userId) {
            object[] results = this.Invoke("GetPackages", new object[] {
                        userId});
            return ((PackageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackages(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackages", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageInfo[] EndGetPackages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesAsync(int userId) {
            this.GetPackagesAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetPackagesAsync(int userId, object userState) {
            if ((this.GetPackagesOperationCompleted == null)) {
                this.GetPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesOperationCompleted);
            }
            this.InvokeAsync("GetPackages", new object[] {
                        userId}, this.GetPackagesOperationCompleted, userState);
        }
        
        private void OnGetPackagesOperationCompleted(object arg) {
            if ((this.GetPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesCompleted(this, new GetPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetNestedPackagesSummary", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNestedPackagesSummary(int packageId) {
            object[] results = this.Invoke("GetNestedPackagesSummary", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNestedPackagesSummary(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNestedPackagesSummary", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetNestedPackagesSummary(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNestedPackagesSummaryAsync(int packageId) {
            this.GetNestedPackagesSummaryAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetNestedPackagesSummaryAsync(int packageId, object userState) {
            if ((this.GetNestedPackagesSummaryOperationCompleted == null)) {
                this.GetNestedPackagesSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNestedPackagesSummaryOperationCompleted);
            }
            this.InvokeAsync("GetNestedPackagesSummary", new object[] {
                        packageId}, this.GetNestedPackagesSummaryOperationCompleted, userState);
        }
        
        private void OnGetNestedPackagesSummaryOperationCompleted(object arg) {
            if ((this.GetNestedPackagesSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNestedPackagesSummaryCompleted(this, new GetNestedPackagesSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawPackages", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawPackages(int userId) {
            object[] results = this.Invoke("GetRawPackages", new object[] {
                        userId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawPackages(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawPackages", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawPackages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawPackagesAsync(int userId) {
            this.GetRawPackagesAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetRawPackagesAsync(int userId, object userState) {
            if ((this.GetRawPackagesOperationCompleted == null)) {
                this.GetRawPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawPackagesOperationCompleted);
            }
            this.InvokeAsync("GetRawPackages", new object[] {
                        userId}, this.GetRawPackagesOperationCompleted, userState);
        }
        
        private void OnGetRawPackagesOperationCompleted(object arg) {
            if ((this.GetRawPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawPackagesCompleted(this, new GetRawPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SearchServiceItemsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchServiceItemsPaged(int userId, int itemTypeId, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("SearchServiceItemsPaged", new object[] {
                        userId,
                        itemTypeId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearchServiceItemsPaged(int userId, int itemTypeId, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SearchServiceItemsPaged", new object[] {
                        userId,
                        itemTypeId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndSearchServiceItemsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }

        /// <remarks/>
        /// //TODO START
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSearchObject", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSearchObject(int userId, string filterColumn, string filterValue, int statusId, int roleId, string sortColumn, int startRow, int maximumRows, string colType, string fullType)
        {
            object[] results = this.Invoke("GetSearchObject", new object[] {
                        userId,
                        filterColumn,
                        filterValue,
                        statusId,
                        roleId,
                        sortColumn,
                        startRow,
                        maximumRows,
                        colType,
                        fullType
            });
            return ((System.Data.DataSet)(results[0]));
        }
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSearchObjectQuickFind", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSearchObjectQuickFind(int userId, string filterColumn, string filterValue, int statusId, int roleId, string sortColumn, int maximumRows, string colType, string fullType)
        {
            object[] results = this.Invoke("GetSearchObjectQuickFind", new object[] {
                        userId,
                        filterColumn,
                        filterValue,
                        statusId,
                        roleId,
                        sortColumn,
                        maximumRows,
                        colType,
                        fullType
            });
            return ((System.Data.DataSet)(results[0]));
        }

        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSearchTableByColumns", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSearchTableByColumns(string PagedStored, string FilterValue, int MaximumRows,
            bool Recursive, int PoolID, int ServerID, int StatusID, int PlanID, int OrgID,
            string ItemTypeName, string GroupName, int PackageID, string VPSType, int RoleID, int UserID,
            string FilterColumns)
        {
            object[] results = this.Invoke("GetSearchTableByColumns", new object[] {
                PagedStored,
                FilterValue,
                MaximumRows, 
                Recursive,
                PoolID,
                ServerID,
                StatusID,
                PlanID,
                OrgID,
                ItemTypeName,
                GroupName, 
                PackageID,
                VPSType, 
                RoleID, 
                UserID,
                FilterColumns
            });
            return ((System.Data.DataSet)(results[0]));
        }
        //TODO END

        /// <remarks/>
        public void SearchServiceItemsPagedAsync(int userId, int itemTypeId, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.SearchServiceItemsPagedAsync(userId, itemTypeId, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void SearchServiceItemsPagedAsync(int userId, int itemTypeId, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.SearchServiceItemsPagedOperationCompleted == null)) {
                this.SearchServiceItemsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchServiceItemsPagedOperationCompleted);
            }
            this.InvokeAsync("SearchServiceItemsPaged", new object[] {
                        userId,
                        itemTypeId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.SearchServiceItemsPagedOperationCompleted, userState);
        }
        
        private void OnSearchServiceItemsPagedOperationCompleted(object arg) {
            if ((this.SearchServiceItemsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchServiceItemsPagedCompleted(this, new SearchServiceItemsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackagesPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackagesPaged(int userId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetPackagesPaged", new object[] {
                        userId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackagesPaged(int userId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackagesPaged", new object[] {
                        userId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackagesPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesPagedAsync(int userId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetPackagesPagedAsync(userId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetPackagesPagedAsync(int userId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetPackagesPagedOperationCompleted == null)) {
                this.GetPackagesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesPagedOperationCompleted);
            }
            this.InvokeAsync("GetPackagesPaged", new object[] {
                        userId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetPackagesPagedOperationCompleted, userState);
        }
        
        private void OnGetPackagesPagedOperationCompleted(object arg) {
            if ((this.GetPackagesPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesPagedCompleted(this, new GetPackagesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetNestedPackagesPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNestedPackagesPaged(int packageId, string filterColumn, string filterValue, int statusId, int planId, int serverId, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetNestedPackagesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        statusId,
                        planId,
                        serverId,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNestedPackagesPaged(int packageId, string filterColumn, string filterValue, int statusId, int planId, int serverId, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNestedPackagesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        statusId,
                        planId,
                        serverId,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetNestedPackagesPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNestedPackagesPagedAsync(int packageId, string filterColumn, string filterValue, int statusId, int planId, int serverId, string sortColumn, int startRow, int maximumRows) {
            this.GetNestedPackagesPagedAsync(packageId, filterColumn, filterValue, statusId, planId, serverId, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetNestedPackagesPagedAsync(int packageId, string filterColumn, string filterValue, int statusId, int planId, int serverId, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetNestedPackagesPagedOperationCompleted == null)) {
                this.GetNestedPackagesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNestedPackagesPagedOperationCompleted);
            }
            this.InvokeAsync("GetNestedPackagesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        statusId,
                        planId,
                        serverId,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetNestedPackagesPagedOperationCompleted, userState);
        }
        
        private void OnGetNestedPackagesPagedOperationCompleted(object arg) {
            if ((this.GetNestedPackagesPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNestedPackagesPagedCompleted(this, new GetNestedPackagesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackagePackages", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageInfo[] GetPackagePackages(int packageId) {
            object[] results = this.Invoke("GetPackagePackages", new object[] {
                        packageId});
            return ((PackageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackagePackages(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackagePackages", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageInfo[] EndGetPackagePackages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagePackagesAsync(int packageId) {
            this.GetPackagePackagesAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackagePackagesAsync(int packageId, object userState) {
            if ((this.GetPackagePackagesOperationCompleted == null)) {
                this.GetPackagePackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagePackagesOperationCompleted);
            }
            this.InvokeAsync("GetPackagePackages", new object[] {
                        packageId}, this.GetPackagePackagesOperationCompleted, userState);
        }
        
        private void OnGetPackagePackagesOperationCompleted(object arg) {
            if ((this.GetPackagePackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagePackagesCompleted(this, new GetPackagePackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetMyPackages", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageInfo[] GetMyPackages(int userId) {
            object[] results = this.Invoke("GetMyPackages", new object[] {
                        userId});
            return ((PackageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMyPackages(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMyPackages", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageInfo[] EndGetMyPackages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyPackagesAsync(int userId) {
            this.GetMyPackagesAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetMyPackagesAsync(int userId, object userState) {
            if ((this.GetMyPackagesOperationCompleted == null)) {
                this.GetMyPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyPackagesOperationCompleted);
            }
            this.InvokeAsync("GetMyPackages", new object[] {
                        userId}, this.GetMyPackagesOperationCompleted, userState);
        }
        
        private void OnGetMyPackagesOperationCompleted(object arg) {
            if ((this.GetMyPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyPackagesCompleted(this, new GetMyPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawMyPackages", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawMyPackages(int userId) {
            object[] results = this.Invoke("GetRawMyPackages", new object[] {
                        userId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawMyPackages(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawMyPackages", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawMyPackages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawMyPackagesAsync(int userId) {
            this.GetRawMyPackagesAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetRawMyPackagesAsync(int userId, object userState) {
            if ((this.GetRawMyPackagesOperationCompleted == null)) {
                this.GetRawMyPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawMyPackagesOperationCompleted);
            }
            this.InvokeAsync("GetRawMyPackages", new object[] {
                        userId}, this.GetRawMyPackagesOperationCompleted, userState);
        }
        
        private void OnGetRawMyPackagesOperationCompleted(object arg) {
            if ((this.GetRawMyPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawMyPackagesCompleted(this, new GetRawMyPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageInfo GetPackage(int packageId) {
            object[] results = this.Invoke("GetPackage", new object[] {
                        packageId});
            return ((PackageInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackage(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackage", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageInfo EndGetPackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageAsync(int packageId) {
            this.GetPackageAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageAsync(int packageId, object userState) {
            if ((this.GetPackageOperationCompleted == null)) {
                this.GetPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageOperationCompleted);
            }
            this.InvokeAsync("GetPackage", new object[] {
                        packageId}, this.GetPackageOperationCompleted, userState);
        }
        
        private void OnGetPackageOperationCompleted(object arg) {
            if ((this.GetPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageCompleted(this, new GetPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageContext", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageContext GetPackageContext(int packageId) {
            object[] results = this.Invoke("GetPackageContext", new object[] {
                        packageId});
            return ((PackageContext)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageContext(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageContext", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageContext EndGetPackageContext(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageContext)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageContextAsync(int packageId) {
            this.GetPackageContextAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageContextAsync(int packageId, object userState) {
            if ((this.GetPackageContextOperationCompleted == null)) {
                this.GetPackageContextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageContextOperationCompleted);
            }
            this.InvokeAsync("GetPackageContext", new object[] {
                        packageId}, this.GetPackageContextOperationCompleted, userState);
        }
        
        private void OnGetPackageContextOperationCompleted(object arg) {
            if ((this.GetPackageContextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageContextCompleted(this, new GetPackageContextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageQuotas", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackageQuotas(int packageId) {
            object[] results = this.Invoke("GetPackageQuotas", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageQuotas(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageQuotas", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackageQuotas(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageQuotasAsync(int packageId) {
            this.GetPackageQuotasAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageQuotasAsync(int packageId, object userState) {
            if ((this.GetPackageQuotasOperationCompleted == null)) {
                this.GetPackageQuotasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageQuotasOperationCompleted);
            }
            this.InvokeAsync("GetPackageQuotas", new object[] {
                        packageId}, this.GetPackageQuotasOperationCompleted, userState);
        }
        
        private void OnGetPackageQuotasOperationCompleted(object arg) {
            if ((this.GetPackageQuotasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageQuotasCompleted(this, new GetPackageQuotasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageQuotasForEdit", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackageQuotasForEdit(int packageId) {
            object[] results = this.Invoke("GetPackageQuotasForEdit", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageQuotasForEdit(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageQuotasForEdit", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackageQuotasForEdit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageQuotasForEditAsync(int packageId) {
            this.GetPackageQuotasForEditAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageQuotasForEditAsync(int packageId, object userState) {
            if ((this.GetPackageQuotasForEditOperationCompleted == null)) {
                this.GetPackageQuotasForEditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageQuotasForEditOperationCompleted);
            }
            this.InvokeAsync("GetPackageQuotasForEdit", new object[] {
                        packageId}, this.GetPackageQuotasForEditOperationCompleted, userState);
        }
        
        private void OnGetPackageQuotasForEditOperationCompleted(object arg) {
            if ((this.GetPackageQuotasForEditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageQuotasForEditCompleted(this, new GetPackageQuotasForEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult AddPackage(int userId, int planId, string packageName, string packageComments, int statusId, System.DateTime purchaseDate) {
            object[] results = this.Invoke("AddPackage", new object[] {
                        userId,
                        planId,
                        packageName,
                        packageComments,
                        statusId,
                        purchaseDate});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPackage(int userId, int planId, string packageName, string packageComments, int statusId, System.DateTime purchaseDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPackage", new object[] {
                        userId,
                        planId,
                        packageName,
                        packageComments,
                        statusId,
                        purchaseDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndAddPackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddPackageAsync(int userId, int planId, string packageName, string packageComments, int statusId, System.DateTime purchaseDate) {
            this.AddPackageAsync(userId, planId, packageName, packageComments, statusId, purchaseDate, null);
        }
        
        /// <remarks/>
        public void AddPackageAsync(int userId, int planId, string packageName, string packageComments, int statusId, System.DateTime purchaseDate, object userState) {
            if ((this.AddPackageOperationCompleted == null)) {
                this.AddPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPackageOperationCompleted);
            }
            this.InvokeAsync("AddPackage", new object[] {
                        userId,
                        planId,
                        packageName,
                        packageComments,
                        statusId,
                        purchaseDate}, this.AddPackageOperationCompleted, userState);
        }
        
        private void OnAddPackageOperationCompleted(object arg) {
            if ((this.AddPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPackageCompleted(this, new AddPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult UpdatePackage(PackageInfo package) {
            object[] results = this.Invoke("UpdatePackage", new object[] {
                        package});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePackage(PackageInfo package, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePackage", new object[] {
                        package}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndUpdatePackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageAsync(PackageInfo package) {
            this.UpdatePackageAsync(package, null);
        }
        
        /// <remarks/>
        public void UpdatePackageAsync(PackageInfo package, object userState) {
            if ((this.UpdatePackageOperationCompleted == null)) {
                this.UpdatePackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageOperationCompleted);
            }
            this.InvokeAsync("UpdatePackage", new object[] {
                        package}, this.UpdatePackageOperationCompleted, userState);
        }
        
        private void OnUpdatePackageOperationCompleted(object arg) {
            if ((this.UpdatePackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageCompleted(this, new UpdatePackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePackageLiteral", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult UpdatePackageLiteral(int packageId, int statusId, int planId, System.DateTime purchaseDate, string packageName, string packageComments) {
            object[] results = this.Invoke("UpdatePackageLiteral", new object[] {
                        packageId,
                        statusId,
                        planId,
                        purchaseDate,
                        packageName,
                        packageComments});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePackageLiteral(int packageId, int statusId, int planId, System.DateTime purchaseDate, string packageName, string packageComments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePackageLiteral", new object[] {
                        packageId,
                        statusId,
                        planId,
                        purchaseDate,
                        packageName,
                        packageComments}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndUpdatePackageLiteral(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageLiteralAsync(int packageId, int statusId, int planId, System.DateTime purchaseDate, string packageName, string packageComments) {
            this.UpdatePackageLiteralAsync(packageId, statusId, planId, purchaseDate, packageName, packageComments, null);
        }
        
        /// <remarks/>
        public void UpdatePackageLiteralAsync(int packageId, int statusId, int planId, System.DateTime purchaseDate, string packageName, string packageComments, object userState) {
            if ((this.UpdatePackageLiteralOperationCompleted == null)) {
                this.UpdatePackageLiteralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageLiteralOperationCompleted);
            }
            this.InvokeAsync("UpdatePackageLiteral", new object[] {
                        packageId,
                        statusId,
                        planId,
                        purchaseDate,
                        packageName,
                        packageComments}, this.UpdatePackageLiteralOperationCompleted, userState);
        }
        
        private void OnUpdatePackageLiteralOperationCompleted(object arg) {
            if ((this.UpdatePackageLiteralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageLiteralCompleted(this, new UpdatePackageLiteralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePackageName", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdatePackageName(int packageId, string packageName, string packageComments) {
            object[] results = this.Invoke("UpdatePackageName", new object[] {
                        packageId,
                        packageName,
                        packageComments});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePackageName(int packageId, string packageName, string packageComments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePackageName", new object[] {
                        packageId,
                        packageName,
                        packageComments}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdatePackageName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageNameAsync(int packageId, string packageName, string packageComments) {
            this.UpdatePackageNameAsync(packageId, packageName, packageComments, null);
        }
        
        /// <remarks/>
        public void UpdatePackageNameAsync(int packageId, string packageName, string packageComments, object userState) {
            if ((this.UpdatePackageNameOperationCompleted == null)) {
                this.UpdatePackageNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageNameOperationCompleted);
            }
            this.InvokeAsync("UpdatePackageName", new object[] {
                        packageId,
                        packageName,
                        packageComments}, this.UpdatePackageNameOperationCompleted, userState);
        }
        
        private void OnUpdatePackageNameOperationCompleted(object arg) {
            if ((this.UpdatePackageNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageNameCompleted(this, new UpdatePackageNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeletePackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeletePackage(int packageId) {
            object[] results = this.Invoke("DeletePackage", new object[] {
                        packageId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePackage(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePackage", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeletePackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePackageAsync(int packageId) {
            this.DeletePackageAsync(packageId, null);
        }
        
        /// <remarks/>
        public void DeletePackageAsync(int packageId, object userState) {
            if ((this.DeletePackageOperationCompleted == null)) {
                this.DeletePackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePackageOperationCompleted);
            }
            this.InvokeAsync("DeletePackage", new object[] {
                        packageId}, this.DeletePackageOperationCompleted, userState);
        }
        
        private void OnDeletePackageOperationCompleted(object arg) {
            if ((this.DeletePackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePackageCompleted(this, new DeletePackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/ChangePackageStatus", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangePackageStatus(int packageId, PackageStatus status) {
            object[] results = this.Invoke("ChangePackageStatus", new object[] {
                        packageId,
                        status});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangePackageStatus(int packageId, PackageStatus status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangePackageStatus", new object[] {
                        packageId,
                        status}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndChangePackageStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePackageStatusAsync(int packageId, PackageStatus status) {
            this.ChangePackageStatusAsync(packageId, status, null);
        }
        
        /// <remarks/>
        public void ChangePackageStatusAsync(int packageId, PackageStatus status, object userState) {
            if ((this.ChangePackageStatusOperationCompleted == null)) {
                this.ChangePackageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePackageStatusOperationCompleted);
            }
            this.InvokeAsync("ChangePackageStatus", new object[] {
                        packageId,
                        status}, this.ChangePackageStatusOperationCompleted, userState);
        }
        
        private void OnChangePackageStatusOperationCompleted(object arg) {
            if ((this.ChangePackageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePackageStatusCompleted(this, new ChangePackageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/EvaluateUserPackageTempate", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EvaluateUserPackageTempate(int userId, int packageId, string template) {
            object[] results = this.Invoke("EvaluateUserPackageTempate", new object[] {
                        userId,
                        packageId,
                        template});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEvaluateUserPackageTempate(int userId, int packageId, string template, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EvaluateUserPackageTempate", new object[] {
                        userId,
                        packageId,
                        template}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEvaluateUserPackageTempate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EvaluateUserPackageTempateAsync(int userId, int packageId, string template) {
            this.EvaluateUserPackageTempateAsync(userId, packageId, template, null);
        }
        
        /// <remarks/>
        public void EvaluateUserPackageTempateAsync(int userId, int packageId, string template, object userState) {
            if ((this.EvaluateUserPackageTempateOperationCompleted == null)) {
                this.EvaluateUserPackageTempateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEvaluateUserPackageTempateOperationCompleted);
            }
            this.InvokeAsync("EvaluateUserPackageTempate", new object[] {
                        userId,
                        packageId,
                        template}, this.EvaluateUserPackageTempateOperationCompleted, userState);
        }
        
        private void OnEvaluateUserPackageTempateOperationCompleted(object arg) {
            if ((this.EvaluateUserPackageTempateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EvaluateUserPackageTempateCompleted(this, new EvaluateUserPackageTempateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageSettings GetPackageSettings(int packageId, string settingsName) {
            object[] results = this.Invoke("GetPackageSettings", new object[] {
                        packageId,
                        settingsName});
            return ((PackageSettings)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageSettings(int packageId, string settingsName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageSettings", new object[] {
                        packageId,
                        settingsName}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageSettings EndGetPackageSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageSettingsAsync(int packageId, string settingsName) {
            this.GetPackageSettingsAsync(packageId, settingsName, null);
        }
        
        /// <remarks/>
        public void GetPackageSettingsAsync(int packageId, string settingsName, object userState) {
            if ((this.GetPackageSettingsOperationCompleted == null)) {
                this.GetPackageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageSettingsOperationCompleted);
            }
            this.InvokeAsync("GetPackageSettings", new object[] {
                        packageId,
                        settingsName}, this.GetPackageSettingsOperationCompleted, userState);
        }
        
        private void OnGetPackageSettingsOperationCompleted(object arg) {
            if ((this.GetPackageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageSettingsCompleted(this, new GetPackageSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePackageSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdatePackageSettings(PackageSettings settings) {
            object[] results = this.Invoke("UpdatePackageSettings", new object[] {
                        settings});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePackageSettings(PackageSettings settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePackageSettings", new object[] {
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdatePackageSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageSettingsAsync(PackageSettings settings) {
            this.UpdatePackageSettingsAsync(settings, null);
        }
        
        /// <remarks/>
        public void UpdatePackageSettingsAsync(PackageSettings settings, object userState) {
            if ((this.UpdatePackageSettingsOperationCompleted == null)) {
                this.UpdatePackageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdatePackageSettings", new object[] {
                        settings}, this.UpdatePackageSettingsOperationCompleted, userState);
        }
        
        private void OnUpdatePackageSettingsOperationCompleted(object arg) {
            if ((this.UpdatePackageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageSettingsCompleted(this, new UpdatePackageSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetDefaultTopPackage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDefaultTopPackage(int userId, int packageId) {
            object[] results = this.Invoke("SetDefaultTopPackage", new object[] {
                        userId,
                        packageId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDefaultTopPackage(int userId, int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDefaultTopPackage", new object[] {
                        userId,
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetDefaultTopPackage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultTopPackageAsync(int userId, int packageId) {
            this.SetDefaultTopPackageAsync(userId, packageId, null);
        }
        
        /// <remarks/>
        public void SetDefaultTopPackageAsync(int userId, int packageId, object userState) {
            if ((this.SetDefaultTopPackageOperationCompleted == null)) {
                this.SetDefaultTopPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultTopPackageOperationCompleted);
            }
            this.InvokeAsync("SetDefaultTopPackage", new object[] {
                        userId,
                        packageId}, this.SetDefaultTopPackageOperationCompleted, userState);
        }
        
        private void OnSetDefaultTopPackageOperationCompleted(object arg) {
            if ((this.SetDefaultTopPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultTopPackageCompleted(this, new SetDefaultTopPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageAddons", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackageAddons(int packageId) {
            object[] results = this.Invoke("GetPackageAddons", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageAddons(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageAddons", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackageAddons(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageAddonsAsync(int packageId) {
            this.GetPackageAddonsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageAddonsAsync(int packageId, object userState) {
            if ((this.GetPackageAddonsOperationCompleted == null)) {
                this.GetPackageAddonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageAddonsOperationCompleted);
            }
            this.InvokeAsync("GetPackageAddons", new object[] {
                        packageId}, this.GetPackageAddonsOperationCompleted, userState);
        }
        
        private void OnGetPackageAddonsOperationCompleted(object arg) {
            if ((this.GetPackageAddonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageAddonsCompleted(this, new GetPackageAddonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageAddon", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageAddonInfo GetPackageAddon(int packageAddonId) {
            object[] results = this.Invoke("GetPackageAddon", new object[] {
                        packageAddonId});
            return ((PackageAddonInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageAddon(int packageAddonId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageAddon", new object[] {
                        packageAddonId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageAddonInfo EndGetPackageAddon(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageAddonInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageAddonAsync(int packageAddonId) {
            this.GetPackageAddonAsync(packageAddonId, null);
        }
        
        /// <remarks/>
        public void GetPackageAddonAsync(int packageAddonId, object userState) {
            if ((this.GetPackageAddonOperationCompleted == null)) {
                this.GetPackageAddonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageAddonOperationCompleted);
            }
            this.InvokeAsync("GetPackageAddon", new object[] {
                        packageAddonId}, this.GetPackageAddonOperationCompleted, userState);
        }
        
        private void OnGetPackageAddonOperationCompleted(object arg) {
            if ((this.GetPackageAddonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageAddonCompleted(this, new GetPackageAddonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPackageAddonById", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult AddPackageAddonById(int packageId, int addonPlanId, int quantity) {
            object[] results = this.Invoke("AddPackageAddonById", new object[] {
                        packageId,
                        addonPlanId,
                        quantity});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPackageAddonById(int packageId, int addonPlanId, int quantity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPackageAddonById", new object[] {
                        packageId,
                        addonPlanId,
                        quantity}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndAddPackageAddonById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddPackageAddonByIdAsync(int packageId, int addonPlanId, int quantity) {
            this.AddPackageAddonByIdAsync(packageId, addonPlanId, quantity, null);
        }
        
        /// <remarks/>
        public void AddPackageAddonByIdAsync(int packageId, int addonPlanId, int quantity, object userState) {
            if ((this.AddPackageAddonByIdOperationCompleted == null)) {
                this.AddPackageAddonByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPackageAddonByIdOperationCompleted);
            }
            this.InvokeAsync("AddPackageAddonById", new object[] {
                        packageId,
                        addonPlanId,
                        quantity}, this.AddPackageAddonByIdOperationCompleted, userState);
        }
        
        private void OnAddPackageAddonByIdOperationCompleted(object arg) {
            if ((this.AddPackageAddonByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPackageAddonByIdCompleted(this, new AddPackageAddonByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPackageAddon", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult AddPackageAddon(PackageAddonInfo addon) {
            object[] results = this.Invoke("AddPackageAddon", new object[] {
                        addon});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPackageAddon(PackageAddonInfo addon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPackageAddon", new object[] {
                        addon}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndAddPackageAddon(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddPackageAddonAsync(PackageAddonInfo addon) {
            this.AddPackageAddonAsync(addon, null);
        }
        
        /// <remarks/>
        public void AddPackageAddonAsync(PackageAddonInfo addon, object userState) {
            if ((this.AddPackageAddonOperationCompleted == null)) {
                this.AddPackageAddonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPackageAddonOperationCompleted);
            }
            this.InvokeAsync("AddPackageAddon", new object[] {
                        addon}, this.AddPackageAddonOperationCompleted, userState);
        }
        
        private void OnAddPackageAddonOperationCompleted(object arg) {
            if ((this.AddPackageAddonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPackageAddonCompleted(this, new AddPackageAddonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPackageAddonLiteral", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult AddPackageAddonLiteral(int packageId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments) {
            object[] results = this.Invoke("AddPackageAddonLiteral", new object[] {
                        packageId,
                        planId,
                        quantity,
                        statusId,
                        purchaseDate,
                        comments});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPackageAddonLiteral(int packageId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPackageAddonLiteral", new object[] {
                        packageId,
                        planId,
                        quantity,
                        statusId,
                        purchaseDate,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndAddPackageAddonLiteral(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddPackageAddonLiteralAsync(int packageId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments) {
            this.AddPackageAddonLiteralAsync(packageId, planId, quantity, statusId, purchaseDate, comments, null);
        }
        
        /// <remarks/>
        public void AddPackageAddonLiteralAsync(int packageId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments, object userState) {
            if ((this.AddPackageAddonLiteralOperationCompleted == null)) {
                this.AddPackageAddonLiteralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPackageAddonLiteralOperationCompleted);
            }
            this.InvokeAsync("AddPackageAddonLiteral", new object[] {
                        packageId,
                        planId,
                        quantity,
                        statusId,
                        purchaseDate,
                        comments}, this.AddPackageAddonLiteralOperationCompleted, userState);
        }
        
        private void OnAddPackageAddonLiteralOperationCompleted(object arg) {
            if ((this.AddPackageAddonLiteralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPackageAddonLiteralCompleted(this, new AddPackageAddonLiteralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePackageAddon", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult UpdatePackageAddon(PackageAddonInfo addon) {
            object[] results = this.Invoke("UpdatePackageAddon", new object[] {
                        addon});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePackageAddon(PackageAddonInfo addon, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePackageAddon", new object[] {
                        addon}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndUpdatePackageAddon(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageAddonAsync(PackageAddonInfo addon) {
            this.UpdatePackageAddonAsync(addon, null);
        }
        
        /// <remarks/>
        public void UpdatePackageAddonAsync(PackageAddonInfo addon, object userState) {
            if ((this.UpdatePackageAddonOperationCompleted == null)) {
                this.UpdatePackageAddonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageAddonOperationCompleted);
            }
            this.InvokeAsync("UpdatePackageAddon", new object[] {
                        addon}, this.UpdatePackageAddonOperationCompleted, userState);
        }
        
        private void OnUpdatePackageAddonOperationCompleted(object arg) {
            if ((this.UpdatePackageAddonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageAddonCompleted(this, new UpdatePackageAddonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdatePackageAddonLiteral", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult UpdatePackageAddonLiteral(int packageAddonId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments) {
            object[] results = this.Invoke("UpdatePackageAddonLiteral", new object[] {
                        packageAddonId,
                        planId,
                        quantity,
                        statusId,
                        purchaseDate,
                        comments});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePackageAddonLiteral(int packageAddonId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePackageAddonLiteral", new object[] {
                        packageAddonId,
                        planId,
                        quantity,
                        statusId,
                        purchaseDate,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndUpdatePackageAddonLiteral(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageAddonLiteralAsync(int packageAddonId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments) {
            this.UpdatePackageAddonLiteralAsync(packageAddonId, planId, quantity, statusId, purchaseDate, comments, null);
        }
        
        /// <remarks/>
        public void UpdatePackageAddonLiteralAsync(int packageAddonId, int planId, int quantity, int statusId, System.DateTime purchaseDate, string comments, object userState) {
            if ((this.UpdatePackageAddonLiteralOperationCompleted == null)) {
                this.UpdatePackageAddonLiteralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageAddonLiteralOperationCompleted);
            }
            this.InvokeAsync("UpdatePackageAddonLiteral", new object[] {
                        packageAddonId,
                        planId,
                        quantity,
                        statusId,
                        purchaseDate,
                        comments}, this.UpdatePackageAddonLiteralOperationCompleted, userState);
        }
        
        private void OnUpdatePackageAddonLiteralOperationCompleted(object arg) {
            if ((this.UpdatePackageAddonLiteralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageAddonLiteralCompleted(this, new UpdatePackageAddonLiteralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeletePackageAddon", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeletePackageAddon(int packageAddonId) {
            object[] results = this.Invoke("DeletePackageAddon", new object[] {
                        packageAddonId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePackageAddon(int packageAddonId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePackageAddon", new object[] {
                        packageAddonId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeletePackageAddon(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePackageAddonAsync(int packageAddonId) {
            this.DeletePackageAddonAsync(packageAddonId, null);
        }
        
        /// <remarks/>
        public void DeletePackageAddonAsync(int packageAddonId, object userState) {
            if ((this.DeletePackageAddonOperationCompleted == null)) {
                this.DeletePackageAddonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePackageAddonOperationCompleted);
            }
            this.InvokeAsync("DeletePackageAddon", new object[] {
                        packageAddonId}, this.DeletePackageAddonOperationCompleted, userState);
        }
        
        private void OnDeletePackageAddonOperationCompleted(object arg) {
            if ((this.DeletePackageAddonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePackageAddonCompleted(this, new DeletePackageAddonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSearchableServiceItemTypes", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSearchableServiceItemTypes() {
            object[] results = this.Invoke("GetSearchableServiceItemTypes", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSearchableServiceItemTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSearchableServiceItemTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetSearchableServiceItemTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSearchableServiceItemTypesAsync() {
            this.GetSearchableServiceItemTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetSearchableServiceItemTypesAsync(object userState) {
            if ((this.GetSearchableServiceItemTypesOperationCompleted == null)) {
                this.GetSearchableServiceItemTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSearchableServiceItemTypesOperationCompleted);
            }
            this.InvokeAsync("GetSearchableServiceItemTypes", new object[0], this.GetSearchableServiceItemTypesOperationCompleted, userState);
        }
        
        private void OnGetSearchableServiceItemTypesOperationCompleted(object arg) {
            if ((this.GetSearchableServiceItemTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSearchableServiceItemTypesCompleted(this, new GetSearchableServiceItemTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawPackageItemsByType", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawPackageItemsByType(int packageId, string itemTypeName, bool recursive) {
            object[] results = this.Invoke("GetRawPackageItemsByType", new object[] {
                        packageId,
                        itemTypeName,
                        recursive});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawPackageItemsByType(int packageId, string itemTypeName, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawPackageItemsByType", new object[] {
                        packageId,
                        itemTypeName,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawPackageItemsByType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawPackageItemsByTypeAsync(int packageId, string itemTypeName, bool recursive) {
            this.GetRawPackageItemsByTypeAsync(packageId, itemTypeName, recursive, null);
        }
        
        /// <remarks/>
        public void GetRawPackageItemsByTypeAsync(int packageId, string itemTypeName, bool recursive, object userState) {
            if ((this.GetRawPackageItemsByTypeOperationCompleted == null)) {
                this.GetRawPackageItemsByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawPackageItemsByTypeOperationCompleted);
            }
            this.InvokeAsync("GetRawPackageItemsByType", new object[] {
                        packageId,
                        itemTypeName,
                        recursive}, this.GetRawPackageItemsByTypeOperationCompleted, userState);
        }
        
        private void OnGetRawPackageItemsByTypeOperationCompleted(object arg) {
            if ((this.GetRawPackageItemsByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawPackageItemsByTypeCompleted(this, new GetRawPackageItemsByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawPackageItemsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawPackageItemsPaged(int packageId, string groupName, string typeName, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetRawPackageItemsPaged", new object[] {
                        packageId,
                        groupName,
                        typeName,
                        serverId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawPackageItemsPaged(int packageId, string groupName, string typeName, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawPackageItemsPaged", new object[] {
                        packageId,
                        groupName,
                        typeName,
                        serverId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawPackageItemsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawPackageItemsPagedAsync(int packageId, string groupName, string typeName, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetRawPackageItemsPagedAsync(packageId, groupName, typeName, serverId, recursive, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetRawPackageItemsPagedAsync(int packageId, string groupName, string typeName, int serverId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetRawPackageItemsPagedOperationCompleted == null)) {
                this.GetRawPackageItemsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawPackageItemsPagedOperationCompleted);
            }
            this.InvokeAsync("GetRawPackageItemsPaged", new object[] {
                        packageId,
                        groupName,
                        typeName,
                        serverId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawPackageItemsPagedOperationCompleted, userState);
        }
        
        private void OnGetRawPackageItemsPagedOperationCompleted(object arg) {
            if ((this.GetRawPackageItemsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawPackageItemsPagedCompleted(this, new GetRawPackageItemsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetRawPackageItems", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawPackageItems(int packageId) {
            object[] results = this.Invoke("GetRawPackageItems", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawPackageItems(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawPackageItems", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawPackageItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawPackageItemsAsync(int packageId) {
            this.GetRawPackageItemsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetRawPackageItemsAsync(int packageId, object userState) {
            if ((this.GetRawPackageItemsOperationCompleted == null)) {
                this.GetRawPackageItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawPackageItemsOperationCompleted);
            }
            this.InvokeAsync("GetRawPackageItems", new object[] {
                        packageId}, this.GetRawPackageItemsOperationCompleted, userState);
        }
        
        private void OnGetRawPackageItemsOperationCompleted(object arg) {
            if ((this.GetRawPackageItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawPackageItemsCompleted(this, new GetRawPackageItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DetachPackageItem", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DetachPackageItem(int itemId) {
            object[] results = this.Invoke("DetachPackageItem", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDetachPackageItem(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DetachPackageItem", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDetachPackageItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DetachPackageItemAsync(int itemId) {
            this.DetachPackageItemAsync(itemId, null);
        }
        
        /// <remarks/>
        public void DetachPackageItemAsync(int itemId, object userState) {
            if ((this.DetachPackageItemOperationCompleted == null)) {
                this.DetachPackageItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDetachPackageItemOperationCompleted);
            }
            this.InvokeAsync("DetachPackageItem", new object[] {
                        itemId}, this.DetachPackageItemOperationCompleted, userState);
        }
        
        private void OnDetachPackageItemOperationCompleted(object arg) {
            if ((this.DetachPackageItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DetachPackageItemCompleted(this, new DetachPackageItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/MovePackageItem", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MovePackageItem(int itemId, int destinationServiceId) {
            object[] results = this.Invoke("MovePackageItem", new object[] {
                        itemId,
                        destinationServiceId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMovePackageItem(int itemId, int destinationServiceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MovePackageItem", new object[] {
                        itemId,
                        destinationServiceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndMovePackageItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MovePackageItemAsync(int itemId, int destinationServiceId) {
            this.MovePackageItemAsync(itemId, destinationServiceId, null);
        }
        
        /// <remarks/>
        public void MovePackageItemAsync(int itemId, int destinationServiceId, object userState) {
            if ((this.MovePackageItemOperationCompleted == null)) {
                this.MovePackageItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMovePackageItemOperationCompleted);
            }
            this.InvokeAsync("MovePackageItem", new object[] {
                        itemId,
                        destinationServiceId}, this.MovePackageItemOperationCompleted, userState);
        }
        
        private void OnMovePackageItemOperationCompleted(object arg) {
            if ((this.MovePackageItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MovePackageItemCompleted(this, new MovePackageItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageQuota", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QuotaValueInfo GetPackageQuota(int packageId, string quotaName) {
            object[] results = this.Invoke("GetPackageQuota", new object[] {
                        packageId,
                        quotaName});
            return ((QuotaValueInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageQuota(int packageId, string quotaName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageQuota", new object[] {
                        packageId,
                        quotaName}, callback, asyncState);
        }
        
        /// <remarks/>
        public QuotaValueInfo EndGetPackageQuota(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QuotaValueInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageQuotaAsync(int packageId, string quotaName) {
            this.GetPackageQuotaAsync(packageId, quotaName, null);
        }
        
        /// <remarks/>
        public void GetPackageQuotaAsync(int packageId, string quotaName, object userState) {
            if ((this.GetPackageQuotaOperationCompleted == null)) {
                this.GetPackageQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageQuotaOperationCompleted);
            }
            this.InvokeAsync("GetPackageQuota", new object[] {
                        packageId,
                        quotaName}, this.GetPackageQuotaOperationCompleted, userState);
        }
        
        private void OnGetPackageQuotaOperationCompleted(object arg) {
            if ((this.GetPackageQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageQuotaCompleted(this, new GetPackageQuotaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SendAccountSummaryLetter", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendAccountSummaryLetter(int userId, string to, string cc) {
            object[] results = this.Invoke("SendAccountSummaryLetter", new object[] {
                        userId,
                        to,
                        cc});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendAccountSummaryLetter(int userId, string to, string cc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendAccountSummaryLetter", new object[] {
                        userId,
                        to,
                        cc}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSendAccountSummaryLetter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendAccountSummaryLetterAsync(int userId, string to, string cc) {
            this.SendAccountSummaryLetterAsync(userId, to, cc, null);
        }
        
        /// <remarks/>
        public void SendAccountSummaryLetterAsync(int userId, string to, string cc, object userState) {
            if ((this.SendAccountSummaryLetterOperationCompleted == null)) {
                this.SendAccountSummaryLetterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAccountSummaryLetterOperationCompleted);
            }
            this.InvokeAsync("SendAccountSummaryLetter", new object[] {
                        userId,
                        to,
                        cc}, this.SendAccountSummaryLetterOperationCompleted, userState);
        }
        
        private void OnSendAccountSummaryLetterOperationCompleted(object arg) {
            if ((this.SendAccountSummaryLetterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAccountSummaryLetterCompleted(this, new SendAccountSummaryLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SendPackageSummaryLetter", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendPackageSummaryLetter(int packageId, string to, string cc) {
            object[] results = this.Invoke("SendPackageSummaryLetter", new object[] {
                        packageId,
                        to,
                        cc});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendPackageSummaryLetter(int packageId, string to, string cc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendPackageSummaryLetter", new object[] {
                        packageId,
                        to,
                        cc}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSendPackageSummaryLetter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendPackageSummaryLetterAsync(int packageId, string to, string cc) {
            this.SendPackageSummaryLetterAsync(packageId, to, cc, null);
        }
        
        /// <remarks/>
        public void SendPackageSummaryLetterAsync(int packageId, string to, string cc, object userState) {
            if ((this.SendPackageSummaryLetterOperationCompleted == null)) {
                this.SendPackageSummaryLetterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPackageSummaryLetterOperationCompleted);
            }
            this.InvokeAsync("SendPackageSummaryLetter", new object[] {
                        packageId,
                        to,
                        cc}, this.SendPackageSummaryLetterOperationCompleted, userState);
        }
        
        private void OnSendPackageSummaryLetterOperationCompleted(object arg) {
            if ((this.SendPackageSummaryLetterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPackageSummaryLetterCompleted(this, new SendPackageSummaryLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEvaluatedPackageTemplateBody", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEvaluatedPackageTemplateBody(int packageId) {
            object[] results = this.Invoke("GetEvaluatedPackageTemplateBody", new object[] {
                        packageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEvaluatedPackageTemplateBody(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEvaluatedPackageTemplateBody", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetEvaluatedPackageTemplateBody(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEvaluatedPackageTemplateBodyAsync(int packageId) {
            this.GetEvaluatedPackageTemplateBodyAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetEvaluatedPackageTemplateBodyAsync(int packageId, object userState) {
            if ((this.GetEvaluatedPackageTemplateBodyOperationCompleted == null)) {
                this.GetEvaluatedPackageTemplateBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEvaluatedPackageTemplateBodyOperationCompleted);
            }
            this.InvokeAsync("GetEvaluatedPackageTemplateBody", new object[] {
                        packageId}, this.GetEvaluatedPackageTemplateBodyOperationCompleted, userState);
        }
        
        private void OnGetEvaluatedPackageTemplateBodyOperationCompleted(object arg) {
            if ((this.GetEvaluatedPackageTemplateBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEvaluatedPackageTemplateBodyCompleted(this, new GetEvaluatedPackageTemplateBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEvaluatedAccountTemplateBody", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEvaluatedAccountTemplateBody(int userId) {
            object[] results = this.Invoke("GetEvaluatedAccountTemplateBody", new object[] {
                        userId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEvaluatedAccountTemplateBody(int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEvaluatedAccountTemplateBody", new object[] {
                        userId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetEvaluatedAccountTemplateBody(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEvaluatedAccountTemplateBodyAsync(int userId) {
            this.GetEvaluatedAccountTemplateBodyAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetEvaluatedAccountTemplateBodyAsync(int userId, object userState) {
            if ((this.GetEvaluatedAccountTemplateBodyOperationCompleted == null)) {
                this.GetEvaluatedAccountTemplateBodyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEvaluatedAccountTemplateBodyOperationCompleted);
            }
            this.InvokeAsync("GetEvaluatedAccountTemplateBody", new object[] {
                        userId}, this.GetEvaluatedAccountTemplateBodyOperationCompleted, userState);
        }
        
        private void OnGetEvaluatedAccountTemplateBodyOperationCompleted(object arg) {
            if ((this.GetEvaluatedAccountTemplateBodyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEvaluatedAccountTemplateBodyCompleted(this, new GetEvaluatedAccountTemplateBodyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddPackageWithResources", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageResult AddPackageWithResources(int userId, int planId, string spaceName, int statusId, bool sendLetter, bool createResources, string domainName, bool tempDomain, bool createWebSite, bool createFtpAccount, string ftpAccountName, bool createMailAccount, string hostName) {
            object[] results = this.Invoke("AddPackageWithResources", new object[] {
                        userId,
                        planId,
                        spaceName,
                        statusId,
                        sendLetter,
                        createResources,
                        domainName,
                        tempDomain,
                        createWebSite,
                        createFtpAccount,
                        ftpAccountName,
                        createMailAccount,
                        hostName});
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPackageWithResources(int userId, int planId, string spaceName, int statusId, bool sendLetter, bool createResources, string domainName, bool tempDomain, bool createWebSite, bool createFtpAccount, string ftpAccountName, bool createMailAccount, string hostName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPackageWithResources", new object[] {
                        userId,
                        planId,
                        spaceName,
                        statusId,
                        sendLetter,
                        createResources,
                        domainName,
                        tempDomain,
                        createWebSite,
                        createFtpAccount,
                        ftpAccountName,
                        createMailAccount,
                        hostName}, callback, asyncState);
        }
        
        /// <remarks/>
        public PackageResult EndAddPackageWithResources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PackageResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddPackageWithResourcesAsync(int userId, int planId, string spaceName, int statusId, bool sendLetter, bool createResources, string domainName, bool tempDomain, bool createWebSite, bool createFtpAccount, string ftpAccountName, bool createMailAccount, string hostName) {
            this.AddPackageWithResourcesAsync(userId, planId, spaceName, statusId, sendLetter, createResources, domainName, tempDomain, createWebSite, createFtpAccount, ftpAccountName, createMailAccount, hostName, null);
        }
        
        /// <remarks/>
        public void AddPackageWithResourcesAsync(int userId, int planId, string spaceName, int statusId, bool sendLetter, bool createResources, string domainName, bool tempDomain, bool createWebSite, bool createFtpAccount, string ftpAccountName, bool createMailAccount, string hostName, object userState) {
            if ((this.AddPackageWithResourcesOperationCompleted == null)) {
                this.AddPackageWithResourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPackageWithResourcesOperationCompleted);
            }
            this.InvokeAsync("AddPackageWithResources", new object[] {
                        userId,
                        planId,
                        spaceName,
                        statusId,
                        sendLetter,
                        createResources,
                        domainName,
                        tempDomain,
                        createWebSite,
                        createFtpAccount,
                        ftpAccountName,
                        createMailAccount,
                        hostName}, this.AddPackageWithResourcesOperationCompleted, userState);
        }
        
        private void OnAddPackageWithResourcesOperationCompleted(object arg) {
            if ((this.AddPackageWithResourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPackageWithResourcesCompleted(this, new AddPackageWithResourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateUserWizard", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateUserWizard(
                    int parentPackageId, 
                    string username, 
                    string password, 
                    int roleId, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string secondaryEmail, 
                    bool htmlMail, 
                    bool sendAccountLetter, 
                    bool createPackage, 
                    int planId, 
                    bool sendPackageLetter, 
                    string domainName, 
                    bool tempDomain, 
                    bool createWebSite, 
                    bool createFtpAccount, 
                    string ftpAccountName, 
                    bool createMailAccount, 
                    string hostName, 
                    bool createZoneRecord) {
            object[] results = this.Invoke("CreateUserWizard", new object[] {
                        parentPackageId,
                        username,
                        password,
                        roleId,
                        firstName,
                        lastName,
                        email,
                        secondaryEmail,
                        htmlMail,
                        sendAccountLetter,
                        createPackage,
                        planId,
                        sendPackageLetter,
                        domainName,
                        tempDomain,
                        createWebSite,
                        createFtpAccount,
                        ftpAccountName,
                        createMailAccount,
                        hostName,
                        createZoneRecord});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateUserWizard(
                    int parentPackageId, 
                    string username, 
                    string password, 
                    int roleId, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string secondaryEmail, 
                    bool htmlMail, 
                    bool sendAccountLetter, 
                    bool createPackage, 
                    int planId, 
                    bool sendPackageLetter, 
                    string domainName, 
                    bool tempDomain, 
                    bool createWebSite, 
                    bool createFtpAccount, 
                    string ftpAccountName, 
                    bool createMailAccount, 
                    string hostName, 
                    bool createZoneRecord, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("CreateUserWizard", new object[] {
                        parentPackageId,
                        username,
                        password,
                        roleId,
                        firstName,
                        lastName,
                        email,
                        secondaryEmail,
                        htmlMail,
                        sendAccountLetter,
                        createPackage,
                        planId,
                        sendPackageLetter,
                        domainName,
                        tempDomain,
                        createWebSite,
                        createFtpAccount,
                        ftpAccountName,
                        createMailAccount,
                        hostName,
                        createZoneRecord}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCreateUserWizard(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserWizardAsync(
                    int parentPackageId, 
                    string username, 
                    string password, 
                    int roleId, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string secondaryEmail, 
                    bool htmlMail, 
                    bool sendAccountLetter, 
                    bool createPackage, 
                    int planId, 
                    bool sendPackageLetter, 
                    string domainName, 
                    bool tempDomain, 
                    bool createWebSite, 
                    bool createFtpAccount, 
                    string ftpAccountName, 
                    bool createMailAccount, 
                    string hostName, 
                    bool createZoneRecord) {
            this.CreateUserWizardAsync(parentPackageId, username, password, roleId, firstName, lastName, email, secondaryEmail, htmlMail, sendAccountLetter, createPackage, planId, sendPackageLetter, domainName, tempDomain, createWebSite, createFtpAccount, ftpAccountName, createMailAccount, hostName, createZoneRecord, null);
        }
        
        /// <remarks/>
        public void CreateUserWizardAsync(
                    int parentPackageId, 
                    string username, 
                    string password, 
                    int roleId, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string secondaryEmail, 
                    bool htmlMail, 
                    bool sendAccountLetter, 
                    bool createPackage, 
                    int planId, 
                    bool sendPackageLetter, 
                    string domainName, 
                    bool tempDomain, 
                    bool createWebSite, 
                    bool createFtpAccount, 
                    string ftpAccountName, 
                    bool createMailAccount, 
                    string hostName, 
                    bool createZoneRecord, 
                    object userState) {
            if ((this.CreateUserWizardOperationCompleted == null)) {
                this.CreateUserWizardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserWizardOperationCompleted);
            }
            this.InvokeAsync("CreateUserWizard", new object[] {
                        parentPackageId,
                        username,
                        password,
                        roleId,
                        firstName,
                        lastName,
                        email,
                        secondaryEmail,
                        htmlMail,
                        sendAccountLetter,
                        createPackage,
                        planId,
                        sendPackageLetter,
                        domainName,
                        tempDomain,
                        createWebSite,
                        createFtpAccount,
                        ftpAccountName,
                        createMailAccount,
                        hostName,
                        createZoneRecord}, this.CreateUserWizardOperationCompleted, userState);
        }
        
        private void OnCreateUserWizardOperationCompleted(object arg) {
            if ((this.CreateUserWizardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserWizardCompleted(this, new CreateUserWizardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackagesBandwidthPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackagesBandwidthPaged(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetPackagesBandwidthPaged", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackagesBandwidthPaged(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackagesBandwidthPaged", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackagesBandwidthPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesBandwidthPagedAsync(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, string sortColumn, int startRow, int maximumRows) {
            this.GetPackagesBandwidthPagedAsync(userId, packageId, startDate, endDate, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetPackagesBandwidthPagedAsync(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetPackagesBandwidthPagedOperationCompleted == null)) {
                this.GetPackagesBandwidthPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesBandwidthPagedOperationCompleted);
            }
            this.InvokeAsync("GetPackagesBandwidthPaged", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetPackagesBandwidthPagedOperationCompleted, userState);
        }
        
        private void OnGetPackagesBandwidthPagedOperationCompleted(object arg) {
            if ((this.GetPackagesBandwidthPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesBandwidthPagedCompleted(this, new GetPackagesBandwidthPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackagesDiskspacePaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackagesDiskspacePaged(int userId, int packageId, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetPackagesDiskspacePaged", new object[] {
                        userId,
                        packageId,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackagesDiskspacePaged(int userId, int packageId, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackagesDiskspacePaged", new object[] {
                        userId,
                        packageId,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackagesDiskspacePaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackagesDiskspacePagedAsync(int userId, int packageId, string sortColumn, int startRow, int maximumRows) {
            this.GetPackagesDiskspacePagedAsync(userId, packageId, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetPackagesDiskspacePagedAsync(int userId, int packageId, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetPackagesDiskspacePagedOperationCompleted == null)) {
                this.GetPackagesDiskspacePagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackagesDiskspacePagedOperationCompleted);
            }
            this.InvokeAsync("GetPackagesDiskspacePaged", new object[] {
                        userId,
                        packageId,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetPackagesDiskspacePagedOperationCompleted, userState);
        }
        
        private void OnGetPackagesDiskspacePagedOperationCompleted(object arg) {
            if ((this.GetPackagesDiskspacePagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackagesDiskspacePagedCompleted(this, new GetPackagesDiskspacePagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageBandwidth", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackageBandwidth(int packageId, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetPackageBandwidth", new object[] {
                        packageId,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageBandwidth(int packageId, System.DateTime startDate, System.DateTime endDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageBandwidth", new object[] {
                        packageId,
                        startDate,
                        endDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackageBandwidth(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageBandwidthAsync(int packageId, System.DateTime startDate, System.DateTime endDate) {
            this.GetPackageBandwidthAsync(packageId, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetPackageBandwidthAsync(int packageId, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetPackageBandwidthOperationCompleted == null)) {
                this.GetPackageBandwidthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageBandwidthOperationCompleted);
            }
            this.InvokeAsync("GetPackageBandwidth", new object[] {
                        packageId,
                        startDate,
                        endDate}, this.GetPackageBandwidthOperationCompleted, userState);
        }
        
        private void OnGetPackageBandwidthOperationCompleted(object arg) {
            if ((this.GetPackageBandwidthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageBandwidthCompleted(this, new GetPackageBandwidthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetPackageDiskspace", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPackageDiskspace(int packageId) {
            object[] results = this.Invoke("GetPackageDiskspace", new object[] {
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPackageDiskspace(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPackageDiskspace", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPackageDiskspace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPackageDiskspaceAsync(int packageId) {
            this.GetPackageDiskspaceAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetPackageDiskspaceAsync(int packageId, object userState) {
            if ((this.GetPackageDiskspaceOperationCompleted == null)) {
                this.GetPackageDiskspaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageDiskspaceOperationCompleted);
            }
            this.InvokeAsync("GetPackageDiskspace", new object[] {
                        packageId}, this.GetPackageDiskspaceOperationCompleted, userState);
        }
        
        private void OnGetPackageDiskspaceOperationCompleted(object arg) {
            if ((this.GetPackageDiskspaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackageDiskspaceCompleted(this, new GetPackageDiskspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetOverusageSummaryReport", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOverusageSummaryReport(int userId, int packageId, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetOverusageSummaryReport", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOverusageSummaryReport(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOverusageSummaryReport", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetOverusageSummaryReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOverusageSummaryReportAsync(int userId, int packageId, System.DateTime startDate, System.DateTime endDate) {
            this.GetOverusageSummaryReportAsync(userId, packageId, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetOverusageSummaryReportAsync(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetOverusageSummaryReportOperationCompleted == null)) {
                this.GetOverusageSummaryReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOverusageSummaryReportOperationCompleted);
            }
            this.InvokeAsync("GetOverusageSummaryReport", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate}, this.GetOverusageSummaryReportOperationCompleted, userState);
        }
        
        private void OnGetOverusageSummaryReportOperationCompleted(object arg) {
            if ((this.GetOverusageSummaryReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOverusageSummaryReportCompleted(this, new GetOverusageSummaryReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDiskspaceOverusageDetailsReport", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDiskspaceOverusageDetailsReport(int userId, int packageId) {
            object[] results = this.Invoke("GetDiskspaceOverusageDetailsReport", new object[] {
                        userId,
                        packageId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDiskspaceOverusageDetailsReport(int userId, int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDiskspaceOverusageDetailsReport", new object[] {
                        userId,
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetDiskspaceOverusageDetailsReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiskspaceOverusageDetailsReportAsync(int userId, int packageId) {
            this.GetDiskspaceOverusageDetailsReportAsync(userId, packageId, null);
        }
        
        /// <remarks/>
        public void GetDiskspaceOverusageDetailsReportAsync(int userId, int packageId, object userState) {
            if ((this.GetDiskspaceOverusageDetailsReportOperationCompleted == null)) {
                this.GetDiskspaceOverusageDetailsReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiskspaceOverusageDetailsReportOperationCompleted);
            }
            this.InvokeAsync("GetDiskspaceOverusageDetailsReport", new object[] {
                        userId,
                        packageId}, this.GetDiskspaceOverusageDetailsReportOperationCompleted, userState);
        }
        
        private void OnGetDiskspaceOverusageDetailsReportOperationCompleted(object arg) {
            if ((this.GetDiskspaceOverusageDetailsReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiskspaceOverusageDetailsReportCompleted(this, new GetDiskspaceOverusageDetailsReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetBandwidthOverusageDetailsReport", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBandwidthOverusageDetailsReport(int userId, int packageId, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetBandwidthOverusageDetailsReport", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBandwidthOverusageDetailsReport(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBandwidthOverusageDetailsReport", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetBandwidthOverusageDetailsReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBandwidthOverusageDetailsReportAsync(int userId, int packageId, System.DateTime startDate, System.DateTime endDate) {
            this.GetBandwidthOverusageDetailsReportAsync(userId, packageId, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetBandwidthOverusageDetailsReportAsync(int userId, int packageId, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetBandwidthOverusageDetailsReportOperationCompleted == null)) {
                this.GetBandwidthOverusageDetailsReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBandwidthOverusageDetailsReportOperationCompleted);
            }
            this.InvokeAsync("GetBandwidthOverusageDetailsReport", new object[] {
                        userId,
                        packageId,
                        startDate,
                        endDate}, this.GetBandwidthOverusageDetailsReportOperationCompleted, userState);
        }
        
        private void OnGetBandwidthOverusageDetailsReportOperationCompleted(object arg) {
            if ((this.GetBandwidthOverusageDetailsReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBandwidthOverusageDetailsReportCompleted(this, new GetBandwidthOverusageDetailsReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHostingPlansCompletedEventHandler(object sender, GetHostingPlansCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostingPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostingPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHostingAddonsCompletedEventHandler(object sender, GetHostingAddonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostingAddonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostingAddonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHostingPlanCompletedEventHandler(object sender, GetHostingPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostingPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostingPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HostingPlanInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HostingPlanInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHostingPlanQuotasCompletedEventHandler(object sender, GetHostingPlanQuotasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostingPlanQuotasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostingPlanQuotasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetHostingPlanContextCompletedEventHandler(object sender, GetHostingPlanContextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostingPlanContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostingPlanContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HostingPlanContext Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HostingPlanContext)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserAvailableHostingPlansCompletedEventHandler(object sender, GetUserAvailableHostingPlansCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAvailableHostingPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAvailableHostingPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HostingPlanInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HostingPlanInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserAvailableHostingAddonsCompletedEventHandler(object sender, GetUserAvailableHostingAddonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAvailableHostingAddonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAvailableHostingAddonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HostingPlanInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HostingPlanInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddHostingPlanCompletedEventHandler(object sender, AddHostingPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHostingPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddHostingPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateHostingPlanCompletedEventHandler(object sender, UpdateHostingPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateHostingPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateHostingPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteHostingPlanCompletedEventHandler(object sender, DeleteHostingPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteHostingPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteHostingPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackagesCompletedEventHandler(object sender, GetPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetNestedPackagesSummaryCompletedEventHandler(object sender, GetNestedPackagesSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNestedPackagesSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNestedPackagesSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawPackagesCompletedEventHandler(object sender, GetRawPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SearchServiceItemsPagedCompletedEventHandler(object sender, SearchServiceItemsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchServiceItemsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchServiceItemsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackagesPagedCompletedEventHandler(object sender, GetPackagesPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetNestedPackagesPagedCompletedEventHandler(object sender, GetNestedPackagesPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNestedPackagesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNestedPackagesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackagePackagesCompletedEventHandler(object sender, GetPackagePackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagePackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagePackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMyPackagesCompletedEventHandler(object sender, GetMyPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawMyPackagesCompletedEventHandler(object sender, GetRawMyPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawMyPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawMyPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageCompletedEventHandler(object sender, GetPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageContextCompletedEventHandler(object sender, GetPackageContextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageContext Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageContext)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageQuotasCompletedEventHandler(object sender, GetPackageQuotasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageQuotasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageQuotasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageQuotasForEditCompletedEventHandler(object sender, GetPackageQuotasForEditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageQuotasForEditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageQuotasForEditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPackageCompletedEventHandler(object sender, AddPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePackageCompletedEventHandler(object sender, UpdatePackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePackageLiteralCompletedEventHandler(object sender, UpdatePackageLiteralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageLiteralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageLiteralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePackageNameCompletedEventHandler(object sender, UpdatePackageNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeletePackageCompletedEventHandler(object sender, DeletePackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangePackageStatusCompletedEventHandler(object sender, ChangePackageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePackageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePackageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EvaluateUserPackageTempateCompletedEventHandler(object sender, EvaluateUserPackageTempateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EvaluateUserPackageTempateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EvaluateUserPackageTempateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageSettingsCompletedEventHandler(object sender, GetPackageSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePackageSettingsCompletedEventHandler(object sender, UpdatePackageSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetDefaultTopPackageCompletedEventHandler(object sender, SetDefaultTopPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultTopPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultTopPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageAddonsCompletedEventHandler(object sender, GetPackageAddonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageAddonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageAddonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageAddonCompletedEventHandler(object sender, GetPackageAddonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageAddonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageAddonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageAddonInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageAddonInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPackageAddonByIdCompletedEventHandler(object sender, AddPackageAddonByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPackageAddonByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPackageAddonByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPackageAddonCompletedEventHandler(object sender, AddPackageAddonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPackageAddonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPackageAddonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPackageAddonLiteralCompletedEventHandler(object sender, AddPackageAddonLiteralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPackageAddonLiteralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPackageAddonLiteralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePackageAddonCompletedEventHandler(object sender, UpdatePackageAddonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageAddonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageAddonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdatePackageAddonLiteralCompletedEventHandler(object sender, UpdatePackageAddonLiteralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageAddonLiteralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageAddonLiteralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeletePackageAddonCompletedEventHandler(object sender, DeletePackageAddonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePackageAddonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePackageAddonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSearchableServiceItemTypesCompletedEventHandler(object sender, GetSearchableServiceItemTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSearchableServiceItemTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSearchableServiceItemTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawPackageItemsByTypeCompletedEventHandler(object sender, GetRawPackageItemsByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawPackageItemsByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawPackageItemsByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawPackageItemsPagedCompletedEventHandler(object sender, GetRawPackageItemsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawPackageItemsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawPackageItemsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRawPackageItemsCompletedEventHandler(object sender, GetRawPackageItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawPackageItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawPackageItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DetachPackageItemCompletedEventHandler(object sender, DetachPackageItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DetachPackageItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DetachPackageItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MovePackageItemCompletedEventHandler(object sender, MovePackageItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MovePackageItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MovePackageItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageQuotaCompletedEventHandler(object sender, GetPackageQuotaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageQuotaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageQuotaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QuotaValueInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QuotaValueInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendAccountSummaryLetterCompletedEventHandler(object sender, SendAccountSummaryLetterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAccountSummaryLetterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAccountSummaryLetterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendPackageSummaryLetterCompletedEventHandler(object sender, SendPackageSummaryLetterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendPackageSummaryLetterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPackageSummaryLetterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEvaluatedPackageTemplateBodyCompletedEventHandler(object sender, GetEvaluatedPackageTemplateBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEvaluatedPackageTemplateBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEvaluatedPackageTemplateBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEvaluatedAccountTemplateBodyCompletedEventHandler(object sender, GetEvaluatedAccountTemplateBodyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEvaluatedAccountTemplateBodyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEvaluatedAccountTemplateBodyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddPackageWithResourcesCompletedEventHandler(object sender, AddPackageWithResourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPackageWithResourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPackageWithResourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateUserWizardCompletedEventHandler(object sender, CreateUserWizardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserWizardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserWizardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackagesBandwidthPagedCompletedEventHandler(object sender, GetPackagesBandwidthPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesBandwidthPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesBandwidthPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackagesDiskspacePagedCompletedEventHandler(object sender, GetPackagesDiskspacePagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackagesDiskspacePagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackagesDiskspacePagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageBandwidthCompletedEventHandler(object sender, GetPackageBandwidthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageBandwidthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageBandwidthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPackageDiskspaceCompletedEventHandler(object sender, GetPackageDiskspaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackageDiskspaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackageDiskspaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetOverusageSummaryReportCompletedEventHandler(object sender, GetOverusageSummaryReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOverusageSummaryReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOverusageSummaryReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDiskspaceOverusageDetailsReportCompletedEventHandler(object sender, GetDiskspaceOverusageDetailsReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiskspaceOverusageDetailsReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiskspaceOverusageDetailsReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetBandwidthOverusageDetailsReportCompletedEventHandler(object sender, GetBandwidthOverusageDetailsReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBandwidthOverusageDetailsReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBandwidthOverusageDetailsReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}
