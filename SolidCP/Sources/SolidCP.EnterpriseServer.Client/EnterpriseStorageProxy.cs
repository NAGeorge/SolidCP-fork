//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.7905
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

using SolidCP.EnterpriseServer.Base.HostedSolution;
using SolidCP.Providers;
using SolidCP.Providers.Common;
using SolidCP.Providers.HostedSolution;
using SolidCP.Providers.OS;

namespace SolidCP.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esEnterpriseStorageSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esEnterpriseStorage : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback AddWebDavAccessTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteExpiredWebDavAccessTokensOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebDavAccessTokenByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebDavAccessTokenByAccessTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileServicesInstallationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserRootFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFolderWithExtraDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFolderPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEnterpriseFolderPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchESAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseFoldersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameEnterpriseFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateEnterpriseStorageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckEnterpriseStorageInitializationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUsersDomainExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebDavPortalUserSettingsByAccountIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWebDavPortalUserSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnterpriseStorageServiceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEsFolderShareSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirectoryBrowseEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDirectoryBrowseEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEnterpriseFolderSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEnterpriseFolderGeneralSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEnterpriseFolderPermissionSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderOwaAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFolderOwaAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserEnterpriseFolderWithOwaEditPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveToStorageSpaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatisticsByOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMappedDriveOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMappedDriveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDriveMapsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsedDriveLettersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNotMappedEnterpriseFoldersOperationCompleted;
        
        /// <remarks/>
        public esEnterpriseStorage() {
            this.Url = "http://127.0.0.1:9002/esEnterpriseStorage.asmx";
        }
        
        /// <remarks/>
        public event AddWebDavAccessTokenCompletedEventHandler AddWebDavAccessTokenCompleted;
        
        /// <remarks/>
        public event DeleteExpiredWebDavAccessTokensCompletedEventHandler DeleteExpiredWebDavAccessTokensCompleted;
        
        /// <remarks/>
        public event GetWebDavAccessTokenByIdCompletedEventHandler GetWebDavAccessTokenByIdCompleted;
        
        /// <remarks/>
        public event GetWebDavAccessTokenByAccessTokenCompletedEventHandler GetWebDavAccessTokenByAccessTokenCompleted;
        
        /// <remarks/>
        public event CheckFileServicesInstallationCompletedEventHandler CheckFileServicesInstallationCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFoldersCompletedEventHandler GetEnterpriseFoldersCompleted;
        
        /// <remarks/>
        public event GetUserRootFoldersCompletedEventHandler GetUserRootFoldersCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFolderCompletedEventHandler GetEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFolderWithExtraDataCompletedEventHandler GetEnterpriseFolderWithExtraDataCompleted;
        
        /// <remarks/>
        public event CreateEnterpriseFolderCompletedEventHandler CreateEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event DeleteEnterpriseFolderCompletedEventHandler DeleteEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFolderPermissionsCompletedEventHandler GetEnterpriseFolderPermissionsCompleted;
        
        /// <remarks/>
        public event SetEnterpriseFolderPermissionsCompletedEventHandler SetEnterpriseFolderPermissionsCompleted;
        
        /// <remarks/>
        public event SearchESAccountsCompletedEventHandler SearchESAccountsCompleted;
        
        /// <remarks/>
        public event GetEnterpriseFoldersPagedCompletedEventHandler GetEnterpriseFoldersPagedCompleted;
        
        /// <remarks/>
        public event RenameEnterpriseFolderCompletedEventHandler RenameEnterpriseFolderCompleted;
        
        /// <remarks/>
        public event CreateEnterpriseStorageCompletedEventHandler CreateEnterpriseStorageCompleted;
        
        /// <remarks/>
        public event CheckEnterpriseStorageInitializationCompletedEventHandler CheckEnterpriseStorageInitializationCompleted;
        
        /// <remarks/>
        public event CheckUsersDomainExistsCompletedEventHandler CheckUsersDomainExistsCompleted;
        
        /// <remarks/>
        public event GetWebDavPortalUserSettingsByAccountIdCompletedEventHandler GetWebDavPortalUserSettingsByAccountIdCompleted;
        
        /// <remarks/>
        public event UpdateWebDavPortalUserSettingsCompletedEventHandler UpdateWebDavPortalUserSettingsCompleted;
        
        /// <remarks/>
        public event SearchFilesCompletedEventHandler SearchFilesCompleted;
        
        /// <remarks/>
        public event GetEnterpriseStorageServiceIdCompletedEventHandler GetEnterpriseStorageServiceIdCompleted;
        
        /// <remarks/>
        public event SetEsFolderShareSettingsCompletedEventHandler SetEsFolderShareSettingsCompleted;
        
        /// <remarks/>
        public event GetDirectoryBrowseEnabledCompletedEventHandler GetDirectoryBrowseEnabledCompleted;
        
        /// <remarks/>
        public event SetDirectoryBrowseEnabledCompletedEventHandler SetDirectoryBrowseEnabledCompleted;
        
        /// <remarks/>
        public event SetEnterpriseFolderSettingsCompletedEventHandler SetEnterpriseFolderSettingsCompleted;
        
        /// <remarks/>
        public event SetEnterpriseFolderGeneralSettingsCompletedEventHandler SetEnterpriseFolderGeneralSettingsCompleted;
        
        /// <remarks/>
        public event SetEnterpriseFolderPermissionSettingsCompletedEventHandler SetEnterpriseFolderPermissionSettingsCompleted;
        
        /// <remarks/>
        public event GetFolderOwaAccountsCompletedEventHandler GetFolderOwaAccountsCompleted;
        
        /// <remarks/>
        public event SetFolderOwaAccountsCompletedEventHandler SetFolderOwaAccountsCompleted;
        
        /// <remarks/>
        public event GetUserEnterpriseFolderWithOwaEditPermissionCompletedEventHandler GetUserEnterpriseFolderWithOwaEditPermissionCompleted;
        
        /// <remarks/>
        public event MoveToStorageSpaceCompletedEventHandler MoveToStorageSpaceCompleted;
        
        /// <remarks/>
        public event GetStatisticsCompletedEventHandler GetStatisticsCompleted;
        
        /// <remarks/>
        public event GetStatisticsByOrganizationCompletedEventHandler GetStatisticsByOrganizationCompleted;
        
        /// <remarks/>
        public event CreateMappedDriveCompletedEventHandler CreateMappedDriveCompleted;
        
        /// <remarks/>
        public event DeleteMappedDriveCompletedEventHandler DeleteMappedDriveCompleted;
        
        /// <remarks/>
        public event GetDriveMapsPagedCompletedEventHandler GetDriveMapsPagedCompleted;
        
        /// <remarks/>
        public event GetUsedDriveLettersCompletedEventHandler GetUsedDriveLettersCompleted;
        
        /// <remarks/>
        public event GetNotMappedEnterpriseFoldersCompletedEventHandler GetNotMappedEnterpriseFoldersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddWebDavAccessToken", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWebDavAccessToken(WebDavAccessToken accessToken) {
            object[] results = this.Invoke("AddWebDavAccessToken", new object[] {
                        accessToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddWebDavAccessToken(WebDavAccessToken accessToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddWebDavAccessToken", new object[] {
                        accessToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddWebDavAccessToken(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddWebDavAccessTokenAsync(WebDavAccessToken accessToken) {
            this.AddWebDavAccessTokenAsync(accessToken, null);
        }
        
        /// <remarks/>
        public void AddWebDavAccessTokenAsync(WebDavAccessToken accessToken, object userState) {
            if ((this.AddWebDavAccessTokenOperationCompleted == null)) {
                this.AddWebDavAccessTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWebDavAccessTokenOperationCompleted);
            }
            this.InvokeAsync("AddWebDavAccessToken", new object[] {
                        accessToken}, this.AddWebDavAccessTokenOperationCompleted, userState);
        }
        
        private void OnAddWebDavAccessTokenOperationCompleted(object arg) {
            if ((this.AddWebDavAccessTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWebDavAccessTokenCompleted(this, new AddWebDavAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteExpiredWebDavAccessTokens", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteExpiredWebDavAccessTokens() {
            this.Invoke("DeleteExpiredWebDavAccessTokens", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteExpiredWebDavAccessTokens(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteExpiredWebDavAccessTokens", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteExpiredWebDavAccessTokens(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteExpiredWebDavAccessTokensAsync() {
            this.DeleteExpiredWebDavAccessTokensAsync(null);
        }
        
        /// <remarks/>
        public void DeleteExpiredWebDavAccessTokensAsync(object userState) {
            if ((this.DeleteExpiredWebDavAccessTokensOperationCompleted == null)) {
                this.DeleteExpiredWebDavAccessTokensOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteExpiredWebDavAccessTokensOperationCompleted);
            }
            this.InvokeAsync("DeleteExpiredWebDavAccessTokens", new object[0], this.DeleteExpiredWebDavAccessTokensOperationCompleted, userState);
        }
        
        private void OnDeleteExpiredWebDavAccessTokensOperationCompleted(object arg) {
            if ((this.DeleteExpiredWebDavAccessTokensCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteExpiredWebDavAccessTokensCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebDavAccessTokenById", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebDavAccessToken GetWebDavAccessTokenById(int id) {
            object[] results = this.Invoke("GetWebDavAccessTokenById", new object[] {
                        id});
            return ((WebDavAccessToken)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebDavAccessTokenById(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebDavAccessTokenById", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebDavAccessToken EndGetWebDavAccessTokenById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebDavAccessToken)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebDavAccessTokenByIdAsync(int id) {
            this.GetWebDavAccessTokenByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetWebDavAccessTokenByIdAsync(int id, object userState) {
            if ((this.GetWebDavAccessTokenByIdOperationCompleted == null)) {
                this.GetWebDavAccessTokenByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebDavAccessTokenByIdOperationCompleted);
            }
            this.InvokeAsync("GetWebDavAccessTokenById", new object[] {
                        id}, this.GetWebDavAccessTokenByIdOperationCompleted, userState);
        }
        
        private void OnGetWebDavAccessTokenByIdOperationCompleted(object arg) {
            if ((this.GetWebDavAccessTokenByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebDavAccessTokenByIdCompleted(this, new GetWebDavAccessTokenByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebDavAccessTokenByAccessToken", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebDavAccessToken GetWebDavAccessTokenByAccessToken(System.Guid accessToken) {
            object[] results = this.Invoke("GetWebDavAccessTokenByAccessToken", new object[] {
                        accessToken});
            return ((WebDavAccessToken)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebDavAccessTokenByAccessToken(System.Guid accessToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebDavAccessTokenByAccessToken", new object[] {
                        accessToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebDavAccessToken EndGetWebDavAccessTokenByAccessToken(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebDavAccessToken)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebDavAccessTokenByAccessTokenAsync(System.Guid accessToken) {
            this.GetWebDavAccessTokenByAccessTokenAsync(accessToken, null);
        }
        
        /// <remarks/>
        public void GetWebDavAccessTokenByAccessTokenAsync(System.Guid accessToken, object userState) {
            if ((this.GetWebDavAccessTokenByAccessTokenOperationCompleted == null)) {
                this.GetWebDavAccessTokenByAccessTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebDavAccessTokenByAccessTokenOperationCompleted);
            }
            this.InvokeAsync("GetWebDavAccessTokenByAccessToken", new object[] {
                        accessToken}, this.GetWebDavAccessTokenByAccessTokenOperationCompleted, userState);
        }
        
        private void OnGetWebDavAccessTokenByAccessTokenOperationCompleted(object arg) {
            if ((this.GetWebDavAccessTokenByAccessTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebDavAccessTokenByAccessTokenCompleted(this, new GetWebDavAccessTokenByAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckFileServicesInstallation", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckFileServicesInstallation(int serviceId) {
            object[] results = this.Invoke("CheckFileServicesInstallation", new object[] {
                        serviceId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckFileServicesInstallation(int serviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckFileServicesInstallation", new object[] {
                        serviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckFileServicesInstallation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileServicesInstallationAsync(int serviceId) {
            this.CheckFileServicesInstallationAsync(serviceId, null);
        }
        
        /// <remarks/>
        public void CheckFileServicesInstallationAsync(int serviceId, object userState) {
            if ((this.CheckFileServicesInstallationOperationCompleted == null)) {
                this.CheckFileServicesInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileServicesInstallationOperationCompleted);
            }
            this.InvokeAsync("CheckFileServicesInstallation", new object[] {
                        serviceId}, this.CheckFileServicesInstallationOperationCompleted, userState);
        }
        
        private void OnCheckFileServicesInstallationOperationCompleted(object arg) {
            if ((this.CheckFileServicesInstallationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileServicesInstallationCompleted(this, new CheckFileServicesInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEnterpriseFolders", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetEnterpriseFolders(int itemId) {
            object[] results = this.Invoke("GetEnterpriseFolders", new object[] {
                        itemId});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolders(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFolders", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetEnterpriseFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFoldersAsync(int itemId) {
            this.GetEnterpriseFoldersAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFoldersAsync(int itemId, object userState) {
            if ((this.GetEnterpriseFoldersOperationCompleted == null)) {
                this.GetEnterpriseFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFoldersOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolders", new object[] {
                        itemId}, this.GetEnterpriseFoldersOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFoldersOperationCompleted(object arg) {
            if ((this.GetEnterpriseFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFoldersCompleted(this, new GetEnterpriseFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUserRootFolders", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetUserRootFolders(int itemId, int accountId, string userName, string displayName) {
            object[] results = this.Invoke("GetUserRootFolders", new object[] {
                        itemId,
                        accountId,
                        userName,
                        displayName});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserRootFolders(int itemId, int accountId, string userName, string displayName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserRootFolders", new object[] {
                        itemId,
                        accountId,
                        userName,
                        displayName}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetUserRootFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserRootFoldersAsync(int itemId, int accountId, string userName, string displayName) {
            this.GetUserRootFoldersAsync(itemId, accountId, userName, displayName, null);
        }
        
        /// <remarks/>
        public void GetUserRootFoldersAsync(int itemId, int accountId, string userName, string displayName, object userState) {
            if ((this.GetUserRootFoldersOperationCompleted == null)) {
                this.GetUserRootFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserRootFoldersOperationCompleted);
            }
            this.InvokeAsync("GetUserRootFolders", new object[] {
                        itemId,
                        accountId,
                        userName,
                        displayName}, this.GetUserRootFoldersOperationCompleted, userState);
        }
        
        private void OnGetUserRootFoldersOperationCompleted(object arg) {
            if ((this.GetUserRootFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserRootFoldersCompleted(this, new GetUserRootFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEnterpriseFolder", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile GetEnterpriseFolder(int itemId, string folderName) {
            object[] results = this.Invoke("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile EndGetEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderAsync(int itemId, string folderName) {
            this.GetEnterpriseFolderAsync(itemId, folderName, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderAsync(int itemId, string folderName, object userState) {
            if ((this.GetEnterpriseFolderOperationCompleted == null)) {
                this.GetEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.GetEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFolderOperationCompleted(object arg) {
            if ((this.GetEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFolderCompleted(this, new GetEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEnterpriseFolderWithExtraData", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile GetEnterpriseFolderWithExtraData(int itemId, string folderName, bool loadDriveMapInfo) {
            object[] results = this.Invoke("GetEnterpriseFolderWithExtraData", new object[] {
                        itemId,
                        folderName,
                        loadDriveMapInfo});
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolderWithExtraData(int itemId, string folderName, bool loadDriveMapInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFolderWithExtraData", new object[] {
                        itemId,
                        folderName,
                        loadDriveMapInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile EndGetEnterpriseFolderWithExtraData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderWithExtraDataAsync(int itemId, string folderName, bool loadDriveMapInfo) {
            this.GetEnterpriseFolderWithExtraDataAsync(itemId, folderName, loadDriveMapInfo, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderWithExtraDataAsync(int itemId, string folderName, bool loadDriveMapInfo, object userState) {
            if ((this.GetEnterpriseFolderWithExtraDataOperationCompleted == null)) {
                this.GetEnterpriseFolderWithExtraDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFolderWithExtraDataOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolderWithExtraData", new object[] {
                        itemId,
                        folderName,
                        loadDriveMapInfo}, this.GetEnterpriseFolderWithExtraDataOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFolderWithExtraDataOperationCompleted(object arg) {
            if ((this.GetEnterpriseFolderWithExtraDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFolderWithExtraDataCompleted(this, new GetEnterpriseFolderWithExtraDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateEnterpriseFolder", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CreateEnterpriseFolder(int itemId, string folderName, int quota, QuotaType quotaType, bool addDefaultGroup) {
            object[] results = this.Invoke("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName,
                        quota,
                        quotaType,
                        addDefaultGroup});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateEnterpriseFolder(int itemId, string folderName, int quota, QuotaType quotaType, bool addDefaultGroup, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName,
                        quota,
                        quotaType,
                        addDefaultGroup}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndCreateEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void CreateEnterpriseFolderAsync(int itemId, string folderName, int quota, QuotaType quotaType, bool addDefaultGroup) {
            this.CreateEnterpriseFolderAsync(itemId, folderName, quota, quotaType, addDefaultGroup, null);
        }
        
        /// <remarks/>
        public void CreateEnterpriseFolderAsync(int itemId, string folderName, int quota, QuotaType quotaType, bool addDefaultGroup, object userState) {
            if ((this.CreateEnterpriseFolderOperationCompleted == null)) {
                this.CreateEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("CreateEnterpriseFolder", new object[] {
                        itemId,
                        folderName,
                        quota,
                        quotaType,
                        addDefaultGroup}, this.CreateEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnCreateEnterpriseFolderOperationCompleted(object arg) {
            if ((this.CreateEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEnterpriseFolderCompleted(this, new CreateEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteEnterpriseFolder", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteEnterpriseFolder(int itemId, string folderName) {
            object[] results = this.Invoke("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteEnterpriseFolder(int itemId, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEnterpriseFolderAsync(int itemId, string folderName) {
            this.DeleteEnterpriseFolderAsync(itemId, folderName, null);
        }
        
        /// <remarks/>
        public void DeleteEnterpriseFolderAsync(int itemId, string folderName, object userState) {
            if ((this.DeleteEnterpriseFolderOperationCompleted == null)) {
                this.DeleteEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteEnterpriseFolder", new object[] {
                        itemId,
                        folderName}, this.DeleteEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnDeleteEnterpriseFolderOperationCompleted(object arg) {
            if ((this.DeleteEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEnterpriseFolderCompleted(this, new DeleteEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEnterpriseFolderPermissions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ESPermission[] GetEnterpriseFolderPermissions(int itemId, string folderName) {
            object[] results = this.Invoke("GetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName});
            return ((ESPermission[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFolderPermissions(int itemId, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ESPermission[] EndGetEnterpriseFolderPermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ESPermission[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderPermissionsAsync(int itemId, string folderName) {
            this.GetEnterpriseFolderPermissionsAsync(itemId, folderName, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFolderPermissionsAsync(int itemId, string folderName, object userState) {
            if ((this.GetEnterpriseFolderPermissionsOperationCompleted == null)) {
                this.GetEnterpriseFolderPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFolderPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName}, this.GetEnterpriseFolderPermissionsOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFolderPermissionsOperationCompleted(object arg) {
            if ((this.GetEnterpriseFolderPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFolderPermissionsCompleted(this, new GetEnterpriseFolderPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetEnterpriseFolderPermissions", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SetEnterpriseFolderPermissions(int itemId, string folderName, ESPermission[] permission) {
            object[] results = this.Invoke("SetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName,
                        permission});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetEnterpriseFolderPermissions(int itemId, string folderName, ESPermission[] permission, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName,
                        permission}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSetEnterpriseFolderPermissions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderPermissionsAsync(int itemId, string folderName, ESPermission[] permission) {
            this.SetEnterpriseFolderPermissionsAsync(itemId, folderName, permission, null);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderPermissionsAsync(int itemId, string folderName, ESPermission[] permission, object userState) {
            if ((this.SetEnterpriseFolderPermissionsOperationCompleted == null)) {
                this.SetEnterpriseFolderPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnterpriseFolderPermissionsOperationCompleted);
            }
            this.InvokeAsync("SetEnterpriseFolderPermissions", new object[] {
                        itemId,
                        folderName,
                        permission}, this.SetEnterpriseFolderPermissionsOperationCompleted, userState);
        }
        
        private void OnSetEnterpriseFolderPermissionsOperationCompleted(object arg) {
            if ((this.SetEnterpriseFolderPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnterpriseFolderPermissionsCompleted(this, new SetEnterpriseFolderPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SearchESAccounts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeAccount[] SearchESAccounts(int itemId, string filterColumn, string filterValue, string sortColumn) {
            object[] results = this.Invoke("SearchESAccounts", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn});
            return ((ExchangeAccount[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearchESAccounts(int itemId, string filterColumn, string filterValue, string sortColumn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SearchESAccounts", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExchangeAccount[] EndSearchESAccounts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExchangeAccount[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchESAccountsAsync(int itemId, string filterColumn, string filterValue, string sortColumn) {
            this.SearchESAccountsAsync(itemId, filterColumn, filterValue, sortColumn, null);
        }
        
        /// <remarks/>
        public void SearchESAccountsAsync(int itemId, string filterColumn, string filterValue, string sortColumn, object userState) {
            if ((this.SearchESAccountsOperationCompleted == null)) {
                this.SearchESAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchESAccountsOperationCompleted);
            }
            this.InvokeAsync("SearchESAccounts", new object[] {
                        itemId,
                        filterColumn,
                        filterValue,
                        sortColumn}, this.SearchESAccountsOperationCompleted, userState);
        }
        
        private void OnSearchESAccountsOperationCompleted(object arg) {
            if ((this.SearchESAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchESAccountsCompleted(this, new SearchESAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEnterpriseFoldersPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFilesPaged GetEnterpriseFoldersPaged(int itemId, bool loadUsagesData, bool loadWebdavRules, bool loadMappedDrives, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetEnterpriseFoldersPaged", new object[] {
                        itemId,
                        loadUsagesData,
                        loadWebdavRules,
                        loadMappedDrives,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((SystemFilesPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseFoldersPaged(int itemId, bool loadUsagesData, bool loadWebdavRules, bool loadMappedDrives, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseFoldersPaged", new object[] {
                        itemId,
                        loadUsagesData,
                        loadWebdavRules,
                        loadMappedDrives,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFilesPaged EndGetEnterpriseFoldersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFilesPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseFoldersPagedAsync(int itemId, bool loadUsagesData, bool loadWebdavRules, bool loadMappedDrives, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetEnterpriseFoldersPagedAsync(itemId, loadUsagesData, loadWebdavRules, loadMappedDrives, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseFoldersPagedAsync(int itemId, bool loadUsagesData, bool loadWebdavRules, bool loadMappedDrives, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetEnterpriseFoldersPagedOperationCompleted == null)) {
                this.GetEnterpriseFoldersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseFoldersPagedOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseFoldersPaged", new object[] {
                        itemId,
                        loadUsagesData,
                        loadWebdavRules,
                        loadMappedDrives,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetEnterpriseFoldersPagedOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseFoldersPagedOperationCompleted(object arg) {
            if ((this.GetEnterpriseFoldersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseFoldersPagedCompleted(this, new GetEnterpriseFoldersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RenameEnterpriseFolder", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile RenameEnterpriseFolder(int itemId, string oldName, string newName) {
            object[] results = this.Invoke("RenameEnterpriseFolder", new object[] {
                        itemId,
                        oldName,
                        newName});
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameEnterpriseFolder(int itemId, string oldName, string newName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameEnterpriseFolder", new object[] {
                        itemId,
                        oldName,
                        newName}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile EndRenameEnterpriseFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile)(results[0]));
        }
        
        /// <remarks/>
        public void RenameEnterpriseFolderAsync(int itemId, string oldName, string newName) {
            this.RenameEnterpriseFolderAsync(itemId, oldName, newName, null);
        }
        
        /// <remarks/>
        public void RenameEnterpriseFolderAsync(int itemId, string oldName, string newName, object userState) {
            if ((this.RenameEnterpriseFolderOperationCompleted == null)) {
                this.RenameEnterpriseFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameEnterpriseFolderOperationCompleted);
            }
            this.InvokeAsync("RenameEnterpriseFolder", new object[] {
                        itemId,
                        oldName,
                        newName}, this.RenameEnterpriseFolderOperationCompleted, userState);
        }
        
        private void OnRenameEnterpriseFolderOperationCompleted(object arg) {
            if ((this.RenameEnterpriseFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameEnterpriseFolderCompleted(this, new RenameEnterpriseFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateEnterpriseStorage", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CreateEnterpriseStorage(int packageId, int itemId) {
            object[] results = this.Invoke("CreateEnterpriseStorage", new object[] {
                        packageId,
                        itemId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateEnterpriseStorage(int packageId, int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateEnterpriseStorage", new object[] {
                        packageId,
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndCreateEnterpriseStorage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void CreateEnterpriseStorageAsync(int packageId, int itemId) {
            this.CreateEnterpriseStorageAsync(packageId, itemId, null);
        }
        
        /// <remarks/>
        public void CreateEnterpriseStorageAsync(int packageId, int itemId, object userState) {
            if ((this.CreateEnterpriseStorageOperationCompleted == null)) {
                this.CreateEnterpriseStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEnterpriseStorageOperationCompleted);
            }
            this.InvokeAsync("CreateEnterpriseStorage", new object[] {
                        packageId,
                        itemId}, this.CreateEnterpriseStorageOperationCompleted, userState);
        }
        
        private void OnCreateEnterpriseStorageOperationCompleted(object arg) {
            if ((this.CreateEnterpriseStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEnterpriseStorageCompleted(this, new CreateEnterpriseStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckEnterpriseStorageInitialization" +
            "", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckEnterpriseStorageInitialization(int packageId, int itemId) {
            object[] results = this.Invoke("CheckEnterpriseStorageInitialization", new object[] {
                        packageId,
                        itemId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckEnterpriseStorageInitialization(int packageId, int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckEnterpriseStorageInitialization", new object[] {
                        packageId,
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckEnterpriseStorageInitialization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEnterpriseStorageInitializationAsync(int packageId, int itemId) {
            this.CheckEnterpriseStorageInitializationAsync(packageId, itemId, null);
        }
        
        /// <remarks/>
        public void CheckEnterpriseStorageInitializationAsync(int packageId, int itemId, object userState) {
            if ((this.CheckEnterpriseStorageInitializationOperationCompleted == null)) {
                this.CheckEnterpriseStorageInitializationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEnterpriseStorageInitializationOperationCompleted);
            }
            this.InvokeAsync("CheckEnterpriseStorageInitialization", new object[] {
                        packageId,
                        itemId}, this.CheckEnterpriseStorageInitializationOperationCompleted, userState);
        }
        
        private void OnCheckEnterpriseStorageInitializationOperationCompleted(object arg) {
            if ((this.CheckEnterpriseStorageInitializationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEnterpriseStorageInitializationCompleted(this, new CheckEnterpriseStorageInitializationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CheckUsersDomainExists", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUsersDomainExists(int itemId) {
            object[] results = this.Invoke("CheckUsersDomainExists", new object[] {
                        itemId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckUsersDomainExists(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckUsersDomainExists", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckUsersDomainExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUsersDomainExistsAsync(int itemId) {
            this.CheckUsersDomainExistsAsync(itemId, null);
        }
        
        /// <remarks/>
        public void CheckUsersDomainExistsAsync(int itemId, object userState) {
            if ((this.CheckUsersDomainExistsOperationCompleted == null)) {
                this.CheckUsersDomainExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUsersDomainExistsOperationCompleted);
            }
            this.InvokeAsync("CheckUsersDomainExists", new object[] {
                        itemId}, this.CheckUsersDomainExistsOperationCompleted, userState);
        }
        
        private void OnCheckUsersDomainExistsOperationCompleted(object arg) {
            if ((this.CheckUsersDomainExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUsersDomainExistsCompleted(this, new CheckUsersDomainExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetWebDavPortalUserSettingsByAccount" +
            "Id", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWebDavPortalUserSettingsByAccountId(int accountId) {
            object[] results = this.Invoke("GetWebDavPortalUserSettingsByAccountId", new object[] {
                        accountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebDavPortalUserSettingsByAccountId(int accountId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebDavPortalUserSettingsByAccountId", new object[] {
                        accountId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetWebDavPortalUserSettingsByAccountId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebDavPortalUserSettingsByAccountIdAsync(int accountId) {
            this.GetWebDavPortalUserSettingsByAccountIdAsync(accountId, null);
        }
        
        /// <remarks/>
        public void GetWebDavPortalUserSettingsByAccountIdAsync(int accountId, object userState) {
            if ((this.GetWebDavPortalUserSettingsByAccountIdOperationCompleted == null)) {
                this.GetWebDavPortalUserSettingsByAccountIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebDavPortalUserSettingsByAccountIdOperationCompleted);
            }
            this.InvokeAsync("GetWebDavPortalUserSettingsByAccountId", new object[] {
                        accountId}, this.GetWebDavPortalUserSettingsByAccountIdOperationCompleted, userState);
        }
        
        private void OnGetWebDavPortalUserSettingsByAccountIdOperationCompleted(object arg) {
            if ((this.GetWebDavPortalUserSettingsByAccountIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebDavPortalUserSettingsByAccountIdCompleted(this, new GetWebDavPortalUserSettingsByAccountIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateWebDavPortalUserSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWebDavPortalUserSettings(int accountId, string settings) {
            this.Invoke("UpdateWebDavPortalUserSettings", new object[] {
                        accountId,
                        settings});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateWebDavPortalUserSettings(int accountId, string settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateWebDavPortalUserSettings", new object[] {
                        accountId,
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateWebDavPortalUserSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateWebDavPortalUserSettingsAsync(int accountId, string settings) {
            this.UpdateWebDavPortalUserSettingsAsync(accountId, settings, null);
        }
        
        /// <remarks/>
        public void UpdateWebDavPortalUserSettingsAsync(int accountId, string settings, object userState) {
            if ((this.UpdateWebDavPortalUserSettingsOperationCompleted == null)) {
                this.UpdateWebDavPortalUserSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWebDavPortalUserSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateWebDavPortalUserSettings", new object[] {
                        accountId,
                        settings}, this.UpdateWebDavPortalUserSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateWebDavPortalUserSettingsOperationCompleted(object arg) {
            if ((this.UpdateWebDavPortalUserSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWebDavPortalUserSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SearchFiles", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] SearchFiles(int itemId, string[] searchPaths, string searchText, string userPrincipalName, bool recursive) {
            object[] results = this.Invoke("SearchFiles", new object[] {
                        itemId,
                        searchPaths,
                        searchText,
                        userPrincipalName,
                        recursive});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearchFiles(int itemId, string[] searchPaths, string searchText, string userPrincipalName, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SearchFiles", new object[] {
                        itemId,
                        searchPaths,
                        searchText,
                        userPrincipalName,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndSearchFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchFilesAsync(int itemId, string[] searchPaths, string searchText, string userPrincipalName, bool recursive) {
            this.SearchFilesAsync(itemId, searchPaths, searchText, userPrincipalName, recursive, null);
        }
        
        /// <remarks/>
        public void SearchFilesAsync(int itemId, string[] searchPaths, string searchText, string userPrincipalName, bool recursive, object userState) {
            if ((this.SearchFilesOperationCompleted == null)) {
                this.SearchFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchFilesOperationCompleted);
            }
            this.InvokeAsync("SearchFiles", new object[] {
                        itemId,
                        searchPaths,
                        searchText,
                        userPrincipalName,
                        recursive}, this.SearchFilesOperationCompleted, userState);
        }
        
        private void OnSearchFilesOperationCompleted(object arg) {
            if ((this.SearchFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchFilesCompleted(this, new SearchFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetEnterpriseStorageServiceId", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetEnterpriseStorageServiceId(int itemId) {
            object[] results = this.Invoke("GetEnterpriseStorageServiceId", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEnterpriseStorageServiceId(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEnterpriseStorageServiceId", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetEnterpriseStorageServiceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnterpriseStorageServiceIdAsync(int itemId) {
            this.GetEnterpriseStorageServiceIdAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetEnterpriseStorageServiceIdAsync(int itemId, object userState) {
            if ((this.GetEnterpriseStorageServiceIdOperationCompleted == null)) {
                this.GetEnterpriseStorageServiceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnterpriseStorageServiceIdOperationCompleted);
            }
            this.InvokeAsync("GetEnterpriseStorageServiceId", new object[] {
                        itemId}, this.GetEnterpriseStorageServiceIdOperationCompleted, userState);
        }
        
        private void OnGetEnterpriseStorageServiceIdOperationCompleted(object arg) {
            if ((this.GetEnterpriseStorageServiceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnterpriseStorageServiceIdCompleted(this, new GetEnterpriseStorageServiceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetEsFolderShareSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetEsFolderShareSettings(int itemId, string folderName, bool abeIsEnabled, bool edaIsEnabled) {
            this.Invoke("SetEsFolderShareSettings", new object[] {
                        itemId,
                        folderName,
                        abeIsEnabled,
                        edaIsEnabled});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetEsFolderShareSettings(int itemId, string folderName, bool abeIsEnabled, bool edaIsEnabled, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetEsFolderShareSettings", new object[] {
                        itemId,
                        folderName,
                        abeIsEnabled,
                        edaIsEnabled}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetEsFolderShareSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetEsFolderShareSettingsAsync(int itemId, string folderName, bool abeIsEnabled, bool edaIsEnabled) {
            this.SetEsFolderShareSettingsAsync(itemId, folderName, abeIsEnabled, edaIsEnabled, null);
        }
        
        /// <remarks/>
        public void SetEsFolderShareSettingsAsync(int itemId, string folderName, bool abeIsEnabled, bool edaIsEnabled, object userState) {
            if ((this.SetEsFolderShareSettingsOperationCompleted == null)) {
                this.SetEsFolderShareSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEsFolderShareSettingsOperationCompleted);
            }
            this.InvokeAsync("SetEsFolderShareSettings", new object[] {
                        itemId,
                        folderName,
                        abeIsEnabled,
                        edaIsEnabled}, this.SetEsFolderShareSettingsOperationCompleted, userState);
        }
        
        private void OnSetEsFolderShareSettingsOperationCompleted(object arg) {
            if ((this.SetEsFolderShareSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEsFolderShareSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDirectoryBrowseEnabled", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDirectoryBrowseEnabled(int itemId, string site) {
            object[] results = this.Invoke("GetDirectoryBrowseEnabled", new object[] {
                        itemId,
                        site});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDirectoryBrowseEnabled(int itemId, string site, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDirectoryBrowseEnabled", new object[] {
                        itemId,
                        site}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetDirectoryBrowseEnabled(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDirectoryBrowseEnabledAsync(int itemId, string site) {
            this.GetDirectoryBrowseEnabledAsync(itemId, site, null);
        }
        
        /// <remarks/>
        public void GetDirectoryBrowseEnabledAsync(int itemId, string site, object userState) {
            if ((this.GetDirectoryBrowseEnabledOperationCompleted == null)) {
                this.GetDirectoryBrowseEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirectoryBrowseEnabledOperationCompleted);
            }
            this.InvokeAsync("GetDirectoryBrowseEnabled", new object[] {
                        itemId,
                        site}, this.GetDirectoryBrowseEnabledOperationCompleted, userState);
        }
        
        private void OnGetDirectoryBrowseEnabledOperationCompleted(object arg) {
            if ((this.GetDirectoryBrowseEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirectoryBrowseEnabledCompleted(this, new GetDirectoryBrowseEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetDirectoryBrowseEnabled", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDirectoryBrowseEnabled(int itemId, string site, bool enabled) {
            this.Invoke("SetDirectoryBrowseEnabled", new object[] {
                        itemId,
                        site,
                        enabled});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDirectoryBrowseEnabled(int itemId, string site, bool enabled, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDirectoryBrowseEnabled", new object[] {
                        itemId,
                        site,
                        enabled}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetDirectoryBrowseEnabled(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetDirectoryBrowseEnabledAsync(int itemId, string site, bool enabled) {
            this.SetDirectoryBrowseEnabledAsync(itemId, site, enabled, null);
        }
        
        /// <remarks/>
        public void SetDirectoryBrowseEnabledAsync(int itemId, string site, bool enabled, object userState) {
            if ((this.SetDirectoryBrowseEnabledOperationCompleted == null)) {
                this.SetDirectoryBrowseEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDirectoryBrowseEnabledOperationCompleted);
            }
            this.InvokeAsync("SetDirectoryBrowseEnabled", new object[] {
                        itemId,
                        site,
                        enabled}, this.SetDirectoryBrowseEnabledOperationCompleted, userState);
        }
        
        private void OnSetDirectoryBrowseEnabledOperationCompleted(object arg) {
            if ((this.SetDirectoryBrowseEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDirectoryBrowseEnabledCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetEnterpriseFolderSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetEnterpriseFolderSettings(int itemId, SystemFile folder, ESPermission[] permissions, bool directoyBrowsingEnabled, int quota, QuotaType quotaType) {
            this.Invoke("SetEnterpriseFolderSettings", new object[] {
                        itemId,
                        folder,
                        permissions,
                        directoyBrowsingEnabled,
                        quota,
                        quotaType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetEnterpriseFolderSettings(int itemId, SystemFile folder, ESPermission[] permissions, bool directoyBrowsingEnabled, int quota, QuotaType quotaType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetEnterpriseFolderSettings", new object[] {
                        itemId,
                        folder,
                        permissions,
                        directoyBrowsingEnabled,
                        quota,
                        quotaType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetEnterpriseFolderSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderSettingsAsync(int itemId, SystemFile folder, ESPermission[] permissions, bool directoyBrowsingEnabled, int quota, QuotaType quotaType) {
            this.SetEnterpriseFolderSettingsAsync(itemId, folder, permissions, directoyBrowsingEnabled, quota, quotaType, null);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderSettingsAsync(int itemId, SystemFile folder, ESPermission[] permissions, bool directoyBrowsingEnabled, int quota, QuotaType quotaType, object userState) {
            if ((this.SetEnterpriseFolderSettingsOperationCompleted == null)) {
                this.SetEnterpriseFolderSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnterpriseFolderSettingsOperationCompleted);
            }
            this.InvokeAsync("SetEnterpriseFolderSettings", new object[] {
                        itemId,
                        folder,
                        permissions,
                        directoyBrowsingEnabled,
                        quota,
                        quotaType}, this.SetEnterpriseFolderSettingsOperationCompleted, userState);
        }
        
        private void OnSetEnterpriseFolderSettingsOperationCompleted(object arg) {
            if ((this.SetEnterpriseFolderSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnterpriseFolderSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetEnterpriseFolderGeneralSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetEnterpriseFolderGeneralSettings(int itemId, SystemFile folder, bool directoyBrowsingEnabled, int quota, QuotaType quotaType) {
            this.Invoke("SetEnterpriseFolderGeneralSettings", new object[] {
                        itemId,
                        folder,
                        directoyBrowsingEnabled,
                        quota,
                        quotaType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetEnterpriseFolderGeneralSettings(int itemId, SystemFile folder, bool directoyBrowsingEnabled, int quota, QuotaType quotaType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetEnterpriseFolderGeneralSettings", new object[] {
                        itemId,
                        folder,
                        directoyBrowsingEnabled,
                        quota,
                        quotaType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetEnterpriseFolderGeneralSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderGeneralSettingsAsync(int itemId, SystemFile folder, bool directoyBrowsingEnabled, int quota, QuotaType quotaType) {
            this.SetEnterpriseFolderGeneralSettingsAsync(itemId, folder, directoyBrowsingEnabled, quota, quotaType, null);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderGeneralSettingsAsync(int itemId, SystemFile folder, bool directoyBrowsingEnabled, int quota, QuotaType quotaType, object userState) {
            if ((this.SetEnterpriseFolderGeneralSettingsOperationCompleted == null)) {
                this.SetEnterpriseFolderGeneralSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnterpriseFolderGeneralSettingsOperationCompleted);
            }
            this.InvokeAsync("SetEnterpriseFolderGeneralSettings", new object[] {
                        itemId,
                        folder,
                        directoyBrowsingEnabled,
                        quota,
                        quotaType}, this.SetEnterpriseFolderGeneralSettingsOperationCompleted, userState);
        }
        
        private void OnSetEnterpriseFolderGeneralSettingsOperationCompleted(object arg) {
            if ((this.SetEnterpriseFolderGeneralSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnterpriseFolderGeneralSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetEnterpriseFolderPermissionSetting" +
            "s", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetEnterpriseFolderPermissionSettings(int itemId, SystemFile folder, ESPermission[] permissions) {
            this.Invoke("SetEnterpriseFolderPermissionSettings", new object[] {
                        itemId,
                        folder,
                        permissions});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetEnterpriseFolderPermissionSettings(int itemId, SystemFile folder, ESPermission[] permissions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetEnterpriseFolderPermissionSettings", new object[] {
                        itemId,
                        folder,
                        permissions}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetEnterpriseFolderPermissionSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderPermissionSettingsAsync(int itemId, SystemFile folder, ESPermission[] permissions) {
            this.SetEnterpriseFolderPermissionSettingsAsync(itemId, folder, permissions, null);
        }
        
        /// <remarks/>
        public void SetEnterpriseFolderPermissionSettingsAsync(int itemId, SystemFile folder, ESPermission[] permissions, object userState) {
            if ((this.SetEnterpriseFolderPermissionSettingsOperationCompleted == null)) {
                this.SetEnterpriseFolderPermissionSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEnterpriseFolderPermissionSettingsOperationCompleted);
            }
            this.InvokeAsync("SetEnterpriseFolderPermissionSettings", new object[] {
                        itemId,
                        folder,
                        permissions}, this.SetEnterpriseFolderPermissionSettingsOperationCompleted, userState);
        }
        
        private void OnSetEnterpriseFolderPermissionSettingsOperationCompleted(object arg) {
            if ((this.SetEnterpriseFolderPermissionSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEnterpriseFolderPermissionSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetFolderOwaAccounts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationUser[] GetFolderOwaAccounts(int itemId, SystemFile folder) {
            object[] results = this.Invoke("GetFolderOwaAccounts", new object[] {
                        itemId,
                        folder});
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFolderOwaAccounts(int itemId, SystemFile folder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFolderOwaAccounts", new object[] {
                        itemId,
                        folder}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationUser[] EndGetFolderOwaAccounts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderOwaAccountsAsync(int itemId, SystemFile folder) {
            this.GetFolderOwaAccountsAsync(itemId, folder, null);
        }
        
        /// <remarks/>
        public void GetFolderOwaAccountsAsync(int itemId, SystemFile folder, object userState) {
            if ((this.GetFolderOwaAccountsOperationCompleted == null)) {
                this.GetFolderOwaAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderOwaAccountsOperationCompleted);
            }
            this.InvokeAsync("GetFolderOwaAccounts", new object[] {
                        itemId,
                        folder}, this.GetFolderOwaAccountsOperationCompleted, userState);
        }
        
        private void OnGetFolderOwaAccountsOperationCompleted(object arg) {
            if ((this.GetFolderOwaAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderOwaAccountsCompleted(this, new GetFolderOwaAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetFolderOwaAccounts", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFolderOwaAccounts(int itemId, SystemFile folder, OrganizationUser[] users) {
            this.Invoke("SetFolderOwaAccounts", new object[] {
                        itemId,
                        folder,
                        users});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetFolderOwaAccounts(int itemId, SystemFile folder, OrganizationUser[] users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetFolderOwaAccounts", new object[] {
                        itemId,
                        folder,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetFolderOwaAccounts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetFolderOwaAccountsAsync(int itemId, SystemFile folder, OrganizationUser[] users) {
            this.SetFolderOwaAccountsAsync(itemId, folder, users, null);
        }
        
        /// <remarks/>
        public void SetFolderOwaAccountsAsync(int itemId, SystemFile folder, OrganizationUser[] users, object userState) {
            if ((this.SetFolderOwaAccountsOperationCompleted == null)) {
                this.SetFolderOwaAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFolderOwaAccountsOperationCompleted);
            }
            this.InvokeAsync("SetFolderOwaAccounts", new object[] {
                        itemId,
                        folder,
                        users}, this.SetFolderOwaAccountsOperationCompleted, userState);
        }
        
        private void OnSetFolderOwaAccountsOperationCompleted(object arg) {
            if ((this.SetFolderOwaAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFolderOwaAccountsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUserEnterpriseFolderWithOwaEditPe" +
            "rmission", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUserEnterpriseFolderWithOwaEditPermission(int itemId, int[] accountIds) {
            object[] results = this.Invoke("GetUserEnterpriseFolderWithOwaEditPermission", new object[] {
                        itemId,
                        accountIds});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserEnterpriseFolderWithOwaEditPermission(int itemId, int[] accountIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserEnterpriseFolderWithOwaEditPermission", new object[] {
                        itemId,
                        accountIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetUserEnterpriseFolderWithOwaEditPermission(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserEnterpriseFolderWithOwaEditPermissionAsync(int itemId, int[] accountIds) {
            this.GetUserEnterpriseFolderWithOwaEditPermissionAsync(itemId, accountIds, null);
        }
        
        /// <remarks/>
        public void GetUserEnterpriseFolderWithOwaEditPermissionAsync(int itemId, int[] accountIds, object userState) {
            if ((this.GetUserEnterpriseFolderWithOwaEditPermissionOperationCompleted == null)) {
                this.GetUserEnterpriseFolderWithOwaEditPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserEnterpriseFolderWithOwaEditPermissionOperationCompleted);
            }
            this.InvokeAsync("GetUserEnterpriseFolderWithOwaEditPermission", new object[] {
                        itemId,
                        accountIds}, this.GetUserEnterpriseFolderWithOwaEditPermissionOperationCompleted, userState);
        }
        
        private void OnGetUserEnterpriseFolderWithOwaEditPermissionOperationCompleted(object arg) {
            if ((this.GetUserEnterpriseFolderWithOwaEditPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserEnterpriseFolderWithOwaEditPermissionCompleted(this, new GetUserEnterpriseFolderWithOwaEditPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/MoveToStorageSpace", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject MoveToStorageSpace(int itemId, string folderName) {
            object[] results = this.Invoke("MoveToStorageSpace", new object[] {
                        itemId,
                        folderName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveToStorageSpace(int itemId, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveToStorageSpace", new object[] {
                        itemId,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndMoveToStorageSpace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void MoveToStorageSpaceAsync(int itemId, string folderName) {
            this.MoveToStorageSpaceAsync(itemId, folderName, null);
        }
        
        /// <remarks/>
        public void MoveToStorageSpaceAsync(int itemId, string folderName, object userState) {
            if ((this.MoveToStorageSpaceOperationCompleted == null)) {
                this.MoveToStorageSpaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveToStorageSpaceOperationCompleted);
            }
            this.InvokeAsync("MoveToStorageSpace", new object[] {
                        itemId,
                        folderName}, this.MoveToStorageSpaceOperationCompleted, userState);
        }
        
        private void OnMoveToStorageSpaceOperationCompleted(object arg) {
            if ((this.MoveToStorageSpaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveToStorageSpaceCompleted(this, new MoveToStorageSpaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetStatistics", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationStatistics GetStatistics(int itemId) {
            object[] results = this.Invoke("GetStatistics", new object[] {
                        itemId});
            return ((OrganizationStatistics)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStatistics(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStatistics", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationStatistics EndGetStatistics(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatisticsAsync(int itemId) {
            this.GetStatisticsAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetStatisticsAsync(int itemId, object userState) {
            if ((this.GetStatisticsOperationCompleted == null)) {
                this.GetStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetStatistics", new object[] {
                        itemId}, this.GetStatisticsOperationCompleted, userState);
        }
        
        private void OnGetStatisticsOperationCompleted(object arg) {
            if ((this.GetStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatisticsCompleted(this, new GetStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetStatisticsByOrganization", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OrganizationStatistics GetStatisticsByOrganization(int itemId) {
            object[] results = this.Invoke("GetStatisticsByOrganization", new object[] {
                        itemId});
            return ((OrganizationStatistics)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStatisticsByOrganization(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStatisticsByOrganization", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public OrganizationStatistics EndGetStatisticsByOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((OrganizationStatistics)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatisticsByOrganizationAsync(int itemId) {
            this.GetStatisticsByOrganizationAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetStatisticsByOrganizationAsync(int itemId, object userState) {
            if ((this.GetStatisticsByOrganizationOperationCompleted == null)) {
                this.GetStatisticsByOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatisticsByOrganizationOperationCompleted);
            }
            this.InvokeAsync("GetStatisticsByOrganization", new object[] {
                        itemId}, this.GetStatisticsByOrganizationOperationCompleted, userState);
        }
        
        private void OnGetStatisticsByOrganizationOperationCompleted(object arg) {
            if ((this.GetStatisticsByOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatisticsByOrganizationCompleted(this, new GetStatisticsByOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CreateMappedDrive", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CreateMappedDrive(int packageId, int itemId, string driveLetter, string labelAs, string folderName) {
            object[] results = this.Invoke("CreateMappedDrive", new object[] {
                        packageId,
                        itemId,
                        driveLetter,
                        labelAs,
                        folderName});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateMappedDrive(int packageId, int itemId, string driveLetter, string labelAs, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateMappedDrive", new object[] {
                        packageId,
                        itemId,
                        driveLetter,
                        labelAs,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndCreateMappedDrive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMappedDriveAsync(int packageId, int itemId, string driveLetter, string labelAs, string folderName) {
            this.CreateMappedDriveAsync(packageId, itemId, driveLetter, labelAs, folderName, null);
        }
        
        /// <remarks/>
        public void CreateMappedDriveAsync(int packageId, int itemId, string driveLetter, string labelAs, string folderName, object userState) {
            if ((this.CreateMappedDriveOperationCompleted == null)) {
                this.CreateMappedDriveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMappedDriveOperationCompleted);
            }
            this.InvokeAsync("CreateMappedDrive", new object[] {
                        packageId,
                        itemId,
                        driveLetter,
                        labelAs,
                        folderName}, this.CreateMappedDriveOperationCompleted, userState);
        }
        
        private void OnCreateMappedDriveOperationCompleted(object arg) {
            if ((this.CreateMappedDriveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMappedDriveCompleted(this, new CreateMappedDriveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteMappedDrive", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteMappedDrive(int itemId, string driveLetter) {
            object[] results = this.Invoke("DeleteMappedDrive", new object[] {
                        itemId,
                        driveLetter});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMappedDrive(int itemId, string driveLetter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMappedDrive", new object[] {
                        itemId,
                        driveLetter}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteMappedDrive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMappedDriveAsync(int itemId, string driveLetter) {
            this.DeleteMappedDriveAsync(itemId, driveLetter, null);
        }
        
        /// <remarks/>
        public void DeleteMappedDriveAsync(int itemId, string driveLetter, object userState) {
            if ((this.DeleteMappedDriveOperationCompleted == null)) {
                this.DeleteMappedDriveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMappedDriveOperationCompleted);
            }
            this.InvokeAsync("DeleteMappedDrive", new object[] {
                        itemId,
                        driveLetter}, this.DeleteMappedDriveOperationCompleted, userState);
        }
        
        private void OnDeleteMappedDriveOperationCompleted(object arg) {
            if ((this.DeleteMappedDriveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMappedDriveCompleted(this, new DeleteMappedDriveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetDriveMapsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MappedDrivesPaged GetDriveMapsPaged(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetDriveMapsPaged", new object[] {
                        itemId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((MappedDrivesPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDriveMapsPaged(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDriveMapsPaged", new object[] {
                        itemId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public MappedDrivesPaged EndGetDriveMapsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MappedDrivesPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetDriveMapsPagedAsync(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetDriveMapsPagedAsync(itemId, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetDriveMapsPagedAsync(int itemId, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetDriveMapsPagedOperationCompleted == null)) {
                this.GetDriveMapsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDriveMapsPagedOperationCompleted);
            }
            this.InvokeAsync("GetDriveMapsPaged", new object[] {
                        itemId,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetDriveMapsPagedOperationCompleted, userState);
        }
        
        private void OnGetDriveMapsPagedOperationCompleted(object arg) {
            if ((this.GetDriveMapsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDriveMapsPagedCompleted(this, new GetDriveMapsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetUsedDriveLetters", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUsedDriveLetters(int itemId) {
            object[] results = this.Invoke("GetUsedDriveLetters", new object[] {
                        itemId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUsedDriveLetters(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUsedDriveLetters", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetUsedDriveLetters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsedDriveLettersAsync(int itemId) {
            this.GetUsedDriveLettersAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetUsedDriveLettersAsync(int itemId, object userState) {
            if ((this.GetUsedDriveLettersOperationCompleted == null)) {
                this.GetUsedDriveLettersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsedDriveLettersOperationCompleted);
            }
            this.InvokeAsync("GetUsedDriveLetters", new object[] {
                        itemId}, this.GetUsedDriveLettersOperationCompleted, userState);
        }
        
        private void OnGetUsedDriveLettersOperationCompleted(object arg) {
            if ((this.GetUsedDriveLettersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsedDriveLettersCompleted(this, new GetUsedDriveLettersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetNotMappedEnterpriseFolders", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetNotMappedEnterpriseFolders(int itemId) {
            object[] results = this.Invoke("GetNotMappedEnterpriseFolders", new object[] {
                        itemId});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNotMappedEnterpriseFolders(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNotMappedEnterpriseFolders", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetNotMappedEnterpriseFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNotMappedEnterpriseFoldersAsync(int itemId) {
            this.GetNotMappedEnterpriseFoldersAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetNotMappedEnterpriseFoldersAsync(int itemId, object userState) {
            if ((this.GetNotMappedEnterpriseFoldersOperationCompleted == null)) {
                this.GetNotMappedEnterpriseFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotMappedEnterpriseFoldersOperationCompleted);
            }
            this.InvokeAsync("GetNotMappedEnterpriseFolders", new object[] {
                        itemId}, this.GetNotMappedEnterpriseFoldersOperationCompleted, userState);
        }
        
        private void OnGetNotMappedEnterpriseFoldersOperationCompleted(object arg) {
            if ((this.GetNotMappedEnterpriseFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNotMappedEnterpriseFoldersCompleted(this, new GetNotMappedEnterpriseFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddWebDavAccessTokenCompletedEventHandler(object sender, AddWebDavAccessTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWebDavAccessTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddWebDavAccessTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteExpiredWebDavAccessTokensCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWebDavAccessTokenByIdCompletedEventHandler(object sender, GetWebDavAccessTokenByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebDavAccessTokenByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebDavAccessTokenByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebDavAccessToken Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebDavAccessToken)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWebDavAccessTokenByAccessTokenCompletedEventHandler(object sender, GetWebDavAccessTokenByAccessTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebDavAccessTokenByAccessTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebDavAccessTokenByAccessTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebDavAccessToken Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebDavAccessToken)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckFileServicesInstallationCompletedEventHandler(object sender, CheckFileServicesInstallationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileServicesInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileServicesInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFoldersCompletedEventHandler(object sender, GetEnterpriseFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUserRootFoldersCompletedEventHandler(object sender, GetUserRootFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserRootFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserRootFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFolderCompletedEventHandler(object sender, GetEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFolderWithExtraDataCompletedEventHandler(object sender, GetEnterpriseFolderWithExtraDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFolderWithExtraDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFolderWithExtraDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateEnterpriseFolderCompletedEventHandler(object sender, CreateEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteEnterpriseFolderCompletedEventHandler(object sender, DeleteEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFolderPermissionsCompletedEventHandler(object sender, GetEnterpriseFolderPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFolderPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFolderPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ESPermission[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ESPermission[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetEnterpriseFolderPermissionsCompletedEventHandler(object sender, SetEnterpriseFolderPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEnterpriseFolderPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEnterpriseFolderPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SearchESAccountsCompletedEventHandler(object sender, SearchESAccountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchESAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchESAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeAccount[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeAccount[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseFoldersPagedCompletedEventHandler(object sender, GetEnterpriseFoldersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseFoldersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseFoldersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFilesPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFilesPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RenameEnterpriseFolderCompletedEventHandler(object sender, RenameEnterpriseFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameEnterpriseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameEnterpriseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateEnterpriseStorageCompletedEventHandler(object sender, CreateEnterpriseStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateEnterpriseStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateEnterpriseStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckEnterpriseStorageInitializationCompletedEventHandler(object sender, CheckEnterpriseStorageInitializationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEnterpriseStorageInitializationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEnterpriseStorageInitializationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckUsersDomainExistsCompletedEventHandler(object sender, CheckUsersDomainExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUsersDomainExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUsersDomainExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWebDavPortalUserSettingsByAccountIdCompletedEventHandler(object sender, GetWebDavPortalUserSettingsByAccountIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebDavPortalUserSettingsByAccountIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebDavPortalUserSettingsByAccountIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateWebDavPortalUserSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SearchFilesCompletedEventHandler(object sender, SearchFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEnterpriseStorageServiceIdCompletedEventHandler(object sender, GetEnterpriseStorageServiceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnterpriseStorageServiceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnterpriseStorageServiceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetEsFolderShareSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDirectoryBrowseEnabledCompletedEventHandler(object sender, GetDirectoryBrowseEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirectoryBrowseEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirectoryBrowseEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetDirectoryBrowseEnabledCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetEnterpriseFolderSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetEnterpriseFolderGeneralSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetEnterpriseFolderPermissionSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetFolderOwaAccountsCompletedEventHandler(object sender, GetFolderOwaAccountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderOwaAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderOwaAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetFolderOwaAccountsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUserEnterpriseFolderWithOwaEditPermissionCompletedEventHandler(object sender, GetUserEnterpriseFolderWithOwaEditPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserEnterpriseFolderWithOwaEditPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserEnterpriseFolderWithOwaEditPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void MoveToStorageSpaceCompletedEventHandler(object sender, MoveToStorageSpaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveToStorageSpaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveToStorageSpaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStatisticsCompletedEventHandler(object sender, GetStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStatisticsByOrganizationCompletedEventHandler(object sender, GetStatisticsByOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatisticsByOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatisticsByOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OrganizationStatistics Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OrganizationStatistics)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateMappedDriveCompletedEventHandler(object sender, CreateMappedDriveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMappedDriveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMappedDriveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteMappedDriveCompletedEventHandler(object sender, DeleteMappedDriveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMappedDriveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMappedDriveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDriveMapsPagedCompletedEventHandler(object sender, GetDriveMapsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDriveMapsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDriveMapsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MappedDrivesPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MappedDrivesPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUsedDriveLettersCompletedEventHandler(object sender, GetUsedDriveLettersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsedDriveLettersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsedDriveLettersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNotMappedEnterpriseFoldersCompletedEventHandler(object sender, GetNotMappedEnterpriseFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNotMappedEnterpriseFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNotMappedEnterpriseFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
}
