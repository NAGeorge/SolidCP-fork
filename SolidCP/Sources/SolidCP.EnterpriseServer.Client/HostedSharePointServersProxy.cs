// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace SolidCP.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using SolidCP.Providers.SharePoint;
    using SolidCP.Providers;
    
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esHostedSharePointServersSoap", Namespace="http://smbsaas/solidcp/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esHostedSharePointServers : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSiteCollectionsPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedLanguagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteCollectionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetStorageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteCollectionByDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSiteCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSiteCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSiteCollectionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackupSiteCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestoreSiteCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBackupBinaryChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppendBackupBinaryChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateSharePointSitesDiskSpaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateQuotaOperationCompleted;
        
        /// <remarks/>
        public esHostedSharePointServers() {
            this.Url = "http://127.0.0.1:9002/esHostedSharePointServers.asmx";
        }
        
        /// <remarks/>
        public event GetSiteCollectionsPagedCompletedEventHandler GetSiteCollectionsPagedCompleted;
        
        /// <remarks/>
        public event GetSupportedLanguagesCompletedEventHandler GetSupportedLanguagesCompleted;
        
        /// <remarks/>
        public event GetSiteCollectionsCompletedEventHandler GetSiteCollectionsCompleted;
        
        /// <remarks/>
        public event SetStorageSettingsCompletedEventHandler SetStorageSettingsCompleted;
        
        /// <remarks/>
        public event GetSiteCollectionCompletedEventHandler GetSiteCollectionCompleted;
        
        /// <remarks/>
        public event GetSiteCollectionByDomainCompletedEventHandler GetSiteCollectionByDomainCompleted;
        
        /// <remarks/>
        public event AddSiteCollectionCompletedEventHandler AddSiteCollectionCompleted;
        
        /// <remarks/>
        public event DeleteSiteCollectionCompletedEventHandler DeleteSiteCollectionCompleted;
        
        /// <remarks/>
        public event DeleteSiteCollectionsCompletedEventHandler DeleteSiteCollectionsCompleted;
        
        /// <remarks/>
        public event BackupSiteCollectionCompletedEventHandler BackupSiteCollectionCompleted;
        
        /// <remarks/>
        public event RestoreSiteCollectionCompletedEventHandler RestoreSiteCollectionCompleted;
        
        /// <remarks/>
        public event GetBackupBinaryChunkCompletedEventHandler GetBackupBinaryChunkCompleted;
        
        /// <remarks/>
        public event AppendBackupBinaryChunkCompletedEventHandler AppendBackupBinaryChunkCompleted;
        
        /// <remarks/>
        public event CalculateSharePointSitesDiskSpaceCompletedEventHandler CalculateSharePointSitesDiskSpaceCompleted;
        
        /// <remarks/>
        public event UpdateQuotaCompletedEventHandler UpdateQuotaCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSiteCollectionsPaged", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharePointSiteCollectionListPaged GetSiteCollectionsPaged(int packageId, int organizationId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetSiteCollectionsPaged", new object[] {
                        packageId,
                        organizationId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((SharePointSiteCollectionListPaged)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSiteCollectionsPaged(int packageId, int organizationId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSiteCollectionsPaged", new object[] {
                        packageId,
                        organizationId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharePointSiteCollectionListPaged EndGetSiteCollectionsPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharePointSiteCollectionListPaged)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteCollectionsPagedAsync(int packageId, int organizationId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetSiteCollectionsPagedAsync(packageId, organizationId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetSiteCollectionsPagedAsync(int packageId, int organizationId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetSiteCollectionsPagedOperationCompleted == null)) {
                this.GetSiteCollectionsPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteCollectionsPagedOperationCompleted);
            }
            this.InvokeAsync("GetSiteCollectionsPaged", new object[] {
                        packageId,
                        organizationId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetSiteCollectionsPagedOperationCompleted, userState);
        }
        
        private void OnGetSiteCollectionsPagedOperationCompleted(object arg) {
            if ((this.GetSiteCollectionsPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCollectionsPagedCompleted(this, new GetSiteCollectionsPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSupportedLanguages", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetSupportedLanguages(int packageId) {
            object[] results = this.Invoke("GetSupportedLanguages", new object[] {
                        packageId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSupportedLanguages(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSupportedLanguages", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int[] EndGetSupportedLanguages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedLanguagesAsync(int packageId) {
            this.GetSupportedLanguagesAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetSupportedLanguagesAsync(int packageId, object userState) {
            if ((this.GetSupportedLanguagesOperationCompleted == null)) {
                this.GetSupportedLanguagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedLanguagesOperationCompleted);
            }
            this.InvokeAsync("GetSupportedLanguages", new object[] {
                        packageId}, this.GetSupportedLanguagesOperationCompleted, userState);
        }
        
        private void OnGetSupportedLanguagesOperationCompleted(object arg) {
            if ((this.GetSupportedLanguagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedLanguagesCompleted(this, new GetSupportedLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSiteCollections", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharePointSiteCollection[] GetSiteCollections(int packageId, bool recursive) {
            object[] results = this.Invoke("GetSiteCollections", new object[] {
                        packageId,
                        recursive});
            return ((SharePointSiteCollection[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSiteCollections(int packageId, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSiteCollections", new object[] {
                        packageId,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharePointSiteCollection[] EndGetSiteCollections(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharePointSiteCollection[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteCollectionsAsync(int packageId, bool recursive) {
            this.GetSiteCollectionsAsync(packageId, recursive, null);
        }
        
        /// <remarks/>
        public void GetSiteCollectionsAsync(int packageId, bool recursive, object userState) {
            if ((this.GetSiteCollectionsOperationCompleted == null)) {
                this.GetSiteCollectionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteCollectionsOperationCompleted);
            }
            this.InvokeAsync("GetSiteCollections", new object[] {
                        packageId,
                        recursive}, this.GetSiteCollectionsOperationCompleted, userState);
        }
        
        private void OnGetSiteCollectionsOperationCompleted(object arg) {
            if ((this.GetSiteCollectionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCollectionsCompleted(this, new GetSiteCollectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/SetStorageSettings", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetStorageSettings(int itemId, int maxStorage, int warningStorage, bool applyToSiteCollections) {
            object[] results = this.Invoke("SetStorageSettings", new object[] {
                        itemId,
                        maxStorage,
                        warningStorage,
                        applyToSiteCollections});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetStorageSettings(int itemId, int maxStorage, int warningStorage, bool applyToSiteCollections, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetStorageSettings", new object[] {
                        itemId,
                        maxStorage,
                        warningStorage,
                        applyToSiteCollections}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSetStorageSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetStorageSettingsAsync(int itemId, int maxStorage, int warningStorage, bool applyToSiteCollections) {
            this.SetStorageSettingsAsync(itemId, maxStorage, warningStorage, applyToSiteCollections, null);
        }
        
        /// <remarks/>
        public void SetStorageSettingsAsync(int itemId, int maxStorage, int warningStorage, bool applyToSiteCollections, object userState) {
            if ((this.SetStorageSettingsOperationCompleted == null)) {
                this.SetStorageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetStorageSettingsOperationCompleted);
            }
            this.InvokeAsync("SetStorageSettings", new object[] {
                        itemId,
                        maxStorage,
                        warningStorage,
                        applyToSiteCollections}, this.SetStorageSettingsOperationCompleted, userState);
        }
        
        private void OnSetStorageSettingsOperationCompleted(object arg) {
            if ((this.SetStorageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetStorageSettingsCompleted(this, new SetStorageSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSiteCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharePointSiteCollection GetSiteCollection(int itemId) {
            object[] results = this.Invoke("GetSiteCollection", new object[] {
                        itemId});
            return ((SharePointSiteCollection)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSiteCollection(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSiteCollection", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharePointSiteCollection EndGetSiteCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharePointSiteCollection)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteCollectionAsync(int itemId) {
            this.GetSiteCollectionAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetSiteCollectionAsync(int itemId, object userState) {
            if ((this.GetSiteCollectionOperationCompleted == null)) {
                this.GetSiteCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteCollectionOperationCompleted);
            }
            this.InvokeAsync("GetSiteCollection", new object[] {
                        itemId}, this.GetSiteCollectionOperationCompleted, userState);
        }
        
        private void OnGetSiteCollectionOperationCompleted(object arg) {
            if ((this.GetSiteCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCollectionCompleted(this, new GetSiteCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSiteCollectionByDomain", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharePointSiteCollection GetSiteCollectionByDomain(int organizationId, string domain) {
            object[] results = this.Invoke("GetSiteCollectionByDomain", new object[] {
                        organizationId,
                        domain});
            return ((SharePointSiteCollection)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSiteCollectionByDomain(int organizationId, string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSiteCollectionByDomain", new object[] {
                        organizationId,
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharePointSiteCollection EndGetSiteCollectionByDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharePointSiteCollection)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteCollectionByDomainAsync(int organizationId, string domain) {
            this.GetSiteCollectionByDomainAsync(organizationId, domain, null);
        }
        
        /// <remarks/>
        public void GetSiteCollectionByDomainAsync(int organizationId, string domain, object userState) {
            if ((this.GetSiteCollectionByDomainOperationCompleted == null)) {
                this.GetSiteCollectionByDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteCollectionByDomainOperationCompleted);
            }
            this.InvokeAsync("GetSiteCollectionByDomain", new object[] {
                        organizationId,
                        domain}, this.GetSiteCollectionByDomainOperationCompleted, userState);
        }
        
        private void OnGetSiteCollectionByDomainOperationCompleted(object arg) {
            if ((this.GetSiteCollectionByDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCollectionByDomainCompleted(this, new GetSiteCollectionByDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddSiteCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSiteCollection(SharePointSiteCollection item) {
            object[] results = this.Invoke("AddSiteCollection", new object[] {
                        item});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSiteCollection(SharePointSiteCollection item, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSiteCollection", new object[] {
                        item}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddSiteCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSiteCollectionAsync(SharePointSiteCollection item) {
            this.AddSiteCollectionAsync(item, null);
        }
        
        /// <remarks/>
        public void AddSiteCollectionAsync(SharePointSiteCollection item, object userState) {
            if ((this.AddSiteCollectionOperationCompleted == null)) {
                this.AddSiteCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSiteCollectionOperationCompleted);
            }
            this.InvokeAsync("AddSiteCollection", new object[] {
                        item}, this.AddSiteCollectionOperationCompleted, userState);
        }
        
        private void OnAddSiteCollectionOperationCompleted(object arg) {
            if ((this.AddSiteCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSiteCollectionCompleted(this, new AddSiteCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSiteCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSiteCollection(int itemId) {
            object[] results = this.Invoke("DeleteSiteCollection", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSiteCollection(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSiteCollection", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteSiteCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSiteCollectionAsync(int itemId) {
            this.DeleteSiteCollectionAsync(itemId, null);
        }
        
        /// <remarks/>
        public void DeleteSiteCollectionAsync(int itemId, object userState) {
            if ((this.DeleteSiteCollectionOperationCompleted == null)) {
                this.DeleteSiteCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSiteCollectionOperationCompleted);
            }
            this.InvokeAsync("DeleteSiteCollection", new object[] {
                        itemId}, this.DeleteSiteCollectionOperationCompleted, userState);
        }
        
        private void OnDeleteSiteCollectionOperationCompleted(object arg) {
            if ((this.DeleteSiteCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSiteCollectionCompleted(this, new DeleteSiteCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSiteCollections", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSiteCollections(int organizationId) {
            object[] results = this.Invoke("DeleteSiteCollections", new object[] {
                        organizationId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSiteCollections(int organizationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSiteCollections", new object[] {
                        organizationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteSiteCollections(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSiteCollectionsAsync(int organizationId) {
            this.DeleteSiteCollectionsAsync(organizationId, null);
        }
        
        /// <remarks/>
        public void DeleteSiteCollectionsAsync(int organizationId, object userState) {
            if ((this.DeleteSiteCollectionsOperationCompleted == null)) {
                this.DeleteSiteCollectionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSiteCollectionsOperationCompleted);
            }
            this.InvokeAsync("DeleteSiteCollections", new object[] {
                        organizationId}, this.DeleteSiteCollectionsOperationCompleted, userState);
        }
        
        private void OnDeleteSiteCollectionsOperationCompleted(object arg) {
            if ((this.DeleteSiteCollectionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSiteCollectionsCompleted(this, new DeleteSiteCollectionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/BackupSiteCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackupSiteCollection(int itemId, string fileName, bool zipBackup, bool download, string folderName) {
            object[] results = this.Invoke("BackupSiteCollection", new object[] {
                        itemId,
                        fileName,
                        zipBackup,
                        download,
                        folderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBackupSiteCollection(int itemId, string fileName, bool zipBackup, bool download, string folderName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BackupSiteCollection", new object[] {
                        itemId,
                        fileName,
                        zipBackup,
                        download,
                        folderName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndBackupSiteCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackupSiteCollectionAsync(int itemId, string fileName, bool zipBackup, bool download, string folderName) {
            this.BackupSiteCollectionAsync(itemId, fileName, zipBackup, download, folderName, null);
        }
        
        /// <remarks/>
        public void BackupSiteCollectionAsync(int itemId, string fileName, bool zipBackup, bool download, string folderName, object userState) {
            if ((this.BackupSiteCollectionOperationCompleted == null)) {
                this.BackupSiteCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackupSiteCollectionOperationCompleted);
            }
            this.InvokeAsync("BackupSiteCollection", new object[] {
                        itemId,
                        fileName,
                        zipBackup,
                        download,
                        folderName}, this.BackupSiteCollectionOperationCompleted, userState);
        }
        
        private void OnBackupSiteCollectionOperationCompleted(object arg) {
            if ((this.BackupSiteCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackupSiteCollectionCompleted(this, new BackupSiteCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/RestoreSiteCollection", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RestoreSiteCollection(int itemId, string uploadedFile, string packageFile) {
            object[] results = this.Invoke("RestoreSiteCollection", new object[] {
                        itemId,
                        uploadedFile,
                        packageFile});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRestoreSiteCollection(int itemId, string uploadedFile, string packageFile, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RestoreSiteCollection", new object[] {
                        itemId,
                        uploadedFile,
                        packageFile}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRestoreSiteCollection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RestoreSiteCollectionAsync(int itemId, string uploadedFile, string packageFile) {
            this.RestoreSiteCollectionAsync(itemId, uploadedFile, packageFile, null);
        }
        
        /// <remarks/>
        public void RestoreSiteCollectionAsync(int itemId, string uploadedFile, string packageFile, object userState) {
            if ((this.RestoreSiteCollectionOperationCompleted == null)) {
                this.RestoreSiteCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreSiteCollectionOperationCompleted);
            }
            this.InvokeAsync("RestoreSiteCollection", new object[] {
                        itemId,
                        uploadedFile,
                        packageFile}, this.RestoreSiteCollectionOperationCompleted, userState);
        }
        
        private void OnRestoreSiteCollectionOperationCompleted(object arg) {
            if ((this.RestoreSiteCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestoreSiteCollectionCompleted(this, new RestoreSiteCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetBackupBinaryChunk", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetBackupBinaryChunk(int itemId, string path, int offset, int length) {
            object[] results = this.Invoke("GetBackupBinaryChunk", new object[] {
                        itemId,
                        path,
                        offset,
                        length});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBackupBinaryChunk(int itemId, string path, int offset, int length, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBackupBinaryChunk", new object[] {
                        itemId,
                        path,
                        offset,
                        length}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetBackupBinaryChunk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBackupBinaryChunkAsync(int itemId, string path, int offset, int length) {
            this.GetBackupBinaryChunkAsync(itemId, path, offset, length, null);
        }
        
        /// <remarks/>
        public void GetBackupBinaryChunkAsync(int itemId, string path, int offset, int length, object userState) {
            if ((this.GetBackupBinaryChunkOperationCompleted == null)) {
                this.GetBackupBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBackupBinaryChunkOperationCompleted);
            }
            this.InvokeAsync("GetBackupBinaryChunk", new object[] {
                        itemId,
                        path,
                        offset,
                        length}, this.GetBackupBinaryChunkOperationCompleted, userState);
        }
        
        private void OnGetBackupBinaryChunkOperationCompleted(object arg) {
            if ((this.GetBackupBinaryChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBackupBinaryChunkCompleted(this, new GetBackupBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AppendBackupBinaryChunk", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppendBackupBinaryChunk(int itemId, string fileName, string path, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] chunk) {
            object[] results = this.Invoke("AppendBackupBinaryChunk", new object[] {
                        itemId,
                        fileName,
                        path,
                        chunk});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppendBackupBinaryChunk(int itemId, string fileName, string path, byte[] chunk, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppendBackupBinaryChunk", new object[] {
                        itemId,
                        fileName,
                        path,
                        chunk}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAppendBackupBinaryChunk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppendBackupBinaryChunkAsync(int itemId, string fileName, string path, byte[] chunk) {
            this.AppendBackupBinaryChunkAsync(itemId, fileName, path, chunk, null);
        }
        
        /// <remarks/>
        public void AppendBackupBinaryChunkAsync(int itemId, string fileName, string path, byte[] chunk, object userState) {
            if ((this.AppendBackupBinaryChunkOperationCompleted == null)) {
                this.AppendBackupBinaryChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendBackupBinaryChunkOperationCompleted);
            }
            this.InvokeAsync("AppendBackupBinaryChunk", new object[] {
                        itemId,
                        fileName,
                        path,
                        chunk}, this.AppendBackupBinaryChunkOperationCompleted, userState);
        }
        
        private void OnAppendBackupBinaryChunkOperationCompleted(object arg) {
            if ((this.AppendBackupBinaryChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppendBackupBinaryChunkCompleted(this, new AppendBackupBinaryChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/CalculateSharePointSitesDiskSpace", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharePointSiteDiskSpace[] CalculateSharePointSitesDiskSpace(int itemId, out int errorCode) {
            object[] results = this.Invoke("CalculateSharePointSitesDiskSpace", new object[] {
                        itemId});
            errorCode = ((int)(results[1]));
            return ((SharePointSiteDiskSpace[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCalculateSharePointSitesDiskSpace(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CalculateSharePointSitesDiskSpace", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharePointSiteDiskSpace[] EndCalculateSharePointSitesDiskSpace(System.IAsyncResult asyncResult, out int errorCode) {
            object[] results = this.EndInvoke(asyncResult);
            errorCode = ((int)(results[1]));
            return ((SharePointSiteDiskSpace[])(results[0]));
        }
        
        /// <remarks/>
        public void CalculateSharePointSitesDiskSpaceAsync(int itemId) {
            this.CalculateSharePointSitesDiskSpaceAsync(itemId, null);
        }
        
        /// <remarks/>
        public void CalculateSharePointSitesDiskSpaceAsync(int itemId, object userState) {
            if ((this.CalculateSharePointSitesDiskSpaceOperationCompleted == null)) {
                this.CalculateSharePointSitesDiskSpaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateSharePointSitesDiskSpaceOperationCompleted);
            }
            this.InvokeAsync("CalculateSharePointSitesDiskSpace", new object[] {
                        itemId}, this.CalculateSharePointSitesDiskSpaceOperationCompleted, userState);
        }
        
        private void OnCalculateSharePointSitesDiskSpaceOperationCompleted(object arg) {
            if ((this.CalculateSharePointSitesDiskSpaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateSharePointSitesDiskSpaceCompleted(this, new CalculateSharePointSitesDiskSpaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateQuota", RequestNamespace="http://smbsaas/solidcp/enterpriseserver", ResponseNamespace="http://smbsaas/solidcp/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateQuota(int itemId, int siteCollectionId, int maxSize, int warningSize) {
            this.Invoke("UpdateQuota", new object[] {
                        itemId,
                        siteCollectionId,
                        maxSize,
                        warningSize});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateQuota(int itemId, int siteCollectionId, int maxSize, int warningSize, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateQuota", new object[] {
                        itemId,
                        siteCollectionId,
                        maxSize,
                        warningSize}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateQuota(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateQuotaAsync(int itemId, int siteCollectionId, int maxSize, int warningSize) {
            this.UpdateQuotaAsync(itemId, siteCollectionId, maxSize, warningSize, null);
        }
        
        /// <remarks/>
        public void UpdateQuotaAsync(int itemId, int siteCollectionId, int maxSize, int warningSize, object userState) {
            if ((this.UpdateQuotaOperationCompleted == null)) {
                this.UpdateQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateQuotaOperationCompleted);
            }
            this.InvokeAsync("UpdateQuota", new object[] {
                        itemId,
                        siteCollectionId,
                        maxSize,
                        warningSize}, this.UpdateQuotaOperationCompleted, userState);
        }
        
        private void OnUpdateQuotaOperationCompleted(object arg) {
            if ((this.UpdateQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateQuotaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSiteCollectionsPagedCompletedEventHandler(object sender, GetSiteCollectionsPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCollectionsPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteCollectionsPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharePointSiteCollectionListPaged Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharePointSiteCollectionListPaged)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSupportedLanguagesCompletedEventHandler(object sender, GetSupportedLanguagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedLanguagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedLanguagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSiteCollectionsCompletedEventHandler(object sender, GetSiteCollectionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCollectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteCollectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharePointSiteCollection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharePointSiteCollection[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetStorageSettingsCompletedEventHandler(object sender, SetStorageSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetStorageSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetStorageSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSiteCollectionCompletedEventHandler(object sender, GetSiteCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharePointSiteCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharePointSiteCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSiteCollectionByDomainCompletedEventHandler(object sender, GetSiteCollectionByDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCollectionByDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteCollectionByDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharePointSiteCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharePointSiteCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddSiteCollectionCompletedEventHandler(object sender, AddSiteCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSiteCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSiteCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSiteCollectionCompletedEventHandler(object sender, DeleteSiteCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSiteCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSiteCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSiteCollectionsCompletedEventHandler(object sender, DeleteSiteCollectionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSiteCollectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSiteCollectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void BackupSiteCollectionCompletedEventHandler(object sender, BackupSiteCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackupSiteCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackupSiteCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RestoreSiteCollectionCompletedEventHandler(object sender, RestoreSiteCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RestoreSiteCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RestoreSiteCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBackupBinaryChunkCompletedEventHandler(object sender, GetBackupBinaryChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBackupBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBackupBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AppendBackupBinaryChunkCompletedEventHandler(object sender, AppendBackupBinaryChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppendBackupBinaryChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppendBackupBinaryChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CalculateSharePointSitesDiskSpaceCompletedEventHandler(object sender, CalculateSharePointSitesDiskSpaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateSharePointSitesDiskSpaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateSharePointSitesDiskSpaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharePointSiteDiskSpace[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharePointSiteDiskSpace[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateQuotaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
