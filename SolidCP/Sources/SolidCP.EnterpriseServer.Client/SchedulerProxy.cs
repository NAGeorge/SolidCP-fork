// Copyright (c) 2016, SolidCP
// SolidCP is distributed under the Creative Commons Share-alike license
// 
// SolidCP is a fork of WebsitePanel:
// Copyright (c) 2015, Outercurve Foundation.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  Outercurve Foundation  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
using SolidCP.EnterpriseServer.Base.Scheduling;

namespace SolidCP.EnterpriseServer
{
	using System.Diagnostics;
	using System.Web.Services;
	using System.ComponentModel;
	using System.Web.Services.Protocols;
	using System;
	using System.Xml.Serialization;
	using System.Data;


	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "esSchedulerSoap", Namespace = "http://smbsaas/solidcp/enterpriseserver")]
	public partial class esScheduler : Microsoft.Web.Services3.WebServicesClientProtocol
	{

		private System.Threading.SendOrPostCallback GetSchedulerTimeOperationCompleted;

		private System.Threading.SendOrPostCallback GetScheduleTasksOperationCompleted;

		private System.Threading.SendOrPostCallback GetSchedulesOperationCompleted;

		private System.Threading.SendOrPostCallback GetSchedulesPagedOperationCompleted;

		private System.Threading.SendOrPostCallback GetScheduleOperationCompleted;

		private System.Threading.SendOrPostCallback GetScheduleParametersOperationCompleted;

		private System.Threading.SendOrPostCallback GetScheduleTaskViewConfigurationsOperationCompleted;

		private System.Threading.SendOrPostCallback GetScheduleTaskViewConfigurationOperationCompleted;

		private System.Threading.SendOrPostCallback StartScheduleOperationCompleted;

		private System.Threading.SendOrPostCallback StopScheduleOperationCompleted;

		private System.Threading.SendOrPostCallback AddScheduleOperationCompleted;

		private System.Threading.SendOrPostCallback UpdateScheduleOperationCompleted;

		private System.Threading.SendOrPostCallback DeleteScheduleOperationCompleted;

		/// <remarks/>
		public esScheduler()
		{
			this.Url = "http://localhost/SolidCPEnterpriseServer/esScheduler.asmx";
		}

		/// <remarks/>
		public event GetSchedulerTimeCompletedEventHandler GetSchedulerTimeCompleted;

		/// <remarks/>
		public event GetScheduleTasksCompletedEventHandler GetScheduleTasksCompleted;

		/// <remarks/>
		public event GetSchedulesCompletedEventHandler GetSchedulesCompleted;

		/// <remarks/>
		public event GetSchedulesPagedCompletedEventHandler GetSchedulesPagedCompleted;

		/// <remarks/>
		public event GetScheduleCompletedEventHandler GetScheduleCompleted;

		/// <remarks/>
		public event GetScheduleParametersCompletedEventHandler GetScheduleParametersCompleted;

		/// <remarks/>
		public event GetScheduleTaskViewConfigurationsCompletedEventHandler GetScheduleTaskViewConfigurationsCompleted;

		/// <remarks/>
		public event GetScheduleTaskViewConfigurationCompletedEventHandler GetScheduleTaskViewConfigurationCompleted;

		/// <remarks/>
		public event StartScheduleCompletedEventHandler StartScheduleCompleted;

		/// <remarks/>
		public event StopScheduleCompletedEventHandler StopScheduleCompleted;

		/// <remarks/>
		public event AddScheduleCompletedEventHandler AddScheduleCompleted;

		/// <remarks/>
		public event UpdateScheduleCompletedEventHandler UpdateScheduleCompleted;

		/// <remarks/>
		public event DeleteScheduleCompletedEventHandler DeleteScheduleCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSchedulerTime", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.DateTime GetSchedulerTime()
		{
			object[] results = this.Invoke("GetSchedulerTime", new object[0]);
			return ((System.DateTime)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSchedulerTime(System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSchedulerTime", new object[0], callback, asyncState);
		}

		/// <remarks/>
		public System.DateTime EndGetSchedulerTime(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.DateTime)(results[0]));
		}

		/// <remarks/>
		public void GetSchedulerTimeAsync()
		{
			this.GetSchedulerTimeAsync(null);
		}

		/// <remarks/>
		public void GetSchedulerTimeAsync(object userState)
		{
			if ((this.GetSchedulerTimeOperationCompleted == null))
			{
				this.GetSchedulerTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedulerTimeOperationCompleted);
			}
			this.InvokeAsync("GetSchedulerTime", new object[0], this.GetSchedulerTimeOperationCompleted, userState);
		}

		private void OnGetSchedulerTimeOperationCompleted(object arg)
		{
			if ((this.GetSchedulerTimeCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSchedulerTimeCompleted(this, new GetSchedulerTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetScheduleTasks", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ScheduleTaskInfo[] GetScheduleTasks()
		{
			object[] results = this.Invoke("GetScheduleTasks", new object[0]);
			return ((ScheduleTaskInfo[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetScheduleTasks(System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetScheduleTasks", new object[0], callback, asyncState);
		}

		/// <remarks/>
		public ScheduleTaskInfo[] EndGetScheduleTasks(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ScheduleTaskInfo[])(results[0]));
		}

		/// <remarks/>
		public void GetScheduleTasksAsync()
		{
			this.GetScheduleTasksAsync(null);
		}

		/// <remarks/>
		public void GetScheduleTasksAsync(object userState)
		{
			if ((this.GetScheduleTasksOperationCompleted == null))
			{
				this.GetScheduleTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleTasksOperationCompleted);
			}
			this.InvokeAsync("GetScheduleTasks", new object[0], this.GetScheduleTasksOperationCompleted, userState);
		}

		private void OnGetScheduleTasksOperationCompleted(object arg)
		{
			if ((this.GetScheduleTasksCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetScheduleTasksCompleted(this, new GetScheduleTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSchedules", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.Data.DataSet GetSchedules(int userId)
		{
			object[] results = this.Invoke("GetSchedules", new object[] {
                        userId});
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSchedules(int userId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSchedules", new object[] {
                        userId}, callback, asyncState);
		}

		/// <remarks/>
		public System.Data.DataSet EndGetSchedules(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public void GetSchedulesAsync(int userId)
		{
			this.GetSchedulesAsync(userId, null);
		}

		/// <remarks/>
		public void GetSchedulesAsync(int userId, object userState)
		{
			if ((this.GetSchedulesOperationCompleted == null))
			{
				this.GetSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedulesOperationCompleted);
			}
			this.InvokeAsync("GetSchedules", new object[] {
                        userId}, this.GetSchedulesOperationCompleted, userState);
		}

		private void OnGetSchedulesOperationCompleted(object arg)
		{
			if ((this.GetSchedulesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSchedulesCompleted(this, new GetSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSchedulesPaged", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public System.Data.DataSet GetSchedulesPaged(int packageId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
		{
			object[] results = this.Invoke("GetSchedulesPaged", new object[] {
                        packageId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSchedulesPaged(int packageId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSchedulesPaged", new object[] {
                        packageId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
		}

		/// <remarks/>
		public System.Data.DataSet EndGetSchedulesPaged(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((System.Data.DataSet)(results[0]));
		}

		/// <remarks/>
		public void GetSchedulesPagedAsync(int packageId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows)
		{
			this.GetSchedulesPagedAsync(packageId, recursive, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
		}

		/// <remarks/>
		public void GetSchedulesPagedAsync(int packageId, bool recursive, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState)
		{
			if ((this.GetSchedulesPagedOperationCompleted == null))
			{
				this.GetSchedulesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedulesPagedOperationCompleted);
			}
			this.InvokeAsync("GetSchedulesPaged", new object[] {
                        packageId,
                        recursive,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetSchedulesPagedOperationCompleted, userState);
		}

		private void OnGetSchedulesPagedOperationCompleted(object arg)
		{
			if ((this.GetSchedulesPagedCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetSchedulesPagedCompleted(this, new GetSchedulesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetSchedule", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ScheduleInfo GetSchedule(int scheduleId)
		{
			object[] results = this.Invoke("GetSchedule", new object[] {
                        scheduleId});
			return ((ScheduleInfo)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetSchedule(int scheduleId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetSchedule", new object[] {
                        scheduleId}, callback, asyncState);
		}

		/// <remarks/>
		public ScheduleInfo EndGetSchedule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ScheduleInfo)(results[0]));
		}

		/// <remarks/>
		public void GetScheduleAsync(int scheduleId)
		{
			this.GetScheduleAsync(scheduleId, null);
		}

		/// <remarks/>
		public void GetScheduleAsync(int scheduleId, object userState)
		{
			if ((this.GetScheduleOperationCompleted == null))
			{
				this.GetScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleOperationCompleted);
			}
			this.InvokeAsync("GetSchedule", new object[] {
                        scheduleId}, this.GetScheduleOperationCompleted, userState);
		}

		private void OnGetScheduleOperationCompleted(object arg)
		{
			if ((this.GetScheduleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetScheduleCompleted(this, new GetScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetScheduleParameters", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ScheduleTaskParameterInfo[] GetScheduleParameters(string taskId, int scheduleId)
		{
			object[] results = this.Invoke("GetScheduleParameters", new object[] {
                        taskId,
                        scheduleId});
			return ((ScheduleTaskParameterInfo[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetScheduleParameters(string taskId, int scheduleId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetScheduleParameters", new object[] {
                        taskId,
                        scheduleId}, callback, asyncState);
		}

		/// <remarks/>
		public ScheduleTaskParameterInfo[] EndGetScheduleParameters(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ScheduleTaskParameterInfo[])(results[0]));
		}

		/// <remarks/>
		public void GetScheduleParametersAsync(string taskId, int scheduleId)
		{
			this.GetScheduleParametersAsync(taskId, scheduleId, null);
		}

		/// <remarks/>
		public void GetScheduleParametersAsync(string taskId, int scheduleId, object userState)
		{
			if ((this.GetScheduleParametersOperationCompleted == null))
			{
				this.GetScheduleParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleParametersOperationCompleted);
			}
			this.InvokeAsync("GetScheduleParameters", new object[] {
                        taskId,
                        scheduleId}, this.GetScheduleParametersOperationCompleted, userState);
		}

		private void OnGetScheduleParametersOperationCompleted(object arg)
		{
			if ((this.GetScheduleParametersCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetScheduleParametersCompleted(this, new GetScheduleParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetScheduleTaskViewConfigurati" +
			"ons", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ScheduleTaskViewConfiguration[] GetScheduleTaskViewConfigurations(string taskId)
		{
			object[] results = this.Invoke("GetScheduleTaskViewConfigurations", new object[] {
                        taskId});
			return ((ScheduleTaskViewConfiguration[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetScheduleTaskViewConfigurations(string taskId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetScheduleTaskViewConfigurations", new object[] {
                        taskId}, callback, asyncState);
		}

		/// <remarks/>
		public ScheduleTaskViewConfiguration[] EndGetScheduleTaskViewConfigurations(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ScheduleTaskViewConfiguration[])(results[0]));
		}

		/// <remarks/>
		public void GetScheduleTaskViewConfigurationsAsync(string taskId)
		{
			this.GetScheduleTaskViewConfigurationsAsync(taskId, null);
		}

		/// <remarks/>
		public void GetScheduleTaskViewConfigurationsAsync(string taskId, object userState)
		{
			if ((this.GetScheduleTaskViewConfigurationsOperationCompleted == null))
			{
				this.GetScheduleTaskViewConfigurationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleTaskViewConfigurationsOperationCompleted);
			}
			this.InvokeAsync("GetScheduleTaskViewConfigurations", new object[] {
                        taskId}, this.GetScheduleTaskViewConfigurationsOperationCompleted, userState);
		}

		private void OnGetScheduleTaskViewConfigurationsOperationCompleted(object arg)
		{
			if ((this.GetScheduleTaskViewConfigurationsCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetScheduleTaskViewConfigurationsCompleted(this, new GetScheduleTaskViewConfigurationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/GetScheduleTaskViewConfigurati" +
			"on", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public ScheduleTaskViewConfiguration GetScheduleTaskViewConfiguration(string taskId, string environment)
		{
			object[] results = this.Invoke("GetScheduleTaskViewConfiguration", new object[] {
                        taskId,
                        environment});
			return ((ScheduleTaskViewConfiguration)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetScheduleTaskViewConfiguration(string taskId, string environment, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetScheduleTaskViewConfiguration", new object[] {
                        taskId,
                        environment}, callback, asyncState);
		}

		/// <remarks/>
		public ScheduleTaskViewConfiguration EndGetScheduleTaskViewConfiguration(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ScheduleTaskViewConfiguration)(results[0]));
		}

		/// <remarks/>
		public void GetScheduleTaskViewConfigurationAsync(string taskId, string environment)
		{
			this.GetScheduleTaskViewConfigurationAsync(taskId, environment, null);
		}

		/// <remarks/>
		public void GetScheduleTaskViewConfigurationAsync(string taskId, string environment, object userState)
		{
			if ((this.GetScheduleTaskViewConfigurationOperationCompleted == null))
			{
				this.GetScheduleTaskViewConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleTaskViewConfigurationOperationCompleted);
			}
			this.InvokeAsync("GetScheduleTaskViewConfiguration", new object[] {
                        taskId,
                        environment}, this.GetScheduleTaskViewConfigurationOperationCompleted, userState);
		}

		private void OnGetScheduleTaskViewConfigurationOperationCompleted(object arg)
		{
			if ((this.GetScheduleTaskViewConfigurationCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetScheduleTaskViewConfigurationCompleted(this, new GetScheduleTaskViewConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/StartSchedule", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int StartSchedule(int scheduleId)
		{
			object[] results = this.Invoke("StartSchedule", new object[] {
                        scheduleId});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginStartSchedule(int scheduleId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("StartSchedule", new object[] {
                        scheduleId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndStartSchedule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void StartScheduleAsync(int scheduleId)
		{
			this.StartScheduleAsync(scheduleId, null);
		}

		/// <remarks/>
		public void StartScheduleAsync(int scheduleId, object userState)
		{
			if ((this.StartScheduleOperationCompleted == null))
			{
				this.StartScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartScheduleOperationCompleted);
			}
			this.InvokeAsync("StartSchedule", new object[] {
                        scheduleId}, this.StartScheduleOperationCompleted, userState);
		}

		private void OnStartScheduleOperationCompleted(object arg)
		{
			if ((this.StartScheduleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.StartScheduleCompleted(this, new StartScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/StopSchedule", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int StopSchedule(int scheduleId)
		{
			object[] results = this.Invoke("StopSchedule", new object[] {
                        scheduleId});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginStopSchedule(int scheduleId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("StopSchedule", new object[] {
                        scheduleId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndStopSchedule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void StopScheduleAsync(int scheduleId)
		{
			this.StopScheduleAsync(scheduleId, null);
		}

		/// <remarks/>
		public void StopScheduleAsync(int scheduleId, object userState)
		{
			if ((this.StopScheduleOperationCompleted == null))
			{
				this.StopScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopScheduleOperationCompleted);
			}
			this.InvokeAsync("StopSchedule", new object[] {
                        scheduleId}, this.StopScheduleOperationCompleted, userState);
		}

		private void OnStopScheduleOperationCompleted(object arg)
		{
			if ((this.StopScheduleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.StopScheduleCompleted(this, new StopScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/AddSchedule", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int AddSchedule(ScheduleInfo schedule)
		{
			object[] results = this.Invoke("AddSchedule", new object[] {
                        schedule});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginAddSchedule(ScheduleInfo schedule, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("AddSchedule", new object[] {
                        schedule}, callback, asyncState);
		}

		/// <remarks/>
		public int EndAddSchedule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void AddScheduleAsync(ScheduleInfo schedule)
		{
			this.AddScheduleAsync(schedule, null);
		}

		/// <remarks/>
		public void AddScheduleAsync(ScheduleInfo schedule, object userState)
		{
			if ((this.AddScheduleOperationCompleted == null))
			{
				this.AddScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScheduleOperationCompleted);
			}
			this.InvokeAsync("AddSchedule", new object[] {
                        schedule}, this.AddScheduleOperationCompleted, userState);
		}

		private void OnAddScheduleOperationCompleted(object arg)
		{
			if ((this.AddScheduleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.AddScheduleCompleted(this, new AddScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/UpdateSchedule", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int UpdateSchedule(ScheduleInfo schedule)
		{
			object[] results = this.Invoke("UpdateSchedule", new object[] {
                        schedule});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginUpdateSchedule(ScheduleInfo schedule, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("UpdateSchedule", new object[] {
                        schedule}, callback, asyncState);
		}

		/// <remarks/>
		public int EndUpdateSchedule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void UpdateScheduleAsync(ScheduleInfo schedule)
		{
			this.UpdateScheduleAsync(schedule, null);
		}

		/// <remarks/>
		public void UpdateScheduleAsync(ScheduleInfo schedule, object userState)
		{
			if ((this.UpdateScheduleOperationCompleted == null))
			{
				this.UpdateScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScheduleOperationCompleted);
			}
			this.InvokeAsync("UpdateSchedule", new object[] {
                        schedule}, this.UpdateScheduleOperationCompleted, userState);
		}

		private void OnUpdateScheduleOperationCompleted(object arg)
		{
			if ((this.UpdateScheduleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.UpdateScheduleCompleted(this, new UpdateScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/solidcp/enterpriseserver/DeleteSchedule", RequestNamespace = "http://smbsaas/solidcp/enterpriseserver", ResponseNamespace = "http://smbsaas/solidcp/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int DeleteSchedule(int scheduleId)
		{
			object[] results = this.Invoke("DeleteSchedule", new object[] {
                        scheduleId});
			return ((int)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginDeleteSchedule(int scheduleId, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("DeleteSchedule", new object[] {
                        scheduleId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndDeleteSchedule(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}

		/// <remarks/>
		public void DeleteScheduleAsync(int scheduleId)
		{
			this.DeleteScheduleAsync(scheduleId, null);
		}

		/// <remarks/>
		public void DeleteScheduleAsync(int scheduleId, object userState)
		{
			if ((this.DeleteScheduleOperationCompleted == null))
			{
				this.DeleteScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScheduleOperationCompleted);
			}
			this.InvokeAsync("DeleteSchedule", new object[] {
                        scheduleId}, this.DeleteScheduleOperationCompleted, userState);
		}

		private void OnDeleteScheduleOperationCompleted(object arg)
		{
			if ((this.DeleteScheduleCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.DeleteScheduleCompleted(this, new DeleteScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}
	}





	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSchedulerTimeCompletedEventHandler(object sender, GetSchedulerTimeCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSchedulerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSchedulerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.DateTime Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.DateTime)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetScheduleTasksCompletedEventHandler(object sender, GetScheduleTasksCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetScheduleTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetScheduleTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ScheduleTaskInfo[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ScheduleTaskInfo[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSchedulesCompletedEventHandler(object sender, GetSchedulesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Data.DataSet Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Data.DataSet)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetSchedulesPagedCompletedEventHandler(object sender, GetSchedulesPagedCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetSchedulesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetSchedulesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Data.DataSet Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Data.DataSet)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetScheduleCompletedEventHandler(object sender, GetScheduleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ScheduleInfo Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ScheduleInfo)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetScheduleParametersCompletedEventHandler(object sender, GetScheduleParametersCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetScheduleParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetScheduleParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ScheduleTaskParameterInfo[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ScheduleTaskParameterInfo[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetScheduleTaskViewConfigurationsCompletedEventHandler(object sender, GetScheduleTaskViewConfigurationsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetScheduleTaskViewConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetScheduleTaskViewConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ScheduleTaskViewConfiguration[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ScheduleTaskViewConfiguration[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void GetScheduleTaskViewConfigurationCompletedEventHandler(object sender, GetScheduleTaskViewConfigurationCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetScheduleTaskViewConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetScheduleTaskViewConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public ScheduleTaskViewConfiguration Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((ScheduleTaskViewConfiguration)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void StartScheduleCompletedEventHandler(object sender, StartScheduleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class StartScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal StartScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void StopScheduleCompletedEventHandler(object sender, StopScheduleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class StopScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal StopScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void AddScheduleCompletedEventHandler(object sender, AddScheduleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class AddScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal AddScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void UpdateScheduleCompletedEventHandler(object sender, UpdateScheduleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class UpdateScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal UpdateScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	public delegate void DeleteScheduleCompletedEventHandler(object sender, DeleteScheduleCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class DeleteScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal DeleteScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}
	}
}
